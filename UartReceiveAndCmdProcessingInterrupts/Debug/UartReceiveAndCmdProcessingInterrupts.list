
UartReceiveAndCmdProcessingInterrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd0  08005bd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bd8  08005bd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000070  08005c50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08005c50  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d407  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210c  00000000  00000000  0002d4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002f5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  000300b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270f4  00000000  00000000  00030ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d214  00000000  00000000  00057bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb378  00000000  00000000  00064de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003560  00000000  00000000  001501b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800593c 	.word	0x0800593c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800593c 	.word	0x0800593c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <UART_Transmit>:
#define OPTION1 "1. Start LED blinking\n\r"
#define OPTION2 "2. Stop LED blinking\n\r"
#define PROMPT "Select Option >\n\r"

int UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, size_t len)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit_IT(huart, pData, len) != HAL_OK) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	68b9      	ldr	r1, [r7, #8]
 80005b8:	68f8      	ldr	r0, [r7, #12]
 80005ba:	f002 fbd5 	bl	8002d68 <HAL_UART_Transmit_IT>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d009      	beq.n	80005d8 <UART_Transmit+0x34>
		if (!RingBuffer_Write(&txrb, pData, len)) {
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <UART_Transmit+0x40>)
 80005ca:	f000 fa7f 	bl	8000acc <RingBuffer_Write>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d101      	bne.n	80005d8 <UART_Transmit+0x34>
			return 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <UART_Transmit+0x36>
		}
	}
	return 1;
 80005d8:	2301      	movs	r3, #1
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000110 	.word	0x20000110

080005e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uint8_t txData;
	if (!RingBuffer_IsEmpty(&txrb)) {
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <HAL_UART_TxCpltCallback+0x38>)
 80005f2:	f000 fa3a 	bl	8000a6a <RingBuffer_IsEmpty>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10d      	bne.n	8000618 <HAL_UART_TxCpltCallback+0x30>
		RingBuffer_Read(&txrb, &txData, 1);
 80005fc:	f107 030f 	add.w	r3, r7, #15
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	4806      	ldr	r0, [pc, #24]	; (8000620 <HAL_UART_TxCpltCallback+0x38>)
 8000606:	f000 fa9b 	bl	8000b40 <RingBuffer_Read>
		HAL_UART_Transmit_IT(huart, &txData, 1);
 800060a:	f107 030f 	add.w	r3, r7, #15
 800060e:	2201      	movs	r2, #1
 8000610:	4619      	mov	r1, r3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f002 fba8 	bl	8002d68 <HAL_UART_Transmit_IT>
	}
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000110 	.word	0x20000110

08000624 <ledTask>:
enum LedTaskState ledState;
int ledCount;
int ledMaxCount;

void ledTask()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	if (ledState == LedOn)
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <ledTask+0x34>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d110      	bne.n	8000652 <ledTask+0x2e>
	{
		if (ledCount++ >= ledMaxCount)
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <ledTask+0x38>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	4909      	ldr	r1, [pc, #36]	; (800065c <ledTask+0x38>)
 8000638:	600a      	str	r2, [r1, #0]
 800063a:	4a09      	ldr	r2, [pc, #36]	; (8000660 <ledTask+0x3c>)
 800063c:	6812      	ldr	r2, [r2, #0]
 800063e:	4293      	cmp	r3, r2
 8000640:	db07      	blt.n	8000652 <ledTask+0x2e>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000642:	2120      	movs	r1, #32
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f001 f806 	bl	8001658 <HAL_GPIO_TogglePin>
			ledCount = 0;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <ledTask+0x38>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
	}
	else if (ledState == LedOff)
	{
		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
	}
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200001e8 	.word	0x200001e8
 800065c:	200001ec 	.word	0x200001ec
 8000660:	200001f0 	.word	0x200001f0

08000664 <ledStart>:

void ledStart(int maxCount)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	ledState = LedOn;
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <ledStart+0x20>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
	ledMaxCount = maxCount;
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <ledStart+0x24>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	200001e8 	.word	0x200001e8
 8000688:	200001f0 	.word	0x200001f0

0800068c <ledStop>:

void ledStop()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	ledState = LedOff;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <ledStop+0x1c>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2120      	movs	r1, #32
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f000 ffc3 	bl	8001628 <HAL_GPIO_WritePin>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200001e8 	.word	0x200001e8

080006ac <HAL_UART_RxCpltCallback>:
int cmdcount = 0;
int cmdprint = 0;
uint8_t ch;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	// in this callback we know that we have received the data
	if (ch == '\r')
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <HAL_UART_RxCpltCallback+0x6c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b0d      	cmp	r3, #13
 80006ba:	d108      	bne.n	80006ce <HAL_UART_RxCpltCallback+0x22>
	{
		// this is the end of the input
		// notify that we ready to handle new command
		cmdcount = RING_BUFFER_SIZE - RingBuffer_FreeSpace(&rxrb);
 80006bc:	4817      	ldr	r0, [pc, #92]	; (800071c <HAL_UART_RxCpltCallback+0x70>)
 80006be:	f000 f9e7 	bl	8000a90 <RingBuffer_FreeSpace>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80006c8:	4a15      	ldr	r2, [pc, #84]	; (8000720 <HAL_UART_RxCpltCallback+0x74>)
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	e00f      	b.n	80006ee <HAL_UART_RxCpltCallback+0x42>
	}
	else
	{
		// put char to rx buffer
		if (RingBuffer_Write(&rxrb, &ch, 1) != 1)
 80006ce:	2201      	movs	r2, #1
 80006d0:	4911      	ldr	r1, [pc, #68]	; (8000718 <HAL_UART_RxCpltCallback+0x6c>)
 80006d2:	4812      	ldr	r0, [pc, #72]	; (800071c <HAL_UART_RxCpltCallback+0x70>)
 80006d4:	f000 f9fa 	bl	8000acc <RingBuffer_Write>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d002      	beq.n	80006e4 <HAL_UART_RxCpltCallback+0x38>
		{
			// no more space in buffer, clear it
			RingBuffer_Init(&rxrb);
 80006de:	480f      	ldr	r0, [pc, #60]	; (800071c <HAL_UART_RxCpltCallback+0x70>)
 80006e0:	f000 f9b3 	bl	8000a4a <RingBuffer_Init>
		}

		// we can echo it because echo will use interrupt and will not stop this interrupt
		UART_Transmit(&huart2, &ch, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	490c      	ldr	r1, [pc, #48]	; (8000718 <HAL_UART_RxCpltCallback+0x6c>)
 80006e8:	480e      	ldr	r0, [pc, #56]	; (8000724 <HAL_UART_RxCpltCallback+0x78>)
 80006ea:	f7ff ff5b 	bl	80005a4 <UART_Transmit>
	}

	// clear error if we have
	if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_UART_RxCpltCallback+0x78>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	69db      	ldr	r3, [r3, #28]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d003      	beq.n	8000704 <HAL_UART_RxCpltCallback+0x58>
	{
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_UART_RxCpltCallback+0x78>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2208      	movs	r2, #8
 8000702:	621a      	str	r2, [r3, #32]
	}

	// start reading again
	/*HAL_StatusTypeDef Status = */HAL_UART_Receive_IT(&huart2, &ch, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	4904      	ldr	r1, [pc, #16]	; (8000718 <HAL_UART_RxCpltCallback+0x6c>)
 8000708:	4806      	ldr	r0, [pc, #24]	; (8000724 <HAL_UART_RxCpltCallback+0x78>)
 800070a:	f002 fb9b 	bl	8002e44 <HAL_UART_Receive_IT>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000260 	.word	0x20000260
 800071c:	2000017c 	.word	0x2000017c
 8000720:	20000258 	.word	0x20000258
 8000724:	2000008c 	.word	0x2000008c

08000728 <commTask>:

int commTask()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	// just wait for interrupt to set cmdcount
	if (!cmdcount)
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <commTask+0x44>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d101      	bne.n	8000738 <commTask+0x10>
	{
		return 0;
 8000734:	2300      	movs	r3, #0
 8000736:	e017      	b.n	8000768 <commTask+0x40>
	}

	// read the command in buffer
	RingBuffer_Read(&rxrb, cmdbuffer, cmdcount);
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <commTask+0x44>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	490c      	ldr	r1, [pc, #48]	; (8000770 <commTask+0x48>)
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <commTask+0x4c>)
 8000742:	f000 f9fd 	bl	8000b40 <RingBuffer_Read>

	//UART_Transmit(&huart2, cmdbuffer, cmdcount);

	// echo EOL
	UART_Transmit(&huart2, (uint8_t*)"\r\n", 2);
 8000746:	2202      	movs	r2, #2
 8000748:	490b      	ldr	r1, [pc, #44]	; (8000778 <commTask+0x50>)
 800074a:	480c      	ldr	r0, [pc, #48]	; (800077c <commTask+0x54>)
 800074c:	f7ff ff2a 	bl	80005a4 <UART_Transmit>

	// now we can notify that command is received
	cmdbuffer[cmdcount] = 0;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <commTask+0x44>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <commTask+0x48>)
 8000756:	2100      	movs	r1, #0
 8000758:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <commTask+0x44>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <commTask+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
	return 1;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000258 	.word	0x20000258
 8000770:	200001f4 	.word	0x200001f4
 8000774:	2000017c 	.word	0x2000017c
 8000778:	080059c8 	.word	0x080059c8
 800077c:	2000008c 	.word	0x2000008c
 8000780:	2000025c 	.word	0x2000025c

08000784 <handleCommand>:

void handleCommand()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
  char cmd[20];
  int maxCount;

  int params = sscanf((const char*)cmdbuffer, "%s %d", cmd, &maxCount);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	f107 0208 	add.w	r2, r7, #8
 8000790:	4914      	ldr	r1, [pc, #80]	; (80007e4 <handleCommand+0x60>)
 8000792:	4815      	ldr	r0, [pc, #84]	; (80007e8 <handleCommand+0x64>)
 8000794:	f003 ff48 	bl	8004628 <siscanf>
 8000798:	61f8      	str	r0, [r7, #28]

  if (params == 0)
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d01d      	beq.n	80007dc <handleCommand+0x58>
  {
	  return;
  }

  if (strcmp(cmd, "start") == 0)
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	4911      	ldr	r1, [pc, #68]	; (80007ec <handleCommand+0x68>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fd12 	bl	80001d0 <strcmp>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d104      	bne.n	80007bc <handleCommand+0x38>
  {
	  ledStart(maxCount);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff55 	bl	8000664 <ledStart>
 80007ba:	e010      	b.n	80007de <handleCommand+0x5a>
  }
  else if (strcmp(cmd, "stop") == 0)
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	490b      	ldr	r1, [pc, #44]	; (80007f0 <handleCommand+0x6c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fd04 	bl	80001d0 <strcmp>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d102      	bne.n	80007d4 <handleCommand+0x50>
  {
	  ledStop();
 80007ce:	f7ff ff5d 	bl	800068c <ledStop>
 80007d2:	e004      	b.n	80007de <handleCommand+0x5a>
  }
  else
  {
	  printf("Invalid command\r\n");
 80007d4:	4807      	ldr	r0, [pc, #28]	; (80007f4 <handleCommand+0x70>)
 80007d6:	f003 ff1f 	bl	8004618 <puts>
 80007da:	e000      	b.n	80007de <handleCommand+0x5a>
	  return;
 80007dc:	bf00      	nop
  }
}
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	080059cc 	.word	0x080059cc
 80007e8:	200001f4 	.word	0x200001f4
 80007ec:	080059d4 	.word	0x080059d4
 80007f0:	080059dc 	.word	0x080059dc
 80007f4:	080059e4 	.word	0x080059e4

080007f8 <_write>:

/////////////////////////////////////////////////////////////////////////
// Redirecting printf to UART
/////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	UART_Transmit(&huart2, (uint8_t *) ptr, len);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	461a      	mov	r2, r3
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <_write+0x24>)
 800080c:	f7ff feca 	bl	80005a4 <UART_Transmit>
    return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000008c 	.word	0x2000008c

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 fb4a 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f822 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f000 f8a2 	bl	8000974 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000830:	f000 f870 	bl	8000914 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RingBuffer_Init(&txrb);
 8000834:	480a      	ldr	r0, [pc, #40]	; (8000860 <main+0x40>)
 8000836:	f000 f908 	bl	8000a4a <RingBuffer_Init>
  RingBuffer_Init(&rxrb);
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <main+0x44>)
 800083c:	f000 f905 	bl	8000a4a <RingBuffer_Init>

 // printMessages2();

  //
  // start communication be receiving one byte
  /*HAL_StatusTypeDef Status = */HAL_UART_Receive_IT(&huart2, &ch, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	4909      	ldr	r1, [pc, #36]	; (8000868 <main+0x48>)
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <main+0x4c>)
 8000846:	f002 fafd 	bl	8002e44 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ledTask();
 800084a:	f7ff feeb 	bl	8000624 <ledTask>
	  if (commTask())
 800084e:	f7ff ff6b 	bl	8000728 <commTask>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0f8      	beq.n	800084a <main+0x2a>
	  {
		  handleCommand();
 8000858:	f7ff ff94 	bl	8000784 <handleCommand>
	  ledTask();
 800085c:	e7f5      	b.n	800084a <main+0x2a>
 800085e:	bf00      	nop
 8000860:	20000110 	.word	0x20000110
 8000864:	2000017c 	.word	0x2000017c
 8000868:	20000260 	.word	0x20000260
 800086c:	2000008c 	.word	0x2000008c

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b096      	sub	sp, #88	; 0x58
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2244      	movs	r2, #68	; 0x44
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f003 fe54 	bl	800452c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000892:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000896:	f000 ff07 	bl	80016a8 <HAL_PWREx_ControlVoltageScaling>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008a0:	f000 f8ce 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a4:	2302      	movs	r3, #2
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ae:	2310      	movs	r3, #16
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b6:	2302      	movs	r3, #2
 80008b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008be:	230a      	movs	r3, #10
 80008c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008c2:	2307      	movs	r3, #7
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 ff3e 	bl	8001754 <HAL_RCC_OscConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008de:	f000 f8af 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	230f      	movs	r3, #15
 80008e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e6:	2303      	movs	r3, #3
 80008e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	2104      	movs	r1, #4
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fb06 	bl	8001f0c <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000906:	f000 f89b 	bl	8000a40 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3758      	adds	r7, #88	; 0x58
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART2_UART_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_USART2_UART_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART2_UART_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART2_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000958:	f002 f9b8 	bl	8002ccc <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f86d 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000008c 	.word	0x2000008c
 8000970:	40004400 	.word	0x40004400

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <MX_GPIO_Init+0xc4>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <MX_GPIO_Init+0xc4>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_GPIO_Init+0xc4>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a24      	ldr	r2, [pc, #144]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2120      	movs	r1, #32
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f000 fe19 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <MX_GPIO_Init+0xc8>)
 8000a0e:	f000 fc61 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a12:	2320      	movs	r3, #32
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f000 fc52 	bl	80012d4 <HAL_GPIO_Init>

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000800 	.word	0x48000800

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>

08000a4a <RingBuffer_Init>:
#include "ringbuffer.h"

// Initializes the ring buffer internal data structures
void RingBuffer_Init(RingBuffer* rb)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	rb->_head = 0;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
	rb->_tail = 0;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <RingBuffer_IsEmpty>:

// returns 1 if it’s empty and 0 if it has at least one byte
int RingBuffer_IsEmpty(RingBuffer* rb)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	return rb->_head == rb->_tail;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	bf0c      	ite	eq
 8000a7e:	2301      	moveq	r3, #1
 8000a80:	2300      	movne	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <RingBuffer_FreeSpace>:
	return rb->_tail == (rb->_head + 1) % RING_BUFFER_SIZE;
}

// returns the amount of free space in the buffer
int RingBuffer_FreeSpace(RingBuffer* rb)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	if (rb->_head >= rb->_tail) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	db07      	blt.n	8000ab4 <RingBuffer_FreeSpace+0x24>
		return RING_BUFFER_SIZE - rb->_head + rb->_tail;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	e005      	b.n	8000ac0 <RingBuffer_FreeSpace+0x30>
	}
	else {
		return rb->_tail - rb->_head - 1;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	3b01      	subs	r3, #1
	}
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <RingBuffer_Write>:

// Writes the data from the input array to the ring buffer.
// If it does not have enough space returns 0 and does not write any bytes,
// otherwise writes the bytes to the ring buffer and returns 1
int RingBuffer_Write(RingBuffer* rb, uint8_t * data, size_t dataSize)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	if (dataSize >= RingBuffer_FreeSpace(rb)) {
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff ffd9 	bl	8000a90 <RingBuffer_FreeSpace>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d301      	bcc.n	8000aec <RingBuffer_Write+0x20>
		return 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e023      	b.n	8000b34 <RingBuffer_Write+0x68>
	}

	for (size_t i = 0; i < dataSize; i++) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e01b      	b.n	8000b2a <RingBuffer_Write+0x5e>
		rb->_buffer[rb->_head] = *data++;
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1c5a      	adds	r2, r3, #1
 8000af6:	60ba      	str	r2, [r7, #8]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	7819      	ldrb	r1, [r3, #0]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4413      	add	r3, r2
 8000b02:	460a      	mov	r2, r1
 8000b04:	721a      	strb	r2, [r3, #8]
		rb->_head = (rb->_head + 1) % RING_BUFFER_SIZE;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <RingBuffer_Write+0x70>)
 8000b0e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b12:	1159      	asrs	r1, r3, #5
 8000b14:	17d3      	asrs	r3, r2, #31
 8000b16:	1acb      	subs	r3, r1, r3
 8000b18:	2164      	movs	r1, #100	; 0x64
 8000b1a:	fb01 f303 	mul.w	r3, r1, r3
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	6013      	str	r3, [r2, #0]
	for (size_t i = 0; i < dataSize; i++) {
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d3df      	bcc.n	8000af2 <RingBuffer_Write+0x26>
	}
	return 1;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	51eb851f 	.word	0x51eb851f

08000b40 <RingBuffer_Read>:

// Reads the amount of bytes specified in dataSize from the ring buffer to the data array
int RingBuffer_Read(RingBuffer* rb, uint8_t * data, size_t dataSize)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
	int readCount = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < dataSize; i++) {
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	e023      	b.n	8000b9e <RingBuffer_Read+0x5e>
		if (rb->_tail == rb->_head) {
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d022      	beq.n	8000ba8 <RingBuffer_Read+0x68>
			break;
		}

		*data++ = rb->_buffer[rb->_tail];
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1c59      	adds	r1, r3, #1
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	68f9      	ldr	r1, [r7, #12]
 8000b6e:	440a      	add	r2, r1
 8000b70:	7a12      	ldrb	r2, [r2, #8]
 8000b72:	701a      	strb	r2, [r3, #0]
		rb->_tail = (rb->_tail + 1) % RING_BUFFER_SIZE;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <RingBuffer_Read+0x78>)
 8000b7c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b80:	1159      	asrs	r1, r3, #5
 8000b82:	17d3      	asrs	r3, r2, #31
 8000b84:	1acb      	subs	r3, r1, r3
 8000b86:	2164      	movs	r1, #100	; 0x64
 8000b88:	fb01 f303 	mul.w	r3, r1, r3
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	6053      	str	r3, [r2, #4]
		readCount++;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < dataSize; i++) {
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d3d7      	bcc.n	8000b56 <RingBuffer_Read+0x16>
 8000ba6:	e000      	b.n	8000baa <RingBuffer_Read+0x6a>
			break;
 8000ba8:	bf00      	nop
	}

	return readCount;
 8000baa:	697b      	ldr	r3, [r7, #20]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	371c      	adds	r7, #28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	51eb851f 	.word	0x51eb851f

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <HAL_MspInit+0x44>)
 8000bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <HAL_MspInit+0x44>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_MspInit+0x44>)
 8000bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_MspInit+0x44>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_MspInit+0x44>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6593      	str	r3, [r2, #88]	; 0x58
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_MspInit+0x44>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0ac      	sub	sp, #176	; 0xb0
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2288      	movs	r2, #136	; 0x88
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 fc81 	bl	800452c <memset>
  if(huart->Instance==USART2)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a25      	ldr	r2, [pc, #148]	; (8000cc4 <HAL_UART_MspInit+0xc0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d143      	bne.n	8000cbc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 fb87 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c4c:	f7ff fef8 	bl	8000a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c54:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c80:	230c      	movs	r3, #12
 8000c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f000 fb14 	bl	80012d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2026      	movs	r0, #38	; 0x26
 8000cb2:	f000 fa5a 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cb6:	2026      	movs	r0, #38	; 0x26
 8000cb8:	f000 fa73 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	37b0      	adds	r7, #176	; 0xb0
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40004400 	.word	0x40004400
 8000cc8:	40021000 	.word	0x40021000

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 f92c 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <USART2_IRQHandler+0x10>)
 8000d26:	f002 f8e3 	bl	8002ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000008c 	.word	0x2000008c

08000d34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e00a      	b.n	8000d5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf0      	blt.n	8000d46 <_read+0x12>
	}

return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d96:	605a      	str	r2, [r3, #4]
	return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <_isatty>:

int _isatty(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	return 1;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f003 fb66 	bl	80044d8 <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20018000 	.word	0x20018000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	20000264 	.word	0x20000264
 8000e40:	20000280 	.word	0x20000280

08000e44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e6c:	f7ff ffea 	bl	8000e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	; (8000ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <LoopForever+0xe>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	; (8000eb4 <LoopForever+0x16>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f003 fb25 	bl	80044e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e9a:	f7ff fcc1 	bl	8000820 <main>

08000e9e <LoopForever>:

LoopForever:
    b LoopForever
 8000e9e:	e7fe      	b.n	8000e9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eac:	08005be0 	.word	0x08005be0
  ldr r2, =_sbss
 8000eb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000eb4:	2000027c 	.word	0x2000027c

08000eb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC1_2_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_Init+0x3c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_Init+0x3c>)
 8000ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 f93e 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f000 f80f 	bl	8000efc <HAL_InitTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	e001      	b.n	8000eee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eea:	f7ff fe67 	bl	8000bbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eee:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40022000 	.word	0x40022000

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_InitTick+0x6c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d023      	beq.n	8000f58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_InitTick+0x70>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_InitTick+0x6c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f949 	bl	80011be <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10f      	bne.n	8000f52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d809      	bhi.n	8000f4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 f913 	bl	800116a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f44:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_InitTick+0x74>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e007      	b.n	8000f5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	e004      	b.n	8000f5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e001      	b.n	8000f5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000268 	.word	0x20000268

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000268 	.word	0x20000268

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff29 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff3e 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff31 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d008      	beq.n	8001200 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2204      	movs	r2, #4
 80011f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e022      	b.n	8001246 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 020e 	bic.w	r2, r2, #14
 800120e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0201 	bic.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	f003 021c 	and.w	r2, r3, #28
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	2101      	movs	r1, #1
 800122e:	fa01 f202 	lsl.w	r2, r1, r2
 8001232:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d005      	beq.n	8001276 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2204      	movs	r2, #4
 800126e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e029      	b.n	80012ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 020e 	bic.w	r2, r2, #14
 8001284:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0201 	bic.w	r2, r2, #1
 8001294:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f003 021c 	and.w	r2, r3, #28
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	2101      	movs	r1, #1
 80012a4:	fa01 f202 	lsl.w	r2, r1, r2
 80012a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	4798      	blx	r3
    }
  }
  return status;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	e17f      	b.n	80015e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8171 	beq.w	80015de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d005      	beq.n	8001314 <HAL_GPIO_Init+0x40>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d130      	bne.n	8001376 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800134a:	2201      	movs	r2, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 0201 	and.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b03      	cmp	r3, #3
 8001380:	d118      	bne.n	80013b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001388:	2201      	movs	r2, #1
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	f003 0201 	and.w	r2, r3, #1
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d017      	beq.n	80013f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d123      	bne.n	8001444 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	6939      	ldr	r1, [r7, #16]
 8001440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0203 	and.w	r2, r3, #3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80ac 	beq.w	80015de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b5f      	ldr	r3, [pc, #380]	; (8001604 <HAL_GPIO_Init+0x330>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148a:	4a5e      	ldr	r2, [pc, #376]	; (8001604 <HAL_GPIO_Init+0x330>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6613      	str	r3, [r2, #96]	; 0x60
 8001492:	4b5c      	ldr	r3, [pc, #368]	; (8001604 <HAL_GPIO_Init+0x330>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800149e:	4a5a      	ldr	r2, [pc, #360]	; (8001608 <HAL_GPIO_Init+0x334>)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014c8:	d025      	beq.n	8001516 <HAL_GPIO_Init+0x242>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4f      	ldr	r2, [pc, #316]	; (800160c <HAL_GPIO_Init+0x338>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d01f      	beq.n	8001512 <HAL_GPIO_Init+0x23e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4e      	ldr	r2, [pc, #312]	; (8001610 <HAL_GPIO_Init+0x33c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d019      	beq.n	800150e <HAL_GPIO_Init+0x23a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4d      	ldr	r2, [pc, #308]	; (8001614 <HAL_GPIO_Init+0x340>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0x236>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4c      	ldr	r2, [pc, #304]	; (8001618 <HAL_GPIO_Init+0x344>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00d      	beq.n	8001506 <HAL_GPIO_Init+0x232>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4b      	ldr	r2, [pc, #300]	; (800161c <HAL_GPIO_Init+0x348>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0x22e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4a      	ldr	r2, [pc, #296]	; (8001620 <HAL_GPIO_Init+0x34c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_GPIO_Init+0x22a>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e00c      	b.n	8001518 <HAL_GPIO_Init+0x244>
 80014fe:	2307      	movs	r3, #7
 8001500:	e00a      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001502:	2305      	movs	r3, #5
 8001504:	e008      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001506:	2304      	movs	r3, #4
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x244>
 800150a:	2303      	movs	r3, #3
 800150c:	e004      	b.n	8001518 <HAL_GPIO_Init+0x244>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x244>
 8001516:	2300      	movs	r3, #0
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4093      	lsls	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001528:	4937      	ldr	r1, [pc, #220]	; (8001608 <HAL_GPIO_Init+0x334>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <HAL_GPIO_Init+0x350>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800155a:	4a32      	ldr	r2, [pc, #200]	; (8001624 <HAL_GPIO_Init+0x350>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001560:	4b30      	ldr	r3, [pc, #192]	; (8001624 <HAL_GPIO_Init+0x350>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001584:	4a27      	ldr	r2, [pc, #156]	; (8001624 <HAL_GPIO_Init+0x350>)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <HAL_GPIO_Init+0x350>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ae:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <HAL_GPIO_Init+0x350>)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <HAL_GPIO_Init+0x350>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <HAL_GPIO_Init+0x350>)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f47f ae78 	bne.w	80012e4 <HAL_GPIO_Init+0x10>
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000
 800160c:	48000400 	.word	0x48000400
 8001610:	48000800 	.word	0x48000800
 8001614:	48000c00 	.word	0x48000c00
 8001618:	48001000 	.word	0x48001000
 800161c:	48001400 	.word	0x48001400
 8001620:	48001800 	.word	0x48001800
 8001624:	40010400 	.word	0x40010400

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001644:	e002      	b.n	800164c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43d9      	mvns	r1, r3
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	400b      	ands	r3, r1
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40007000 	.word	0x40007000

080016a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016b6:	d130      	bne.n	800171a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c4:	d038      	beq.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ce:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2232      	movs	r2, #50	; 0x32
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0c9b      	lsrs	r3, r3, #18
 80016e8:	3301      	adds	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ec:	e002      	b.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001700:	d102      	bne.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f2      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001714:	d110      	bne.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e00f      	b.n	800173a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001726:	d007      	beq.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001730:	4a05      	ldr	r2, [pc, #20]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001736:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40007000 	.word	0x40007000
 800174c:	20000000 	.word	0x20000000
 8001750:	431bde83 	.word	0x431bde83

08001754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e3ca      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001766:	4b97      	ldr	r3, [pc, #604]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001770:	4b94      	ldr	r3, [pc, #592]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 80e4 	beq.w	8001950 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <HAL_RCC_OscConfig+0x4a>
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2b0c      	cmp	r3, #12
 8001792:	f040 808b 	bne.w	80018ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b01      	cmp	r3, #1
 800179a:	f040 8087 	bne.w	80018ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179e:	4b89      	ldr	r3, [pc, #548]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <HAL_RCC_OscConfig+0x62>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e3a2      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1a      	ldr	r2, [r3, #32]
 80017ba:	4b82      	ldr	r3, [pc, #520]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d004      	beq.n	80017d0 <HAL_RCC_OscConfig+0x7c>
 80017c6:	4b7f      	ldr	r3, [pc, #508]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ce:	e005      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
 80017d0:	4b7c      	ldr	r3, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017dc:	4293      	cmp	r3, r2
 80017de:	d223      	bcs.n	8001828 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fd55 	bl	8002294 <RCC_SetFlashLatencyFromMSIRange>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e383      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f4:	4b73      	ldr	r3, [pc, #460]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a72      	ldr	r2, [pc, #456]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	496d      	ldr	r1, [pc, #436]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001812:	4b6c      	ldr	r3, [pc, #432]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	4968      	ldr	r1, [pc, #416]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
 8001826:	e025      	b.n	8001874 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001828:	4b66      	ldr	r3, [pc, #408]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a65      	ldr	r2, [pc, #404]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 800182e:	f043 0308 	orr.w	r3, r3, #8
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4960      	ldr	r1, [pc, #384]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001846:	4b5f      	ldr	r3, [pc, #380]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	495b      	ldr	r1, [pc, #364]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fd15 	bl	8002294 <RCC_SetFlashLatencyFromMSIRange>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e343      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001874:	f000 fc4a 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8001878:	4602      	mov	r2, r0
 800187a:	4b52      	ldr	r3, [pc, #328]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	4950      	ldr	r1, [pc, #320]	; (80019c8 <HAL_RCC_OscConfig+0x274>)
 8001886:	5ccb      	ldrb	r3, [r1, r3]
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	4a4e      	ldr	r2, [pc, #312]	; (80019cc <HAL_RCC_OscConfig+0x278>)
 8001892:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001894:	4b4e      	ldr	r3, [pc, #312]	; (80019d0 <HAL_RCC_OscConfig+0x27c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fb2f 	bl	8000efc <HAL_InitTick>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d052      	beq.n	800194e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	e327      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d032      	beq.n	800191a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b4:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a42      	ldr	r2, [pc, #264]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fb6c 	bl	8000f9c <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c8:	f7ff fb68 	bl	8000f9c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e310      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a36      	ldr	r2, [pc, #216]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4931      	ldr	r1, [pc, #196]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	492c      	ldr	r1, [pc, #176]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
 8001918:	e01a      	b.n	8001950 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a29      	ldr	r2, [pc, #164]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001926:	f7ff fb39 	bl	8000f9c <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800192e:	f7ff fb35 	bl	8000f9c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e2dd      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001940:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x1da>
 800194c:	e000      	b.n	8001950 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800194e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d074      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b08      	cmp	r3, #8
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x21a>
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b0c      	cmp	r3, #12
 8001966:	d10e      	bne.n	8001986 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d10b      	bne.n	8001986 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d064      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2f0>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d160      	bne.n	8001a44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e2ba      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x24a>
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e026      	b.n	80019ec <HAL_RCC_OscConfig+0x298>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a6:	d115      	bne.n	80019d4 <HAL_RCC_OscConfig+0x280>
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80019ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a02      	ldr	r2, [pc, #8]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80019ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	e014      	b.n	80019ec <HAL_RCC_OscConfig+0x298>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	08005a04 	.word	0x08005a04
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004
 80019d4:	4ba0      	ldr	r3, [pc, #640]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a9f      	ldr	r2, [pc, #636]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 80019da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b9d      	ldr	r3, [pc, #628]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a9c      	ldr	r2, [pc, #624]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 80019e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fad2 	bl	8000f9c <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff face 	bl	8000f9c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e276      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0e:	4b92      	ldr	r3, [pc, #584]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x2a8>
 8001a1a:	e014      	b.n	8001a46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fabe 	bl	8000f9c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff faba 	bl	8000f9c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e262      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a36:	4b88      	ldr	r3, [pc, #544]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x2d0>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d060      	beq.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_OscConfig+0x310>
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	d119      	bne.n	8001a92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d116      	bne.n	8001a92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a64:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_OscConfig+0x328>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e23f      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	4973      	ldr	r1, [pc, #460]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a90:	e040      	b.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d023      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9a:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6e      	ldr	r2, [pc, #440]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fa79 	bl	8000f9c <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aae:	f7ff fa75 	bl	8000f9c <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e21d      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac0:	4b65      	ldr	r3, [pc, #404]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001acc:	4b62      	ldr	r3, [pc, #392]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	495f      	ldr	r1, [pc, #380]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	e018      	b.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a5c      	ldr	r2, [pc, #368]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff fa55 	bl	8000f9c <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff fa51 	bl	8000f9c <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e1f9      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b08:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01c      	beq.n	8001b62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b28:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2e:	4a4a      	ldr	r2, [pc, #296]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff fa30 	bl	8000f9c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b40:	f7ff fa2c 	bl	8000f9c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e1d4      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ef      	beq.n	8001b40 <HAL_RCC_OscConfig+0x3ec>
 8001b60:	e01b      	b.n	8001b9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a3b      	ldr	r2, [pc, #236]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa13 	bl	8000f9c <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa0f 	bl	8000f9c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1b7      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ef      	bne.n	8001b7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80a6 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10d      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_RCC_OscConfig+0x508>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d118      	bne.n	8001c12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <HAL_RCC_OscConfig+0x508>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <HAL_RCC_OscConfig+0x508>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bec:	f7ff f9d6 	bl	8000f9c <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf4:	f7ff f9d2 	bl	8000f9c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e17a      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_RCC_OscConfig+0x508>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d108      	bne.n	8001c2c <HAL_RCC_OscConfig+0x4d8>
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2a:	e029      	b.n	8001c80 <HAL_RCC_OscConfig+0x52c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d115      	bne.n	8001c60 <HAL_RCC_OscConfig+0x50c>
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3a:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4a:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c54:	e014      	b.n	8001c80 <HAL_RCC_OscConfig+0x52c>
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	4b9c      	ldr	r3, [pc, #624]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	4a9b      	ldr	r2, [pc, #620]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c70:	4b98      	ldr	r3, [pc, #608]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c76:	4a97      	ldr	r2, [pc, #604]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001c78:	f023 0304 	bic.w	r3, r3, #4
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d016      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7ff f988 	bl	8000f9c <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7ff f984 	bl	8000f9c <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e12a      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca6:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ed      	beq.n	8001c90 <HAL_RCC_OscConfig+0x53c>
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f971 	bl	8000f9c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff f96d 	bl	8000f9c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e113      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd4:	4b7f      	ldr	r3, [pc, #508]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ed      	bne.n	8001cbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	4a79      	ldr	r2, [pc, #484]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80fe 	beq.w	8001efa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	f040 80d0 	bne.w	8001ea8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d08:	4b72      	ldr	r3, [pc, #456]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0203 	and.w	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d130      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	3b01      	subs	r3, #1
 8001d28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d127      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d11f      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d48:	2a07      	cmp	r2, #7
 8001d4a:	bf14      	ite	ne
 8001d4c:	2201      	movne	r2, #1
 8001d4e:	2200      	moveq	r2, #0
 8001d50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d113      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	3b01      	subs	r3, #1
 8001d64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d109      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	3b01      	subs	r3, #1
 8001d78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d06e      	beq.n	8001e5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d069      	beq.n	8001e58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d84:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0ad      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a4b      	ldr	r2, [pc, #300]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001daa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dac:	f7ff f8f6 	bl	8000f9c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff f8f2 	bl	8000f9c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e09a      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc6:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd2:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <HAL_RCC_OscConfig+0x784>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001de2:	3a01      	subs	r2, #1
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	4311      	orrs	r1, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dec:	0212      	lsls	r2, r2, #8
 8001dee:	4311      	orrs	r1, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001df4:	0852      	lsrs	r2, r2, #1
 8001df6:	3a01      	subs	r2, #1
 8001df8:	0552      	lsls	r2, r2, #21
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e00:	0852      	lsrs	r2, r2, #1
 8001e02:	3a01      	subs	r2, #1
 8001e04:	0652      	lsls	r2, r2, #25
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e0c:	0912      	lsrs	r2, r2, #4
 8001e0e:	0452      	lsls	r2, r2, #17
 8001e10:	430a      	orrs	r2, r1
 8001e12:	4930      	ldr	r1, [pc, #192]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e18:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2d      	ldr	r2, [pc, #180]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e30:	f7ff f8b4 	bl	8000f9c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff f8b0 	bl	8000f9c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e058      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e56:	e050      	b.n	8001efa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e04f      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d148      	bne.n	8001efa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a19      	ldr	r2, [pc, #100]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e80:	f7ff f88c 	bl	8000f9c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f888 	bl	8000f9c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e030      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x734>
 8001ea6:	e028      	b.n	8001efa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d023      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_RCC_OscConfig+0x780>)
 8001eb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7ff f86f 	bl	8000f9c <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec0:	e00c      	b.n	8001edc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff f86b 	bl	8000f9c <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d905      	bls.n	8001edc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e013      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_OscConfig+0x7b0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ec      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_RCC_OscConfig+0x7b0>)
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4905      	ldr	r1, [pc, #20]	; (8001f04 <HAL_RCC_OscConfig+0x7b0>)
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_OscConfig+0x7b4>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60cb      	str	r3, [r1, #12]
 8001ef4:	e001      	b.n	8001efa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	feeefffc 	.word	0xfeeefffc

08001f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0e7      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b75      	ldr	r3, [pc, #468]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b72      	ldr	r3, [pc, #456]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4970      	ldr	r1, [pc, #448]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b6e      	ldr	r3, [pc, #440]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0cf      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d010      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	4b66      	ldr	r3, [pc, #408]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d908      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4960      	ldr	r1, [pc, #384]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d04c      	beq.n	8002024 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d121      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0a6      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001faa:	4b54      	ldr	r3, [pc, #336]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d115      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e09a      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc2:	4b4e      	ldr	r3, [pc, #312]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e08e      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e086      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4943      	ldr	r1, [pc, #268]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff4:	f7fe ffd2 	bl	8000f9c <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7fe ffce 	bl	8000f9c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e06e      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d010      	beq.n	8002052 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800203c:	429a      	cmp	r2, r3
 800203e:	d208      	bcs.n	8002052 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	492b      	ldr	r1, [pc, #172]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002052:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d210      	bcs.n	8002082 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 0207 	bic.w	r2, r3, #7
 8002068:	4923      	ldr	r1, [pc, #140]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e036      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	4918      	ldr	r1, [pc, #96]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d009      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4910      	ldr	r1, [pc, #64]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020c0:	f000 f824 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	490b      	ldr	r1, [pc, #44]	; (8002100 <HAL_RCC_ClockConfig+0x1f4>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 80020de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1fc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe ff09 	bl	8000efc <HAL_InitTick>
 80020ea:	4603      	mov	r3, r0
 80020ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80020ee:	7afb      	ldrb	r3, [r7, #11]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40022000 	.word	0x40022000
 80020fc:	40021000 	.word	0x40021000
 8002100:	08005a04 	.word	0x08005a04
 8002104:	20000000 	.word	0x20000000
 8002108:	20000004 	.word	0x20000004

0800210c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211a:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002124:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x34>
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d121      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d11e      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002140:	4b34      	ldr	r3, [pc, #208]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d107      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800214c:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e005      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002168:	4a2b      	ldr	r2, [pc, #172]	; (8002218 <HAL_RCC_GetSysClockFreq+0x10c>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10d      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b04      	cmp	r3, #4
 8002182:	d102      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <HAL_RCC_GetSysClockFreq+0x110>)
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	e004      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d101      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_RCC_GetSysClockFreq+0x114>)
 8002192:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d134      	bne.n	8002204 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d003      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0xac>
 80021b0:	e005      	b.n	80021be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_RCC_GetSysClockFreq+0x110>)
 80021b4:	617b      	str	r3, [r7, #20]
      break;
 80021b6:	e005      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ba:	617b      	str	r3, [r7, #20]
      break;
 80021bc:	e002      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	617b      	str	r3, [r7, #20]
      break;
 80021c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	3301      	adds	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	fb03 f202 	mul.w	r2, r3, r2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	0e5b      	lsrs	r3, r3, #25
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	3301      	adds	r3, #1
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002204:	69bb      	ldr	r3, [r7, #24]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	08005a1c 	.word	0x08005a1c
 800221c:	00f42400 	.word	0x00f42400
 8002220:	007a1200 	.word	0x007a1200

08002224 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_RCC_GetHCLKFreq+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002240:	f7ff fff0 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4904      	ldr	r1, [pc, #16]	; (8002264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	08005a14 	.word	0x08005a14

08002268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800226c:	f7ff ffda 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	0adb      	lsrs	r3, r3, #11
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4904      	ldr	r1, [pc, #16]	; (8002290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	08005a14 	.word	0x08005a14

08002294 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022ac:	f7ff f9ee 	bl	800168c <HAL_PWREx_GetVoltageRange>
 80022b0:	6178      	str	r0, [r7, #20]
 80022b2:	e014      	b.n	80022de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022be:	6593      	str	r3, [r2, #88]	; 0x58
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022cc:	f7ff f9de 	bl	800168c <HAL_PWREx_GetVoltageRange>
 80022d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	4a1d      	ldr	r2, [pc, #116]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e4:	d10b      	bne.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d919      	bls.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2ba0      	cmp	r3, #160	; 0xa0
 80022f0:	d902      	bls.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022f2:	2302      	movs	r3, #2
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	e013      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	e010      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	d902      	bls.n	800230a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002304:	2303      	movs	r3, #3
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e00a      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d102      	bne.n	8002316 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002310:	2302      	movs	r3, #2
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	e004      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b70      	cmp	r3, #112	; 0x70
 800231a:	d101      	bne.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800231c:	2301      	movs	r3, #1
 800231e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 0207 	bic.w	r2, r3, #7
 8002328:	4909      	ldr	r1, [pc, #36]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	429a      	cmp	r2, r3
 800233c:	d001      	beq.n	8002342 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	40022000 	.word	0x40022000

08002354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800235c:	2300      	movs	r3, #0
 800235e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002360:	2300      	movs	r3, #0
 8002362:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236c:	2b00      	cmp	r3, #0
 800236e:	d041      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002374:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002378:	d02a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800237a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800237e:	d824      	bhi.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002380:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002384:	d008      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002386:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800238a:	d81e      	bhi.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002394:	d010      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002396:	e018      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002398:	4b86      	ldr	r3, [pc, #536]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a85      	ldr	r2, [pc, #532]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a4:	e015      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fabb 	bl	8002928 <RCCEx_PLLSAI1_Config>
 80023b2:	4603      	mov	r3, r0
 80023b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b6:	e00c      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3320      	adds	r3, #32
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fba6 	bl	8002b10 <RCCEx_PLLSAI2_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023c8:	e003      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	74fb      	strb	r3, [r7, #19]
      break;
 80023ce:	e000      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023d8:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e6:	4973      	ldr	r1, [pc, #460]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ee:	e001      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d041      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002404:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002408:	d02a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800240a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800240e:	d824      	bhi.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800241a:	d81e      	bhi.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002424:	d010      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002426:	e018      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002428:	4b62      	ldr	r3, [pc, #392]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a61      	ldr	r2, [pc, #388]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002432:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002434:	e015      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fa73 	bl	8002928 <RCCEx_PLLSAI1_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002446:	e00c      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3320      	adds	r3, #32
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fb5e 	bl	8002b10 <RCCEx_PLLSAI2_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002458:	e003      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	74fb      	strb	r3, [r7, #19]
      break;
 800245e:	e000      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002468:	4b52      	ldr	r3, [pc, #328]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002476:	494f      	ldr	r1, [pc, #316]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800247e:	e001      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80a0 	beq.w	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024a6:	2300      	movs	r3, #0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	4a40      	ldr	r2, [pc, #256]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b6:	6593      	str	r3, [r2, #88]	; 0x58
 80024b8:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c4:	2301      	movs	r3, #1
 80024c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c8:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a3a      	ldr	r2, [pc, #232]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d4:	f7fe fd62 	bl	8000f9c <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024da:	e009      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024dc:	f7fe fd5e 	bl	8000f9c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d902      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	74fb      	strb	r3, [r7, #19]
        break;
 80024ee:	e005      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024f0:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ef      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d15c      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002502:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01f      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	d019      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d016      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7fe fd1d 	bl	8000f9c <HAL_GetTick>
 8002562:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002564:	e00b      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fd19 	bl	8000f9c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d902      	bls.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	74fb      	strb	r3, [r7, #19]
            break;
 800257c:	e006      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ec      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10c      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a2:	4904      	ldr	r1, [pc, #16]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025aa:	e009      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
 80025b0:	e006      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c0:	7c7b      	ldrb	r3, [r7, #17]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d105      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c6:	4b9e      	ldr	r3, [pc, #632]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ca:	4a9d      	ldr	r2, [pc, #628]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025de:	4b98      	ldr	r3, [pc, #608]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e4:	f023 0203 	bic.w	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ec:	4994      	ldr	r1, [pc, #592]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002600:	4b8f      	ldr	r3, [pc, #572]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f023 020c 	bic.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260e:	498c      	ldr	r1, [pc, #560]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002622:	4b87      	ldr	r3, [pc, #540]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002628:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4983      	ldr	r1, [pc, #524]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002644:	4b7e      	ldr	r3, [pc, #504]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	497b      	ldr	r1, [pc, #492]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002666:	4b76      	ldr	r3, [pc, #472]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002674:	4972      	ldr	r1, [pc, #456]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002688:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	496a      	ldr	r1, [pc, #424]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026aa:	4b65      	ldr	r3, [pc, #404]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b8:	4961      	ldr	r1, [pc, #388]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026cc:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	4959      	ldr	r1, [pc, #356]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ee:	4b54      	ldr	r3, [pc, #336]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fc:	4950      	ldr	r1, [pc, #320]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002710:	4b4b      	ldr	r3, [pc, #300]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	4948      	ldr	r1, [pc, #288]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002732:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	493f      	ldr	r1, [pc, #252]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d028      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002754:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002762:	4937      	ldr	r1, [pc, #220]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800276e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002772:	d106      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002774:	4b32      	ldr	r3, [pc, #200]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a31      	ldr	r2, [pc, #196]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800277e:	60d3      	str	r3, [r2, #12]
 8002780:	e011      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002786:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800278a:	d10c      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	2101      	movs	r1, #1
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f8c8 	bl	8002928 <RCCEx_PLLSAI1_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
 80027a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d028      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	491f      	ldr	r1, [pc, #124]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027d0:	d106      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027dc:	60d3      	str	r3, [r2, #12]
 80027de:	e011      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3304      	adds	r3, #4
 80027ee:	2101      	movs	r1, #1
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f899 	bl	8002928 <RCCEx_PLLSAI1_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d02b      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281e:	4908      	ldr	r1, [pc, #32]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800282e:	d109      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a02      	ldr	r2, [pc, #8]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
 800283c:	e014      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800284c:	d10c      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f000 f867 	bl	8002928 <RCCEx_PLLSAI1_Config>
 800285a:	4603      	mov	r3, r0
 800285c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d02f      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002882:	4928      	ldr	r1, [pc, #160]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002892:	d10d      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	2102      	movs	r1, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f844 	bl	8002928 <RCCEx_PLLSAI1_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d014      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	74bb      	strb	r3, [r7, #18]
 80028ae:	e011      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3320      	adds	r3, #32
 80028be:	2102      	movs	r1, #2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f925 	bl	8002b10 <RCCEx_PLLSAI2_Config>
 80028c6:	4603      	mov	r3, r0
 80028c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ca:	7cfb      	ldrb	r3, [r7, #19]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ee:	490d      	ldr	r1, [pc, #52]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002912:	4904      	ldr	r1, [pc, #16]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800291a:	7cbb      	ldrb	r3, [r7, #18]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000

08002928 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002936:	4b75      	ldr	r3, [pc, #468]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d018      	beq.n	8002974 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002942:	4b72      	ldr	r3, [pc, #456]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0203 	and.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d10d      	bne.n	800296e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
       ||
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800295a:	4b6c      	ldr	r3, [pc, #432]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
       ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d047      	beq.n	80029fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e044      	b.n	80029fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d018      	beq.n	80029ae <RCCEx_PLLSAI1_Config+0x86>
 800297c:	2b03      	cmp	r3, #3
 800297e:	d825      	bhi.n	80029cc <RCCEx_PLLSAI1_Config+0xa4>
 8002980:	2b01      	cmp	r3, #1
 8002982:	d002      	beq.n	800298a <RCCEx_PLLSAI1_Config+0x62>
 8002984:	2b02      	cmp	r3, #2
 8002986:	d009      	beq.n	800299c <RCCEx_PLLSAI1_Config+0x74>
 8002988:	e020      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800298a:	4b60      	ldr	r3, [pc, #384]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11d      	bne.n	80029d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299a:	e01a      	b.n	80029d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800299c:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d116      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ac:	e013      	b.n	80029d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ae:	4b57      	ldr	r3, [pc, #348]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ba:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ca:	e006      	b.n	80029da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      break;
 80029d0:	e004      	b.n	80029dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029d2:	bf00      	nop
 80029d4:	e002      	b.n	80029dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029d6:	bf00      	nop
 80029d8:	e000      	b.n	80029dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029da:	bf00      	nop
    }

    if(status == HAL_OK)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10d      	bne.n	80029fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029e2:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	430b      	orrs	r3, r1
 80029f8:	4944      	ldr	r1, [pc, #272]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d17d      	bne.n	8002b00 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a04:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a40      	ldr	r2, [pc, #256]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a10:	f7fe fac4 	bl	8000f9c <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a16:	e009      	b.n	8002a2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a18:	f7fe fac0 	bl	8000f9c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d902      	bls.n	8002a2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	73fb      	strb	r3, [r7, #15]
        break;
 8002a2a:	e005      	b.n	8002a38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a2c:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ef      	bne.n	8002a18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d160      	bne.n	8002b00 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a44:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6892      	ldr	r2, [r2, #8]
 8002a54:	0211      	lsls	r1, r2, #8
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68d2      	ldr	r2, [r2, #12]
 8002a5a:	0912      	lsrs	r2, r2, #4
 8002a5c:	0452      	lsls	r2, r2, #17
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	492a      	ldr	r1, [pc, #168]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	610b      	str	r3, [r1, #16]
 8002a66:	e027      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d112      	bne.n	8002a94 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a6e:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6892      	ldr	r2, [r2, #8]
 8002a7e:	0211      	lsls	r1, r2, #8
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6912      	ldr	r2, [r2, #16]
 8002a84:	0852      	lsrs	r2, r2, #1
 8002a86:	3a01      	subs	r2, #1
 8002a88:	0552      	lsls	r2, r2, #21
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	491f      	ldr	r1, [pc, #124]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	610b      	str	r3, [r1, #16]
 8002a92:	e011      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6892      	ldr	r2, [r2, #8]
 8002aa4:	0211      	lsls	r1, r2, #8
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6952      	ldr	r2, [r2, #20]
 8002aaa:	0852      	lsrs	r2, r2, #1
 8002aac:	3a01      	subs	r2, #1
 8002aae:	0652      	lsls	r2, r2, #25
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	4916      	ldr	r1, [pc, #88]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fa6a 	bl	8000f9c <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aca:	e009      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002acc:	f7fe fa66 	bl	8000f9c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d902      	bls.n	8002ae0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ade:	e005      	b.n	8002aec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ef      	beq.n	8002acc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	4904      	ldr	r1, [pc, #16]	; (8002b0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000

08002b10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b1e:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d018      	beq.n	8002b5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b2a:	4b67      	ldr	r3, [pc, #412]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0203 	and.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d10d      	bne.n	8002b56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b42:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
       ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d047      	beq.n	8002be6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	e044      	b.n	8002be6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d018      	beq.n	8002b96 <RCCEx_PLLSAI2_Config+0x86>
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d825      	bhi.n	8002bb4 <RCCEx_PLLSAI2_Config+0xa4>
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d002      	beq.n	8002b72 <RCCEx_PLLSAI2_Config+0x62>
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d009      	beq.n	8002b84 <RCCEx_PLLSAI2_Config+0x74>
 8002b70:	e020      	b.n	8002bb4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b72:	4b55      	ldr	r3, [pc, #340]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d11d      	bne.n	8002bba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b82:	e01a      	b.n	8002bba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d116      	bne.n	8002bbe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b94:	e013      	b.n	8002bbe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b96:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ba2:	4b49      	ldr	r3, [pc, #292]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bb2:	e006      	b.n	8002bc2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb8:	e004      	b.n	8002bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bba:	bf00      	nop
 8002bbc:	e002      	b.n	8002bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	430b      	orrs	r3, r1
 8002be0:	4939      	ldr	r1, [pc, #228]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d167      	bne.n	8002cbc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bec:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a35      	ldr	r2, [pc, #212]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf8:	f7fe f9d0 	bl	8000f9c <HAL_GetTick>
 8002bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bfe:	e009      	b.n	8002c14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c00:	f7fe f9cc 	bl	8000f9c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d902      	bls.n	8002c14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	73fb      	strb	r3, [r7, #15]
        break;
 8002c12:	e005      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c14:	4b2c      	ldr	r3, [pc, #176]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ef      	bne.n	8002c00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d14a      	bne.n	8002cbc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d111      	bne.n	8002c50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c2c:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6892      	ldr	r2, [r2, #8]
 8002c3c:	0211      	lsls	r1, r2, #8
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68d2      	ldr	r2, [r2, #12]
 8002c42:	0912      	lsrs	r2, r2, #4
 8002c44:	0452      	lsls	r2, r2, #17
 8002c46:	430a      	orrs	r2, r1
 8002c48:	491f      	ldr	r1, [pc, #124]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	614b      	str	r3, [r1, #20]
 8002c4e:	e011      	b.n	8002c74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c50:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6892      	ldr	r2, [r2, #8]
 8002c60:	0211      	lsls	r1, r2, #8
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6912      	ldr	r2, [r2, #16]
 8002c66:	0852      	lsrs	r2, r2, #1
 8002c68:	3a01      	subs	r2, #1
 8002c6a:	0652      	lsls	r2, r2, #25
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c80:	f7fe f98c 	bl	8000f9c <HAL_GetTick>
 8002c84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c86:	e009      	b.n	8002c9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c88:	f7fe f988 	bl	8000f9c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d902      	bls.n	8002c9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	73fb      	strb	r3, [r7, #15]
          break;
 8002c9a:	e005      	b.n	8002ca8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ef      	beq.n	8002c88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	4904      	ldr	r1, [pc, #16]	; (8002cc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000

08002ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e040      	b.n	8002d60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fd ff88 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0201 	bic.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fbe8 	bl	80034e0 <UART_SetConfig>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e022      	b.n	8002d60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fe94 	bl	8003a50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 ff1b 	bl	8003b94 <UART_CheckIdleState>
 8002d5e:	4603      	mov	r3, r0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b08b      	sub	sp, #44	; 0x2c
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d156      	bne.n	8002e2c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_UART_Transmit_IT+0x22>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e04f      	b.n	8002e2e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_UART_Transmit_IT+0x34>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e048      	b.n	8002e2e <HAL_UART_Transmit_IT+0xc6>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	88fa      	ldrh	r2, [r7, #6]
 8002db6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2221      	movs	r2, #33	; 0x21
 8002dcc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd6:	d107      	bne.n	8002de8 <HAL_UART_Transmit_IT+0x80>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <HAL_UART_Transmit_IT+0xd4>)
 8002de4:	669a      	str	r2, [r3, #104]	; 0x68
 8002de6:	e002      	b.n	8002dee <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <HAL_UART_Transmit_IT+0xd8>)
 8002dec:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	e853 3f00 	ldrex	r3, [r3]
 8002e02:	613b      	str	r3, [r7, #16]
   return(result);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	623b      	str	r3, [r7, #32]
 8002e16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	69f9      	ldr	r1, [r7, #28]
 8002e1a:	6a3a      	ldr	r2, [r7, #32]
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e6      	bne.n	8002df6 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	372c      	adds	r7, #44	; 0x2c
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	080040ef 	.word	0x080040ef
 8002e40:	08004037 	.word	0x08004037

08002e44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d142      	bne.n	8002ee0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_UART_Receive_IT+0x22>
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e03b      	b.n	8002ee2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_UART_Receive_IT+0x34>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e034      	b.n	8002ee2 <HAL_UART_Receive_IT+0x9e>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_UART_Receive_IT+0xa8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d01f      	beq.n	8002ed0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d018      	beq.n	8002ed0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	e853 3f00 	ldrex	r3, [r3]
 8002eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	69f9      	ldr	r1, [r7, #28]
 8002ec2:	6a3a      	ldr	r2, [r7, #32]
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e6      	bne.n	8002e9e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 ff6a 	bl	8003db0 <UART_Start_Receive_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	e000      	b.n	8002ee2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3728      	adds	r7, #40	; 0x28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40008000 	.word	0x40008000

08002ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b0ba      	sub	sp, #232	; 0xe8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f1e:	4013      	ands	r3, r2
 8002f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d115      	bne.n	8002f58 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00f      	beq.n	8002f58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 82a6 	beq.w	800349a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
      }
      return;
 8002f56:	e2a0      	b.n	800349a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8117 	beq.w	8003190 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f72:	4b85      	ldr	r3, [pc, #532]	; (8003188 <HAL_UART_IRQHandler+0x298>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 810a 	beq.w	8003190 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d011      	beq.n	8002fac <HAL_UART_IRQHandler+0xbc>
 8002f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d011      	beq.n	8002fdc <HAL_UART_IRQHandler+0xec>
 8002fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00b      	beq.n	8002fdc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd2:	f043 0204 	orr.w	r2, r3, #4
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d011      	beq.n	800300c <HAL_UART_IRQHandler+0x11c>
 8002fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003002:	f043 0202 	orr.w	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800300c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003028:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00b      	beq.n	8003048 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2208      	movs	r2, #8
 8003036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800303e:	f043 0208 	orr.w	r2, r3, #8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003050:	2b00      	cmp	r3, #0
 8003052:	d012      	beq.n	800307a <HAL_UART_IRQHandler+0x18a>
 8003054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003058:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00c      	beq.n	800307a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 820c 	beq.w	800349e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d005      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d04f      	beq.n	8003172 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 ff36 	bl	8003f44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d141      	bne.n	800316a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3308      	adds	r3, #8
 80030ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3308      	adds	r3, #8
 800310e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800311e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800312a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1d9      	bne.n	80030e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	2b00      	cmp	r3, #0
 8003138:	d013      	beq.n	8003162 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	4a13      	ldr	r2, [pc, #76]	; (800318c <HAL_UART_IRQHandler+0x29c>)
 8003140:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe f883 	bl	8001252 <HAL_DMA_Abort_IT>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d017      	beq.n	8003182 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800315c:	4610      	mov	r0, r2
 800315e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	e00f      	b.n	8003182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f9a6 	bl	80034b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e00b      	b.n	8003182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f9a2 	bl	80034b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	e007      	b.n	8003182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f99e 	bl	80034b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003180:	e18d      	b.n	800349e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003182:	bf00      	nop
    return;
 8003184:	e18b      	b.n	800349e <HAL_UART_IRQHandler+0x5ae>
 8003186:	bf00      	nop
 8003188:	04000120 	.word	0x04000120
 800318c:	0800400b 	.word	0x0800400b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 8146 	bne.w	8003426 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800319a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 813f 	beq.w	8003426 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8138 	beq.w	8003426 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2210      	movs	r2, #16
 80031bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	f040 80b4 	bne.w	8003336 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 815f 	beq.w	80034a2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ee:	429a      	cmp	r2, r3
 80031f0:	f080 8157 	bcs.w	80034a2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 8085 	bne.w	800331a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800322c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800323a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800323e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003246:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1da      	bne.n	8003210 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3308      	adds	r3, #8
 8003260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800326a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3308      	adds	r3, #8
 800327a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800327e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003282:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e1      	bne.n	800325a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3308      	adds	r3, #8
 800329c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a0:	e853 3f00 	ldrex	r3, [r3]
 80032a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3308      	adds	r3, #8
 80032b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e3      	bne.n	8003296 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e2:	e853 3f00 	ldrex	r3, [r3]
 80032e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ea:	f023 0310 	bic.w	r3, r3, #16
 80032ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80032fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003302:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003304:	e841 2300 	strex	r3, r2, [r1]
 8003308:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800330a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e4      	bne.n	80032da <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd ff5e 	bl	80011d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003326:	b29b      	uxth	r3, r3
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	b29b      	uxth	r3, r3
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f8ca 	bl	80034c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003334:	e0b5      	b.n	80034a2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003342:	b29b      	uxth	r3, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80a7 	beq.w	80034a6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80a2 	beq.w	80034a6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003384:	647b      	str	r3, [r7, #68]	; 0x44
 8003386:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800338a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800338c:	e841 2300 	strex	r3, r2, [r1]
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e4      	bne.n	8003362 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3308      	adds	r3, #8
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	623b      	str	r3, [r7, #32]
   return(result);
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3308      	adds	r3, #8
 80033b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033bc:	633a      	str	r2, [r7, #48]	; 0x30
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e3      	bne.n	8003398 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0310 	bic.w	r3, r3, #16
 80033f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003408:	69b9      	ldr	r1, [r7, #24]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	e841 2300 	strex	r3, r2, [r1]
 8003410:	617b      	str	r3, [r7, #20]
   return(result);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e4      	bne.n	80033e2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800341c:	4619      	mov	r1, r3
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f852 	bl	80034c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003424:	e03f      	b.n	80034a6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00e      	beq.n	8003450 <HAL_UART_IRQHandler+0x560>
 8003432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003446:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f001 f83a 	bl	80044c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800344e:	e02d      	b.n	80034ac <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00e      	beq.n	800347a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800345c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01c      	beq.n	80034aa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
    }
    return;
 8003478:	e017      	b.n	80034aa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d012      	beq.n	80034ac <HAL_UART_IRQHandler+0x5bc>
 8003486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00c      	beq.n	80034ac <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fe8b 	bl	80041ae <UART_EndTransmit_IT>
    return;
 8003498:	e008      	b.n	80034ac <HAL_UART_IRQHandler+0x5bc>
      return;
 800349a:	bf00      	nop
 800349c:	e006      	b.n	80034ac <HAL_UART_IRQHandler+0x5bc>
    return;
 800349e:	bf00      	nop
 80034a0:	e004      	b.n	80034ac <HAL_UART_IRQHandler+0x5bc>
      return;
 80034a2:	bf00      	nop
 80034a4:	e002      	b.n	80034ac <HAL_UART_IRQHandler+0x5bc>
      return;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <HAL_UART_IRQHandler+0x5bc>
    return;
 80034aa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80034ac:	37e8      	adds	r7, #232	; 0xe8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop

080034b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b08a      	sub	sp, #40	; 0x28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	431a      	orrs	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	4313      	orrs	r3, r2
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4ba4      	ldr	r3, [pc, #656]	; (80037a0 <UART_SetConfig+0x2c0>)
 8003510:	4013      	ands	r3, r2
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003518:	430b      	orrs	r3, r1
 800351a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a99      	ldr	r2, [pc, #612]	; (80037a4 <UART_SetConfig+0x2c4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	4313      	orrs	r3, r2
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355c:	430a      	orrs	r2, r1
 800355e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a90      	ldr	r2, [pc, #576]	; (80037a8 <UART_SetConfig+0x2c8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d126      	bne.n	80035b8 <UART_SetConfig+0xd8>
 800356a:	4b90      	ldr	r3, [pc, #576]	; (80037ac <UART_SetConfig+0x2cc>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b03      	cmp	r3, #3
 8003576:	d81b      	bhi.n	80035b0 <UART_SetConfig+0xd0>
 8003578:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <UART_SetConfig+0xa0>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	08003591 	.word	0x08003591
 8003584:	080035a1 	.word	0x080035a1
 8003588:	08003599 	.word	0x08003599
 800358c:	080035a9 	.word	0x080035a9
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003596:	e116      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003598:	2302      	movs	r3, #2
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359e:	e112      	b.n	80037c6 <UART_SetConfig+0x2e6>
 80035a0:	2304      	movs	r3, #4
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a6:	e10e      	b.n	80037c6 <UART_SetConfig+0x2e6>
 80035a8:	2308      	movs	r3, #8
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ae:	e10a      	b.n	80037c6 <UART_SetConfig+0x2e6>
 80035b0:	2310      	movs	r3, #16
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b6:	e106      	b.n	80037c6 <UART_SetConfig+0x2e6>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a7c      	ldr	r2, [pc, #496]	; (80037b0 <UART_SetConfig+0x2d0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d138      	bne.n	8003634 <UART_SetConfig+0x154>
 80035c2:	4b7a      	ldr	r3, [pc, #488]	; (80037ac <UART_SetConfig+0x2cc>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	d82d      	bhi.n	800362c <UART_SetConfig+0x14c>
 80035d0:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <UART_SetConfig+0xf8>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	0800360d 	.word	0x0800360d
 80035dc:	0800362d 	.word	0x0800362d
 80035e0:	0800362d 	.word	0x0800362d
 80035e4:	0800362d 	.word	0x0800362d
 80035e8:	0800361d 	.word	0x0800361d
 80035ec:	0800362d 	.word	0x0800362d
 80035f0:	0800362d 	.word	0x0800362d
 80035f4:	0800362d 	.word	0x0800362d
 80035f8:	08003615 	.word	0x08003615
 80035fc:	0800362d 	.word	0x0800362d
 8003600:	0800362d 	.word	0x0800362d
 8003604:	0800362d 	.word	0x0800362d
 8003608:	08003625 	.word	0x08003625
 800360c:	2300      	movs	r3, #0
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003612:	e0d8      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003614:	2302      	movs	r3, #2
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361a:	e0d4      	b.n	80037c6 <UART_SetConfig+0x2e6>
 800361c:	2304      	movs	r3, #4
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003622:	e0d0      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003624:	2308      	movs	r3, #8
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	e0cc      	b.n	80037c6 <UART_SetConfig+0x2e6>
 800362c:	2310      	movs	r3, #16
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003632:	e0c8      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a5e      	ldr	r2, [pc, #376]	; (80037b4 <UART_SetConfig+0x2d4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d125      	bne.n	800368a <UART_SetConfig+0x1aa>
 800363e:	4b5b      	ldr	r3, [pc, #364]	; (80037ac <UART_SetConfig+0x2cc>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003648:	2b30      	cmp	r3, #48	; 0x30
 800364a:	d016      	beq.n	800367a <UART_SetConfig+0x19a>
 800364c:	2b30      	cmp	r3, #48	; 0x30
 800364e:	d818      	bhi.n	8003682 <UART_SetConfig+0x1a2>
 8003650:	2b20      	cmp	r3, #32
 8003652:	d00a      	beq.n	800366a <UART_SetConfig+0x18a>
 8003654:	2b20      	cmp	r3, #32
 8003656:	d814      	bhi.n	8003682 <UART_SetConfig+0x1a2>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <UART_SetConfig+0x182>
 800365c:	2b10      	cmp	r3, #16
 800365e:	d008      	beq.n	8003672 <UART_SetConfig+0x192>
 8003660:	e00f      	b.n	8003682 <UART_SetConfig+0x1a2>
 8003662:	2300      	movs	r3, #0
 8003664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003668:	e0ad      	b.n	80037c6 <UART_SetConfig+0x2e6>
 800366a:	2302      	movs	r3, #2
 800366c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003670:	e0a9      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003672:	2304      	movs	r3, #4
 8003674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003678:	e0a5      	b.n	80037c6 <UART_SetConfig+0x2e6>
 800367a:	2308      	movs	r3, #8
 800367c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003680:	e0a1      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003682:	2310      	movs	r3, #16
 8003684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003688:	e09d      	b.n	80037c6 <UART_SetConfig+0x2e6>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a4a      	ldr	r2, [pc, #296]	; (80037b8 <UART_SetConfig+0x2d8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d125      	bne.n	80036e0 <UART_SetConfig+0x200>
 8003694:	4b45      	ldr	r3, [pc, #276]	; (80037ac <UART_SetConfig+0x2cc>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800369e:	2bc0      	cmp	r3, #192	; 0xc0
 80036a0:	d016      	beq.n	80036d0 <UART_SetConfig+0x1f0>
 80036a2:	2bc0      	cmp	r3, #192	; 0xc0
 80036a4:	d818      	bhi.n	80036d8 <UART_SetConfig+0x1f8>
 80036a6:	2b80      	cmp	r3, #128	; 0x80
 80036a8:	d00a      	beq.n	80036c0 <UART_SetConfig+0x1e0>
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d814      	bhi.n	80036d8 <UART_SetConfig+0x1f8>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <UART_SetConfig+0x1d8>
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d008      	beq.n	80036c8 <UART_SetConfig+0x1e8>
 80036b6:	e00f      	b.n	80036d8 <UART_SetConfig+0x1f8>
 80036b8:	2300      	movs	r3, #0
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036be:	e082      	b.n	80037c6 <UART_SetConfig+0x2e6>
 80036c0:	2302      	movs	r3, #2
 80036c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c6:	e07e      	b.n	80037c6 <UART_SetConfig+0x2e6>
 80036c8:	2304      	movs	r3, #4
 80036ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ce:	e07a      	b.n	80037c6 <UART_SetConfig+0x2e6>
 80036d0:	2308      	movs	r3, #8
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d6:	e076      	b.n	80037c6 <UART_SetConfig+0x2e6>
 80036d8:	2310      	movs	r3, #16
 80036da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036de:	e072      	b.n	80037c6 <UART_SetConfig+0x2e6>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a35      	ldr	r2, [pc, #212]	; (80037bc <UART_SetConfig+0x2dc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d12a      	bne.n	8003740 <UART_SetConfig+0x260>
 80036ea:	4b30      	ldr	r3, [pc, #192]	; (80037ac <UART_SetConfig+0x2cc>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f8:	d01a      	beq.n	8003730 <UART_SetConfig+0x250>
 80036fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fe:	d81b      	bhi.n	8003738 <UART_SetConfig+0x258>
 8003700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003704:	d00c      	beq.n	8003720 <UART_SetConfig+0x240>
 8003706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370a:	d815      	bhi.n	8003738 <UART_SetConfig+0x258>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <UART_SetConfig+0x238>
 8003710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003714:	d008      	beq.n	8003728 <UART_SetConfig+0x248>
 8003716:	e00f      	b.n	8003738 <UART_SetConfig+0x258>
 8003718:	2300      	movs	r3, #0
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371e:	e052      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003720:	2302      	movs	r3, #2
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003726:	e04e      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003728:	2304      	movs	r3, #4
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372e:	e04a      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003730:	2308      	movs	r3, #8
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003736:	e046      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003738:	2310      	movs	r3, #16
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373e:	e042      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <UART_SetConfig+0x2c4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d13a      	bne.n	80037c0 <UART_SetConfig+0x2e0>
 800374a:	4b18      	ldr	r3, [pc, #96]	; (80037ac <UART_SetConfig+0x2cc>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003754:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003758:	d01a      	beq.n	8003790 <UART_SetConfig+0x2b0>
 800375a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800375e:	d81b      	bhi.n	8003798 <UART_SetConfig+0x2b8>
 8003760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003764:	d00c      	beq.n	8003780 <UART_SetConfig+0x2a0>
 8003766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376a:	d815      	bhi.n	8003798 <UART_SetConfig+0x2b8>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <UART_SetConfig+0x298>
 8003770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003774:	d008      	beq.n	8003788 <UART_SetConfig+0x2a8>
 8003776:	e00f      	b.n	8003798 <UART_SetConfig+0x2b8>
 8003778:	2300      	movs	r3, #0
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377e:	e022      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003780:	2302      	movs	r3, #2
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e01e      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003788:	2304      	movs	r3, #4
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e01a      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003790:	2308      	movs	r3, #8
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003796:	e016      	b.n	80037c6 <UART_SetConfig+0x2e6>
 8003798:	2310      	movs	r3, #16
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379e:	e012      	b.n	80037c6 <UART_SetConfig+0x2e6>
 80037a0:	efff69f3 	.word	0xefff69f3
 80037a4:	40008000 	.word	0x40008000
 80037a8:	40013800 	.word	0x40013800
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40004400 	.word	0x40004400
 80037b4:	40004800 	.word	0x40004800
 80037b8:	40004c00 	.word	0x40004c00
 80037bc:	40005000 	.word	0x40005000
 80037c0:	2310      	movs	r3, #16
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a9f      	ldr	r2, [pc, #636]	; (8003a48 <UART_SetConfig+0x568>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d17a      	bne.n	80038c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d824      	bhi.n	8003822 <UART_SetConfig+0x342>
 80037d8:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <UART_SetConfig+0x300>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	08003805 	.word	0x08003805
 80037e4:	08003823 	.word	0x08003823
 80037e8:	0800380d 	.word	0x0800380d
 80037ec:	08003823 	.word	0x08003823
 80037f0:	08003813 	.word	0x08003813
 80037f4:	08003823 	.word	0x08003823
 80037f8:	08003823 	.word	0x08003823
 80037fc:	08003823 	.word	0x08003823
 8003800:	0800381b 	.word	0x0800381b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003804:	f7fe fd1a 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003808:	61f8      	str	r0, [r7, #28]
        break;
 800380a:	e010      	b.n	800382e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800380c:	4b8f      	ldr	r3, [pc, #572]	; (8003a4c <UART_SetConfig+0x56c>)
 800380e:	61fb      	str	r3, [r7, #28]
        break;
 8003810:	e00d      	b.n	800382e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003812:	f7fe fc7b 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8003816:	61f8      	str	r0, [r7, #28]
        break;
 8003818:	e009      	b.n	800382e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381e:	61fb      	str	r3, [r7, #28]
        break;
 8003820:	e005      	b.n	800382e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800382c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80fb 	beq.w	8003a2c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	429a      	cmp	r2, r3
 8003844:	d305      	bcc.n	8003852 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	429a      	cmp	r2, r3
 8003850:	d903      	bls.n	800385a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003858:	e0e8      	b.n	8003a2c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2200      	movs	r2, #0
 800385e:	461c      	mov	r4, r3
 8003860:	4615      	mov	r5, r2
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	022b      	lsls	r3, r5, #8
 800386c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003870:	0222      	lsls	r2, r4, #8
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	6849      	ldr	r1, [r1, #4]
 8003876:	0849      	lsrs	r1, r1, #1
 8003878:	2000      	movs	r0, #0
 800387a:	4688      	mov	r8, r1
 800387c:	4681      	mov	r9, r0
 800387e:	eb12 0a08 	adds.w	sl, r2, r8
 8003882:	eb43 0b09 	adc.w	fp, r3, r9
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003894:	4650      	mov	r0, sl
 8003896:	4659      	mov	r1, fp
 8003898:	f7fc fd02 	bl	80002a0 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4613      	mov	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038aa:	d308      	bcc.n	80038be <UART_SetConfig+0x3de>
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b2:	d204      	bcs.n	80038be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	60da      	str	r2, [r3, #12]
 80038bc:	e0b6      	b.n	8003a2c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038c4:	e0b2      	b.n	8003a2c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ce:	d15e      	bne.n	800398e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d828      	bhi.n	800392a <UART_SetConfig+0x44a>
 80038d8:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <UART_SetConfig+0x400>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	08003905 	.word	0x08003905
 80038e4:	0800390d 	.word	0x0800390d
 80038e8:	08003915 	.word	0x08003915
 80038ec:	0800392b 	.word	0x0800392b
 80038f0:	0800391b 	.word	0x0800391b
 80038f4:	0800392b 	.word	0x0800392b
 80038f8:	0800392b 	.word	0x0800392b
 80038fc:	0800392b 	.word	0x0800392b
 8003900:	08003923 	.word	0x08003923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003904:	f7fe fc9a 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003908:	61f8      	str	r0, [r7, #28]
        break;
 800390a:	e014      	b.n	8003936 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800390c:	f7fe fcac 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 8003910:	61f8      	str	r0, [r7, #28]
        break;
 8003912:	e010      	b.n	8003936 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003914:	4b4d      	ldr	r3, [pc, #308]	; (8003a4c <UART_SetConfig+0x56c>)
 8003916:	61fb      	str	r3, [r7, #28]
        break;
 8003918:	e00d      	b.n	8003936 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800391a:	f7fe fbf7 	bl	800210c <HAL_RCC_GetSysClockFreq>
 800391e:	61f8      	str	r0, [r7, #28]
        break;
 8003920:	e009      	b.n	8003936 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003926:	61fb      	str	r3, [r7, #28]
        break;
 8003928:	e005      	b.n	8003936 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d077      	beq.n	8003a2c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005a      	lsls	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	441a      	add	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b0f      	cmp	r3, #15
 8003956:	d916      	bls.n	8003986 <UART_SetConfig+0x4a6>
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395e:	d212      	bcs.n	8003986 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	b29b      	uxth	r3, r3
 8003964:	f023 030f 	bic.w	r3, r3, #15
 8003968:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	b29b      	uxth	r3, r3
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	b29a      	uxth	r2, r3
 8003976:	8afb      	ldrh	r3, [r7, #22]
 8003978:	4313      	orrs	r3, r2
 800397a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	8afa      	ldrh	r2, [r7, #22]
 8003982:	60da      	str	r2, [r3, #12]
 8003984:	e052      	b.n	8003a2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800398c:	e04e      	b.n	8003a2c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800398e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003992:	2b08      	cmp	r3, #8
 8003994:	d827      	bhi.n	80039e6 <UART_SetConfig+0x506>
 8003996:	a201      	add	r2, pc, #4	; (adr r2, 800399c <UART_SetConfig+0x4bc>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039c1 	.word	0x080039c1
 80039a0:	080039c9 	.word	0x080039c9
 80039a4:	080039d1 	.word	0x080039d1
 80039a8:	080039e7 	.word	0x080039e7
 80039ac:	080039d7 	.word	0x080039d7
 80039b0:	080039e7 	.word	0x080039e7
 80039b4:	080039e7 	.word	0x080039e7
 80039b8:	080039e7 	.word	0x080039e7
 80039bc:	080039df 	.word	0x080039df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c0:	f7fe fc3c 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 80039c4:	61f8      	str	r0, [r7, #28]
        break;
 80039c6:	e014      	b.n	80039f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c8:	f7fe fc4e 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 80039cc:	61f8      	str	r0, [r7, #28]
        break;
 80039ce:	e010      	b.n	80039f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d0:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <UART_SetConfig+0x56c>)
 80039d2:	61fb      	str	r3, [r7, #28]
        break;
 80039d4:	e00d      	b.n	80039f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d6:	f7fe fb99 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80039da:	61f8      	str	r0, [r7, #28]
        break;
 80039dc:	e009      	b.n	80039f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e2:	61fb      	str	r3, [r7, #28]
        break;
 80039e4:	e005      	b.n	80039f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039f0:	bf00      	nop
    }

    if (pclk != 0U)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d019      	beq.n	8003a2c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	085a      	lsrs	r2, r3, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	441a      	add	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b0f      	cmp	r3, #15
 8003a10:	d909      	bls.n	8003a26 <UART_SetConfig+0x546>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a18:	d205      	bcs.n	8003a26 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60da      	str	r2, [r3, #12]
 8003a24:	e002      	b.n	8003a2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3728      	adds	r7, #40	; 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a46:	bf00      	nop
 8003a48:	40008000 	.word	0x40008000
 8003a4c:	00f42400 	.word	0x00f42400

08003a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01a      	beq.n	8003b66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4e:	d10a      	bne.n	8003b66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	605a      	str	r2, [r3, #4]
  }
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ba4:	f7fd f9fa 	bl	8000f9c <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d10e      	bne.n	8003bd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f82d 	bl	8003c26 <UART_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e023      	b.n	8003c1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d10e      	bne.n	8003c02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f817 	bl	8003c26 <UART_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e00d      	b.n	8003c1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b09c      	sub	sp, #112	; 0x70
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	4613      	mov	r3, r2
 8003c34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c36:	e0a5      	b.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	f000 80a1 	beq.w	8003d84 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7fd f9ab 	bl	8000f9c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d13e      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c6c:	667b      	str	r3, [r7, #100]	; 0x64
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c78:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e6      	bne.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3308      	adds	r3, #8
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003caa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e5      	bne.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e067      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d04f      	beq.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf2:	d147      	bne.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cfc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e6      	bne.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d50:	623a      	str	r2, [r7, #32]
 8003d52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	69f9      	ldr	r1, [r7, #28]
 8003d56:	6a3a      	ldr	r2, [r7, #32]
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e010      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	f43f af4a 	beq.w	8003c38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3770      	adds	r7, #112	; 0x70
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b097      	sub	sp, #92	; 0x5c
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	88fa      	ldrh	r2, [r7, #6]
 8003dc8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de2:	d10e      	bne.n	8003e02 <UART_Start_Receive_IT+0x52>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <UART_Start_Receive_IT+0x48>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003df2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003df6:	e02d      	b.n	8003e54 <UART_Start_Receive_IT+0xa4>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	22ff      	movs	r2, #255	; 0xff
 8003dfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e00:	e028      	b.n	8003e54 <UART_Start_Receive_IT+0xa4>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10d      	bne.n	8003e26 <UART_Start_Receive_IT+0x76>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d104      	bne.n	8003e1c <UART_Start_Receive_IT+0x6c>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	22ff      	movs	r2, #255	; 0xff
 8003e16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e1a:	e01b      	b.n	8003e54 <UART_Start_Receive_IT+0xa4>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	227f      	movs	r2, #127	; 0x7f
 8003e20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e24:	e016      	b.n	8003e54 <UART_Start_Receive_IT+0xa4>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e2e:	d10d      	bne.n	8003e4c <UART_Start_Receive_IT+0x9c>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <UART_Start_Receive_IT+0x92>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	227f      	movs	r2, #127	; 0x7f
 8003e3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e40:	e008      	b.n	8003e54 <UART_Start_Receive_IT+0xa4>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	223f      	movs	r2, #63	; 0x3f
 8003e46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e4a:	e003      	b.n	8003e54 <UART_Start_Receive_IT+0xa4>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2222      	movs	r2, #34	; 0x22
 8003e60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	657b      	str	r3, [r7, #84]	; 0x54
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e82:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9e:	d107      	bne.n	8003eb0 <UART_Start_Receive_IT+0x100>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a24      	ldr	r2, [pc, #144]	; (8003f3c <UART_Start_Receive_IT+0x18c>)
 8003eac:	665a      	str	r2, [r3, #100]	; 0x64
 8003eae:	e002      	b.n	8003eb6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4a23      	ldr	r2, [pc, #140]	; (8003f40 <UART_Start_Receive_IT+0x190>)
 8003eb4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d019      	beq.n	8003efa <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e6      	bne.n	8003ec6 <UART_Start_Receive_IT+0x116>
 8003ef8:	e018      	b.n	8003f2c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	613b      	str	r3, [r7, #16]
   return(result);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f043 0320 	orr.w	r3, r3, #32
 8003f0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	69f9      	ldr	r1, [r7, #28]
 8003f1e:	6a3a      	ldr	r2, [r7, #32]
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e6      	bne.n	8003efa <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	375c      	adds	r7, #92	; 0x5c
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	08004363 	.word	0x08004363
 8003f40:	08004203 	.word	0x08004203

08003f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b095      	sub	sp, #84	; 0x54
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e6      	bne.n	8003f4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3308      	adds	r3, #8
 8003f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e5      	bne.n	8003f7e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d118      	bne.n	8003fec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f023 0310 	bic.w	r3, r3, #16
 8003fce:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6979      	ldr	r1, [r7, #20]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e6      	bne.n	8003fba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ffe:	bf00      	nop
 8004000:	3754      	adds	r7, #84	; 0x54
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7ff fa43 	bl	80034b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004036:	b480      	push	{r7}
 8004038:	b08f      	sub	sp, #60	; 0x3c
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004042:	2b21      	cmp	r3, #33	; 0x21
 8004044:	d14d      	bne.n	80040e2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d132      	bne.n	80040b8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004072:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e6      	bne.n	8004052 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	60bb      	str	r3, [r7, #8]
   return(result);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004098:	633b      	str	r3, [r7, #48]	; 0x30
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6979      	ldr	r1, [r7, #20]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	613b      	str	r3, [r7, #16]
   return(result);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e6      	bne.n	8004084 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80040b6:	e014      	b.n	80040e2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	b292      	uxth	r2, r2
 80040c4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80040e2:	bf00      	nop
 80040e4:	373c      	adds	r7, #60	; 0x3c
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b091      	sub	sp, #68	; 0x44
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040fa:	2b21      	cmp	r3, #33	; 0x21
 80040fc:	d151      	bne.n	80041a2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d132      	bne.n	8004170 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	623b      	str	r3, [r7, #32]
   return(result);
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	633b      	str	r3, [r7, #48]	; 0x30
 800412a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800412e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e6      	bne.n	800410a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	60fb      	str	r3, [r7, #12]
   return(result);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004150:	637b      	str	r3, [r7, #52]	; 0x34
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	69b9      	ldr	r1, [r7, #24]
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	617b      	str	r3, [r7, #20]
   return(result);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e6      	bne.n	800413c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800416e:	e018      	b.n	80041a2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004174:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004178:	881a      	ldrh	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004182:	b292      	uxth	r2, r2
 8004184:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418a:	1c9a      	adds	r2, r3, #2
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041a2:	bf00      	nop
 80041a4:	3744      	adds	r7, #68	; 0x44
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b088      	sub	sp, #32
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	6979      	ldr	r1, [r7, #20]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	613b      	str	r3, [r7, #16]
   return(result);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e6      	bne.n	80041b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7fc f9f7 	bl	80005e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041fa:	bf00      	nop
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b096      	sub	sp, #88	; 0x58
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004210:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004218:	2b22      	cmp	r3, #34	; 0x22
 800421a:	f040 8094 	bne.w	8004346 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004224:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004228:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800422c:	b2d9      	uxtb	r1, r3
 800422e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004232:	b2da      	uxtb	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	400a      	ands	r2, r1
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d179      	bne.n	800435a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800427a:	653b      	str	r3, [r7, #80]	; 0x50
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004284:	647b      	str	r3, [r7, #68]	; 0x44
 8004286:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800428a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e6      	bne.n	8004266 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3308      	adds	r3, #8
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	623b      	str	r3, [r7, #32]
   return(result);
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3308      	adds	r3, #8
 80042b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042b8:	633a      	str	r2, [r7, #48]	; 0x30
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e5      	bne.n	8004298 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d12e      	bne.n	800433e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	e853 3f00 	ldrex	r3, [r3]
 80042f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0310 	bic.w	r3, r3, #16
 80042fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	69b9      	ldr	r1, [r7, #24]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	617b      	str	r3, [r7, #20]
   return(result);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e6      	bne.n	80042e6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	2b10      	cmp	r3, #16
 8004324:	d103      	bne.n	800432e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2210      	movs	r2, #16
 800432c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004334:	4619      	mov	r1, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff f8c6 	bl	80034c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800433c:	e00d      	b.n	800435a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fc f9b4 	bl	80006ac <HAL_UART_RxCpltCallback>
}
 8004344:	e009      	b.n	800435a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	8b1b      	ldrh	r3, [r3, #24]
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0208 	orr.w	r2, r2, #8
 8004356:	b292      	uxth	r2, r2
 8004358:	831a      	strh	r2, [r3, #24]
}
 800435a:	bf00      	nop
 800435c:	3758      	adds	r7, #88	; 0x58
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b096      	sub	sp, #88	; 0x58
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004370:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004378:	2b22      	cmp	r3, #34	; 0x22
 800437a:	f040 8094 	bne.w	80044a6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004384:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800438e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004392:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004396:	4013      	ands	r3, r2
 8004398:	b29a      	uxth	r2, r3
 800439a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800439c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	1c9a      	adds	r2, r3, #2
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d179      	bne.n	80044ba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e4:	643b      	str	r3, [r7, #64]	; 0x40
 80043e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e6      	bne.n	80043c6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3308      	adds	r3, #8
 80043fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	61fb      	str	r3, [r7, #28]
   return(result);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004418:	62fa      	str	r2, [r7, #44]	; 0x2c
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800441e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e5      	bne.n	80043f8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443c:	2b01      	cmp	r3, #1
 800443e:	d12e      	bne.n	800449e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	60bb      	str	r3, [r7, #8]
   return(result);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	647b      	str	r3, [r7, #68]	; 0x44
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6979      	ldr	r1, [r7, #20]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	613b      	str	r3, [r7, #16]
   return(result);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e6      	bne.n	8004446 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b10      	cmp	r3, #16
 8004484:	d103      	bne.n	800448e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2210      	movs	r2, #16
 800448c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff f816 	bl	80034c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800449c:	e00d      	b.n	80044ba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc f904 	bl	80006ac <HAL_UART_RxCpltCallback>
}
 80044a4:	e009      	b.n	80044ba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	8b1b      	ldrh	r3, [r3, #24]
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	b292      	uxth	r2, r2
 80044b8:	831a      	strh	r2, [r3, #24]
}
 80044ba:	bf00      	nop
 80044bc:	3758      	adds	r7, #88	; 0x58
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <__errno>:
 80044d8:	4b01      	ldr	r3, [pc, #4]	; (80044e0 <__errno+0x8>)
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	2000000c 	.word	0x2000000c

080044e4 <__libc_init_array>:
 80044e4:	b570      	push	{r4, r5, r6, lr}
 80044e6:	4d0d      	ldr	r5, [pc, #52]	; (800451c <__libc_init_array+0x38>)
 80044e8:	4c0d      	ldr	r4, [pc, #52]	; (8004520 <__libc_init_array+0x3c>)
 80044ea:	1b64      	subs	r4, r4, r5
 80044ec:	10a4      	asrs	r4, r4, #2
 80044ee:	2600      	movs	r6, #0
 80044f0:	42a6      	cmp	r6, r4
 80044f2:	d109      	bne.n	8004508 <__libc_init_array+0x24>
 80044f4:	4d0b      	ldr	r5, [pc, #44]	; (8004524 <__libc_init_array+0x40>)
 80044f6:	4c0c      	ldr	r4, [pc, #48]	; (8004528 <__libc_init_array+0x44>)
 80044f8:	f001 fa20 	bl	800593c <_init>
 80044fc:	1b64      	subs	r4, r4, r5
 80044fe:	10a4      	asrs	r4, r4, #2
 8004500:	2600      	movs	r6, #0
 8004502:	42a6      	cmp	r6, r4
 8004504:	d105      	bne.n	8004512 <__libc_init_array+0x2e>
 8004506:	bd70      	pop	{r4, r5, r6, pc}
 8004508:	f855 3b04 	ldr.w	r3, [r5], #4
 800450c:	4798      	blx	r3
 800450e:	3601      	adds	r6, #1
 8004510:	e7ee      	b.n	80044f0 <__libc_init_array+0xc>
 8004512:	f855 3b04 	ldr.w	r3, [r5], #4
 8004516:	4798      	blx	r3
 8004518:	3601      	adds	r6, #1
 800451a:	e7f2      	b.n	8004502 <__libc_init_array+0x1e>
 800451c:	08005bd8 	.word	0x08005bd8
 8004520:	08005bd8 	.word	0x08005bd8
 8004524:	08005bd8 	.word	0x08005bd8
 8004528:	08005bdc 	.word	0x08005bdc

0800452c <memset>:
 800452c:	4402      	add	r2, r0
 800452e:	4603      	mov	r3, r0
 8004530:	4293      	cmp	r3, r2
 8004532:	d100      	bne.n	8004536 <memset+0xa>
 8004534:	4770      	bx	lr
 8004536:	f803 1b01 	strb.w	r1, [r3], #1
 800453a:	e7f9      	b.n	8004530 <memset+0x4>

0800453c <_puts_r>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	460e      	mov	r6, r1
 8004540:	4605      	mov	r5, r0
 8004542:	b118      	cbz	r0, 800454c <_puts_r+0x10>
 8004544:	6983      	ldr	r3, [r0, #24]
 8004546:	b90b      	cbnz	r3, 800454c <_puts_r+0x10>
 8004548:	f000 fadc 	bl	8004b04 <__sinit>
 800454c:	69ab      	ldr	r3, [r5, #24]
 800454e:	68ac      	ldr	r4, [r5, #8]
 8004550:	b913      	cbnz	r3, 8004558 <_puts_r+0x1c>
 8004552:	4628      	mov	r0, r5
 8004554:	f000 fad6 	bl	8004b04 <__sinit>
 8004558:	4b2c      	ldr	r3, [pc, #176]	; (800460c <_puts_r+0xd0>)
 800455a:	429c      	cmp	r4, r3
 800455c:	d120      	bne.n	80045a0 <_puts_r+0x64>
 800455e:	686c      	ldr	r4, [r5, #4]
 8004560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004562:	07db      	lsls	r3, r3, #31
 8004564:	d405      	bmi.n	8004572 <_puts_r+0x36>
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	0598      	lsls	r0, r3, #22
 800456a:	d402      	bmi.n	8004572 <_puts_r+0x36>
 800456c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800456e:	f000 fb67 	bl	8004c40 <__retarget_lock_acquire_recursive>
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	0719      	lsls	r1, r3, #28
 8004576:	d51d      	bpl.n	80045b4 <_puts_r+0x78>
 8004578:	6923      	ldr	r3, [r4, #16]
 800457a:	b1db      	cbz	r3, 80045b4 <_puts_r+0x78>
 800457c:	3e01      	subs	r6, #1
 800457e:	68a3      	ldr	r3, [r4, #8]
 8004580:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004584:	3b01      	subs	r3, #1
 8004586:	60a3      	str	r3, [r4, #8]
 8004588:	bb39      	cbnz	r1, 80045da <_puts_r+0x9e>
 800458a:	2b00      	cmp	r3, #0
 800458c:	da38      	bge.n	8004600 <_puts_r+0xc4>
 800458e:	4622      	mov	r2, r4
 8004590:	210a      	movs	r1, #10
 8004592:	4628      	mov	r0, r5
 8004594:	f000 f8ba 	bl	800470c <__swbuf_r>
 8004598:	3001      	adds	r0, #1
 800459a:	d011      	beq.n	80045c0 <_puts_r+0x84>
 800459c:	250a      	movs	r5, #10
 800459e:	e011      	b.n	80045c4 <_puts_r+0x88>
 80045a0:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <_puts_r+0xd4>)
 80045a2:	429c      	cmp	r4, r3
 80045a4:	d101      	bne.n	80045aa <_puts_r+0x6e>
 80045a6:	68ac      	ldr	r4, [r5, #8]
 80045a8:	e7da      	b.n	8004560 <_puts_r+0x24>
 80045aa:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <_puts_r+0xd8>)
 80045ac:	429c      	cmp	r4, r3
 80045ae:	bf08      	it	eq
 80045b0:	68ec      	ldreq	r4, [r5, #12]
 80045b2:	e7d5      	b.n	8004560 <_puts_r+0x24>
 80045b4:	4621      	mov	r1, r4
 80045b6:	4628      	mov	r0, r5
 80045b8:	f000 f90c 	bl	80047d4 <__swsetup_r>
 80045bc:	2800      	cmp	r0, #0
 80045be:	d0dd      	beq.n	800457c <_puts_r+0x40>
 80045c0:	f04f 35ff 	mov.w	r5, #4294967295
 80045c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045c6:	07da      	lsls	r2, r3, #31
 80045c8:	d405      	bmi.n	80045d6 <_puts_r+0x9a>
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	059b      	lsls	r3, r3, #22
 80045ce:	d402      	bmi.n	80045d6 <_puts_r+0x9a>
 80045d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045d2:	f000 fb36 	bl	8004c42 <__retarget_lock_release_recursive>
 80045d6:	4628      	mov	r0, r5
 80045d8:	bd70      	pop	{r4, r5, r6, pc}
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da04      	bge.n	80045e8 <_puts_r+0xac>
 80045de:	69a2      	ldr	r2, [r4, #24]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	dc06      	bgt.n	80045f2 <_puts_r+0xb6>
 80045e4:	290a      	cmp	r1, #10
 80045e6:	d004      	beq.n	80045f2 <_puts_r+0xb6>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	6022      	str	r2, [r4, #0]
 80045ee:	7019      	strb	r1, [r3, #0]
 80045f0:	e7c5      	b.n	800457e <_puts_r+0x42>
 80045f2:	4622      	mov	r2, r4
 80045f4:	4628      	mov	r0, r5
 80045f6:	f000 f889 	bl	800470c <__swbuf_r>
 80045fa:	3001      	adds	r0, #1
 80045fc:	d1bf      	bne.n	800457e <_puts_r+0x42>
 80045fe:	e7df      	b.n	80045c0 <_puts_r+0x84>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	250a      	movs	r5, #10
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	6022      	str	r2, [r4, #0]
 8004608:	701d      	strb	r5, [r3, #0]
 800460a:	e7db      	b.n	80045c4 <_puts_r+0x88>
 800460c:	08005a70 	.word	0x08005a70
 8004610:	08005a90 	.word	0x08005a90
 8004614:	08005a50 	.word	0x08005a50

08004618 <puts>:
 8004618:	4b02      	ldr	r3, [pc, #8]	; (8004624 <puts+0xc>)
 800461a:	4601      	mov	r1, r0
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	f7ff bf8d 	b.w	800453c <_puts_r>
 8004622:	bf00      	nop
 8004624:	2000000c 	.word	0x2000000c

08004628 <siscanf>:
 8004628:	b40e      	push	{r1, r2, r3}
 800462a:	b510      	push	{r4, lr}
 800462c:	b09f      	sub	sp, #124	; 0x7c
 800462e:	ac21      	add	r4, sp, #132	; 0x84
 8004630:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004634:	f854 2b04 	ldr.w	r2, [r4], #4
 8004638:	9201      	str	r2, [sp, #4]
 800463a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800463e:	9004      	str	r0, [sp, #16]
 8004640:	9008      	str	r0, [sp, #32]
 8004642:	f7fb fdcf 	bl	80001e4 <strlen>
 8004646:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <siscanf+0x50>)
 8004648:	9005      	str	r0, [sp, #20]
 800464a:	9009      	str	r0, [sp, #36]	; 0x24
 800464c:	930d      	str	r3, [sp, #52]	; 0x34
 800464e:	480b      	ldr	r0, [pc, #44]	; (800467c <siscanf+0x54>)
 8004650:	9a01      	ldr	r2, [sp, #4]
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	9403      	str	r4, [sp, #12]
 8004656:	2300      	movs	r3, #0
 8004658:	9311      	str	r3, [sp, #68]	; 0x44
 800465a:	9316      	str	r3, [sp, #88]	; 0x58
 800465c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004660:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004664:	a904      	add	r1, sp, #16
 8004666:	4623      	mov	r3, r4
 8004668:	f000 fc9e 	bl	8004fa8 <__ssvfiscanf_r>
 800466c:	b01f      	add	sp, #124	; 0x7c
 800466e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004672:	b003      	add	sp, #12
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	080046a3 	.word	0x080046a3
 800467c:	2000000c 	.word	0x2000000c

08004680 <__sread>:
 8004680:	b510      	push	{r4, lr}
 8004682:	460c      	mov	r4, r1
 8004684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004688:	f000 ff58 	bl	800553c <_read_r>
 800468c:	2800      	cmp	r0, #0
 800468e:	bfab      	itete	ge
 8004690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004692:	89a3      	ldrhlt	r3, [r4, #12]
 8004694:	181b      	addge	r3, r3, r0
 8004696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800469a:	bfac      	ite	ge
 800469c:	6563      	strge	r3, [r4, #84]	; 0x54
 800469e:	81a3      	strhlt	r3, [r4, #12]
 80046a0:	bd10      	pop	{r4, pc}

080046a2 <__seofread>:
 80046a2:	2000      	movs	r0, #0
 80046a4:	4770      	bx	lr

080046a6 <__swrite>:
 80046a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046aa:	461f      	mov	r7, r3
 80046ac:	898b      	ldrh	r3, [r1, #12]
 80046ae:	05db      	lsls	r3, r3, #23
 80046b0:	4605      	mov	r5, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	4616      	mov	r6, r2
 80046b6:	d505      	bpl.n	80046c4 <__swrite+0x1e>
 80046b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046bc:	2302      	movs	r3, #2
 80046be:	2200      	movs	r2, #0
 80046c0:	f000 fac0 	bl	8004c44 <_lseek_r>
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ce:	81a3      	strh	r3, [r4, #12]
 80046d0:	4632      	mov	r2, r6
 80046d2:	463b      	mov	r3, r7
 80046d4:	4628      	mov	r0, r5
 80046d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046da:	f000 b869 	b.w	80047b0 <_write_r>

080046de <__sseek>:
 80046de:	b510      	push	{r4, lr}
 80046e0:	460c      	mov	r4, r1
 80046e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e6:	f000 faad 	bl	8004c44 <_lseek_r>
 80046ea:	1c43      	adds	r3, r0, #1
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	bf15      	itete	ne
 80046f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80046f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046fa:	81a3      	strheq	r3, [r4, #12]
 80046fc:	bf18      	it	ne
 80046fe:	81a3      	strhne	r3, [r4, #12]
 8004700:	bd10      	pop	{r4, pc}

08004702 <__sclose>:
 8004702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004706:	f000 b8d3 	b.w	80048b0 <_close_r>
	...

0800470c <__swbuf_r>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	460e      	mov	r6, r1
 8004710:	4614      	mov	r4, r2
 8004712:	4605      	mov	r5, r0
 8004714:	b118      	cbz	r0, 800471e <__swbuf_r+0x12>
 8004716:	6983      	ldr	r3, [r0, #24]
 8004718:	b90b      	cbnz	r3, 800471e <__swbuf_r+0x12>
 800471a:	f000 f9f3 	bl	8004b04 <__sinit>
 800471e:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <__swbuf_r+0x98>)
 8004720:	429c      	cmp	r4, r3
 8004722:	d12b      	bne.n	800477c <__swbuf_r+0x70>
 8004724:	686c      	ldr	r4, [r5, #4]
 8004726:	69a3      	ldr	r3, [r4, #24]
 8004728:	60a3      	str	r3, [r4, #8]
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	071a      	lsls	r2, r3, #28
 800472e:	d52f      	bpl.n	8004790 <__swbuf_r+0x84>
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	b36b      	cbz	r3, 8004790 <__swbuf_r+0x84>
 8004734:	6923      	ldr	r3, [r4, #16]
 8004736:	6820      	ldr	r0, [r4, #0]
 8004738:	1ac0      	subs	r0, r0, r3
 800473a:	6963      	ldr	r3, [r4, #20]
 800473c:	b2f6      	uxtb	r6, r6
 800473e:	4283      	cmp	r3, r0
 8004740:	4637      	mov	r7, r6
 8004742:	dc04      	bgt.n	800474e <__swbuf_r+0x42>
 8004744:	4621      	mov	r1, r4
 8004746:	4628      	mov	r0, r5
 8004748:	f000 f948 	bl	80049dc <_fflush_r>
 800474c:	bb30      	cbnz	r0, 800479c <__swbuf_r+0x90>
 800474e:	68a3      	ldr	r3, [r4, #8]
 8004750:	3b01      	subs	r3, #1
 8004752:	60a3      	str	r3, [r4, #8]
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	6022      	str	r2, [r4, #0]
 800475a:	701e      	strb	r6, [r3, #0]
 800475c:	6963      	ldr	r3, [r4, #20]
 800475e:	3001      	adds	r0, #1
 8004760:	4283      	cmp	r3, r0
 8004762:	d004      	beq.n	800476e <__swbuf_r+0x62>
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	07db      	lsls	r3, r3, #31
 8004768:	d506      	bpl.n	8004778 <__swbuf_r+0x6c>
 800476a:	2e0a      	cmp	r6, #10
 800476c:	d104      	bne.n	8004778 <__swbuf_r+0x6c>
 800476e:	4621      	mov	r1, r4
 8004770:	4628      	mov	r0, r5
 8004772:	f000 f933 	bl	80049dc <_fflush_r>
 8004776:	b988      	cbnz	r0, 800479c <__swbuf_r+0x90>
 8004778:	4638      	mov	r0, r7
 800477a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <__swbuf_r+0x9c>)
 800477e:	429c      	cmp	r4, r3
 8004780:	d101      	bne.n	8004786 <__swbuf_r+0x7a>
 8004782:	68ac      	ldr	r4, [r5, #8]
 8004784:	e7cf      	b.n	8004726 <__swbuf_r+0x1a>
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <__swbuf_r+0xa0>)
 8004788:	429c      	cmp	r4, r3
 800478a:	bf08      	it	eq
 800478c:	68ec      	ldreq	r4, [r5, #12]
 800478e:	e7ca      	b.n	8004726 <__swbuf_r+0x1a>
 8004790:	4621      	mov	r1, r4
 8004792:	4628      	mov	r0, r5
 8004794:	f000 f81e 	bl	80047d4 <__swsetup_r>
 8004798:	2800      	cmp	r0, #0
 800479a:	d0cb      	beq.n	8004734 <__swbuf_r+0x28>
 800479c:	f04f 37ff 	mov.w	r7, #4294967295
 80047a0:	e7ea      	b.n	8004778 <__swbuf_r+0x6c>
 80047a2:	bf00      	nop
 80047a4:	08005a70 	.word	0x08005a70
 80047a8:	08005a90 	.word	0x08005a90
 80047ac:	08005a50 	.word	0x08005a50

080047b0 <_write_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4d07      	ldr	r5, [pc, #28]	; (80047d0 <_write_r+0x20>)
 80047b4:	4604      	mov	r4, r0
 80047b6:	4608      	mov	r0, r1
 80047b8:	4611      	mov	r1, r2
 80047ba:	2200      	movs	r2, #0
 80047bc:	602a      	str	r2, [r5, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	f7fc f81a 	bl	80007f8 <_write>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d102      	bne.n	80047ce <_write_r+0x1e>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	b103      	cbz	r3, 80047ce <_write_r+0x1e>
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	20000278 	.word	0x20000278

080047d4 <__swsetup_r>:
 80047d4:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <__swsetup_r+0xcc>)
 80047d6:	b570      	push	{r4, r5, r6, lr}
 80047d8:	681d      	ldr	r5, [r3, #0]
 80047da:	4606      	mov	r6, r0
 80047dc:	460c      	mov	r4, r1
 80047de:	b125      	cbz	r5, 80047ea <__swsetup_r+0x16>
 80047e0:	69ab      	ldr	r3, [r5, #24]
 80047e2:	b913      	cbnz	r3, 80047ea <__swsetup_r+0x16>
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 f98d 	bl	8004b04 <__sinit>
 80047ea:	4b2e      	ldr	r3, [pc, #184]	; (80048a4 <__swsetup_r+0xd0>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d10f      	bne.n	8004810 <__swsetup_r+0x3c>
 80047f0:	686c      	ldr	r4, [r5, #4]
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047f8:	0719      	lsls	r1, r3, #28
 80047fa:	d42c      	bmi.n	8004856 <__swsetup_r+0x82>
 80047fc:	06dd      	lsls	r5, r3, #27
 80047fe:	d411      	bmi.n	8004824 <__swsetup_r+0x50>
 8004800:	2309      	movs	r3, #9
 8004802:	6033      	str	r3, [r6, #0]
 8004804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	f04f 30ff 	mov.w	r0, #4294967295
 800480e:	e03e      	b.n	800488e <__swsetup_r+0xba>
 8004810:	4b25      	ldr	r3, [pc, #148]	; (80048a8 <__swsetup_r+0xd4>)
 8004812:	429c      	cmp	r4, r3
 8004814:	d101      	bne.n	800481a <__swsetup_r+0x46>
 8004816:	68ac      	ldr	r4, [r5, #8]
 8004818:	e7eb      	b.n	80047f2 <__swsetup_r+0x1e>
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <__swsetup_r+0xd8>)
 800481c:	429c      	cmp	r4, r3
 800481e:	bf08      	it	eq
 8004820:	68ec      	ldreq	r4, [r5, #12]
 8004822:	e7e6      	b.n	80047f2 <__swsetup_r+0x1e>
 8004824:	0758      	lsls	r0, r3, #29
 8004826:	d512      	bpl.n	800484e <__swsetup_r+0x7a>
 8004828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800482a:	b141      	cbz	r1, 800483e <__swsetup_r+0x6a>
 800482c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004830:	4299      	cmp	r1, r3
 8004832:	d002      	beq.n	800483a <__swsetup_r+0x66>
 8004834:	4630      	mov	r0, r6
 8004836:	f000 fa7d 	bl	8004d34 <_free_r>
 800483a:	2300      	movs	r3, #0
 800483c:	6363      	str	r3, [r4, #52]	; 0x34
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	2300      	movs	r3, #0
 8004848:	6063      	str	r3, [r4, #4]
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	6923      	ldr	r3, [r4, #16]
 8004858:	b94b      	cbnz	r3, 800486e <__swsetup_r+0x9a>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004864:	d003      	beq.n	800486e <__swsetup_r+0x9a>
 8004866:	4621      	mov	r1, r4
 8004868:	4630      	mov	r0, r6
 800486a:	f000 fa23 	bl	8004cb4 <__smakebuf_r>
 800486e:	89a0      	ldrh	r0, [r4, #12]
 8004870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004874:	f010 0301 	ands.w	r3, r0, #1
 8004878:	d00a      	beq.n	8004890 <__swsetup_r+0xbc>
 800487a:	2300      	movs	r3, #0
 800487c:	60a3      	str	r3, [r4, #8]
 800487e:	6963      	ldr	r3, [r4, #20]
 8004880:	425b      	negs	r3, r3
 8004882:	61a3      	str	r3, [r4, #24]
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	b943      	cbnz	r3, 800489a <__swsetup_r+0xc6>
 8004888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800488c:	d1ba      	bne.n	8004804 <__swsetup_r+0x30>
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	0781      	lsls	r1, r0, #30
 8004892:	bf58      	it	pl
 8004894:	6963      	ldrpl	r3, [r4, #20]
 8004896:	60a3      	str	r3, [r4, #8]
 8004898:	e7f4      	b.n	8004884 <__swsetup_r+0xb0>
 800489a:	2000      	movs	r0, #0
 800489c:	e7f7      	b.n	800488e <__swsetup_r+0xba>
 800489e:	bf00      	nop
 80048a0:	2000000c 	.word	0x2000000c
 80048a4:	08005a70 	.word	0x08005a70
 80048a8:	08005a90 	.word	0x08005a90
 80048ac:	08005a50 	.word	0x08005a50

080048b0 <_close_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4d06      	ldr	r5, [pc, #24]	; (80048cc <_close_r+0x1c>)
 80048b4:	2300      	movs	r3, #0
 80048b6:	4604      	mov	r4, r0
 80048b8:	4608      	mov	r0, r1
 80048ba:	602b      	str	r3, [r5, #0]
 80048bc:	f7fc fa57 	bl	8000d6e <_close>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_close_r+0x1a>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_close_r+0x1a>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	20000278 	.word	0x20000278

080048d0 <__sflush_r>:
 80048d0:	898a      	ldrh	r2, [r1, #12]
 80048d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d6:	4605      	mov	r5, r0
 80048d8:	0710      	lsls	r0, r2, #28
 80048da:	460c      	mov	r4, r1
 80048dc:	d458      	bmi.n	8004990 <__sflush_r+0xc0>
 80048de:	684b      	ldr	r3, [r1, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dc05      	bgt.n	80048f0 <__sflush_r+0x20>
 80048e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	dc02      	bgt.n	80048f0 <__sflush_r+0x20>
 80048ea:	2000      	movs	r0, #0
 80048ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048f2:	2e00      	cmp	r6, #0
 80048f4:	d0f9      	beq.n	80048ea <__sflush_r+0x1a>
 80048f6:	2300      	movs	r3, #0
 80048f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048fc:	682f      	ldr	r7, [r5, #0]
 80048fe:	602b      	str	r3, [r5, #0]
 8004900:	d032      	beq.n	8004968 <__sflush_r+0x98>
 8004902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	075a      	lsls	r2, r3, #29
 8004908:	d505      	bpl.n	8004916 <__sflush_r+0x46>
 800490a:	6863      	ldr	r3, [r4, #4]
 800490c:	1ac0      	subs	r0, r0, r3
 800490e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004910:	b10b      	cbz	r3, 8004916 <__sflush_r+0x46>
 8004912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004914:	1ac0      	subs	r0, r0, r3
 8004916:	2300      	movs	r3, #0
 8004918:	4602      	mov	r2, r0
 800491a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800491c:	6a21      	ldr	r1, [r4, #32]
 800491e:	4628      	mov	r0, r5
 8004920:	47b0      	blx	r6
 8004922:	1c43      	adds	r3, r0, #1
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	d106      	bne.n	8004936 <__sflush_r+0x66>
 8004928:	6829      	ldr	r1, [r5, #0]
 800492a:	291d      	cmp	r1, #29
 800492c:	d82c      	bhi.n	8004988 <__sflush_r+0xb8>
 800492e:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <__sflush_r+0x108>)
 8004930:	40ca      	lsrs	r2, r1
 8004932:	07d6      	lsls	r6, r2, #31
 8004934:	d528      	bpl.n	8004988 <__sflush_r+0xb8>
 8004936:	2200      	movs	r2, #0
 8004938:	6062      	str	r2, [r4, #4]
 800493a:	04d9      	lsls	r1, r3, #19
 800493c:	6922      	ldr	r2, [r4, #16]
 800493e:	6022      	str	r2, [r4, #0]
 8004940:	d504      	bpl.n	800494c <__sflush_r+0x7c>
 8004942:	1c42      	adds	r2, r0, #1
 8004944:	d101      	bne.n	800494a <__sflush_r+0x7a>
 8004946:	682b      	ldr	r3, [r5, #0]
 8004948:	b903      	cbnz	r3, 800494c <__sflush_r+0x7c>
 800494a:	6560      	str	r0, [r4, #84]	; 0x54
 800494c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800494e:	602f      	str	r7, [r5, #0]
 8004950:	2900      	cmp	r1, #0
 8004952:	d0ca      	beq.n	80048ea <__sflush_r+0x1a>
 8004954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004958:	4299      	cmp	r1, r3
 800495a:	d002      	beq.n	8004962 <__sflush_r+0x92>
 800495c:	4628      	mov	r0, r5
 800495e:	f000 f9e9 	bl	8004d34 <_free_r>
 8004962:	2000      	movs	r0, #0
 8004964:	6360      	str	r0, [r4, #52]	; 0x34
 8004966:	e7c1      	b.n	80048ec <__sflush_r+0x1c>
 8004968:	6a21      	ldr	r1, [r4, #32]
 800496a:	2301      	movs	r3, #1
 800496c:	4628      	mov	r0, r5
 800496e:	47b0      	blx	r6
 8004970:	1c41      	adds	r1, r0, #1
 8004972:	d1c7      	bne.n	8004904 <__sflush_r+0x34>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0c4      	beq.n	8004904 <__sflush_r+0x34>
 800497a:	2b1d      	cmp	r3, #29
 800497c:	d001      	beq.n	8004982 <__sflush_r+0xb2>
 800497e:	2b16      	cmp	r3, #22
 8004980:	d101      	bne.n	8004986 <__sflush_r+0xb6>
 8004982:	602f      	str	r7, [r5, #0]
 8004984:	e7b1      	b.n	80048ea <__sflush_r+0x1a>
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498c:	81a3      	strh	r3, [r4, #12]
 800498e:	e7ad      	b.n	80048ec <__sflush_r+0x1c>
 8004990:	690f      	ldr	r7, [r1, #16]
 8004992:	2f00      	cmp	r7, #0
 8004994:	d0a9      	beq.n	80048ea <__sflush_r+0x1a>
 8004996:	0793      	lsls	r3, r2, #30
 8004998:	680e      	ldr	r6, [r1, #0]
 800499a:	bf08      	it	eq
 800499c:	694b      	ldreq	r3, [r1, #20]
 800499e:	600f      	str	r7, [r1, #0]
 80049a0:	bf18      	it	ne
 80049a2:	2300      	movne	r3, #0
 80049a4:	eba6 0807 	sub.w	r8, r6, r7
 80049a8:	608b      	str	r3, [r1, #8]
 80049aa:	f1b8 0f00 	cmp.w	r8, #0
 80049ae:	dd9c      	ble.n	80048ea <__sflush_r+0x1a>
 80049b0:	6a21      	ldr	r1, [r4, #32]
 80049b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049b4:	4643      	mov	r3, r8
 80049b6:	463a      	mov	r2, r7
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b0      	blx	r6
 80049bc:	2800      	cmp	r0, #0
 80049be:	dc06      	bgt.n	80049ce <__sflush_r+0xfe>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c6:	81a3      	strh	r3, [r4, #12]
 80049c8:	f04f 30ff 	mov.w	r0, #4294967295
 80049cc:	e78e      	b.n	80048ec <__sflush_r+0x1c>
 80049ce:	4407      	add	r7, r0
 80049d0:	eba8 0800 	sub.w	r8, r8, r0
 80049d4:	e7e9      	b.n	80049aa <__sflush_r+0xda>
 80049d6:	bf00      	nop
 80049d8:	20400001 	.word	0x20400001

080049dc <_fflush_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	690b      	ldr	r3, [r1, #16]
 80049e0:	4605      	mov	r5, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	b913      	cbnz	r3, 80049ec <_fflush_r+0x10>
 80049e6:	2500      	movs	r5, #0
 80049e8:	4628      	mov	r0, r5
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	b118      	cbz	r0, 80049f6 <_fflush_r+0x1a>
 80049ee:	6983      	ldr	r3, [r0, #24]
 80049f0:	b90b      	cbnz	r3, 80049f6 <_fflush_r+0x1a>
 80049f2:	f000 f887 	bl	8004b04 <__sinit>
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <_fflush_r+0x6c>)
 80049f8:	429c      	cmp	r4, r3
 80049fa:	d11b      	bne.n	8004a34 <_fflush_r+0x58>
 80049fc:	686c      	ldr	r4, [r5, #4]
 80049fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0ef      	beq.n	80049e6 <_fflush_r+0xa>
 8004a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a08:	07d0      	lsls	r0, r2, #31
 8004a0a:	d404      	bmi.n	8004a16 <_fflush_r+0x3a>
 8004a0c:	0599      	lsls	r1, r3, #22
 8004a0e:	d402      	bmi.n	8004a16 <_fflush_r+0x3a>
 8004a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a12:	f000 f915 	bl	8004c40 <__retarget_lock_acquire_recursive>
 8004a16:	4628      	mov	r0, r5
 8004a18:	4621      	mov	r1, r4
 8004a1a:	f7ff ff59 	bl	80048d0 <__sflush_r>
 8004a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a20:	07da      	lsls	r2, r3, #31
 8004a22:	4605      	mov	r5, r0
 8004a24:	d4e0      	bmi.n	80049e8 <_fflush_r+0xc>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	059b      	lsls	r3, r3, #22
 8004a2a:	d4dd      	bmi.n	80049e8 <_fflush_r+0xc>
 8004a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a2e:	f000 f908 	bl	8004c42 <__retarget_lock_release_recursive>
 8004a32:	e7d9      	b.n	80049e8 <_fflush_r+0xc>
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <_fflush_r+0x70>)
 8004a36:	429c      	cmp	r4, r3
 8004a38:	d101      	bne.n	8004a3e <_fflush_r+0x62>
 8004a3a:	68ac      	ldr	r4, [r5, #8]
 8004a3c:	e7df      	b.n	80049fe <_fflush_r+0x22>
 8004a3e:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <_fflush_r+0x74>)
 8004a40:	429c      	cmp	r4, r3
 8004a42:	bf08      	it	eq
 8004a44:	68ec      	ldreq	r4, [r5, #12]
 8004a46:	e7da      	b.n	80049fe <_fflush_r+0x22>
 8004a48:	08005a70 	.word	0x08005a70
 8004a4c:	08005a90 	.word	0x08005a90
 8004a50:	08005a50 	.word	0x08005a50

08004a54 <std>:
 8004a54:	2300      	movs	r3, #0
 8004a56:	b510      	push	{r4, lr}
 8004a58:	4604      	mov	r4, r0
 8004a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a62:	6083      	str	r3, [r0, #8]
 8004a64:	8181      	strh	r1, [r0, #12]
 8004a66:	6643      	str	r3, [r0, #100]	; 0x64
 8004a68:	81c2      	strh	r2, [r0, #14]
 8004a6a:	6183      	str	r3, [r0, #24]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	2208      	movs	r2, #8
 8004a70:	305c      	adds	r0, #92	; 0x5c
 8004a72:	f7ff fd5b 	bl	800452c <memset>
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <std+0x38>)
 8004a78:	6263      	str	r3, [r4, #36]	; 0x24
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <std+0x3c>)
 8004a7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <std+0x40>)
 8004a80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <std+0x44>)
 8004a84:	6224      	str	r4, [r4, #32]
 8004a86:	6323      	str	r3, [r4, #48]	; 0x30
 8004a88:	bd10      	pop	{r4, pc}
 8004a8a:	bf00      	nop
 8004a8c:	08004681 	.word	0x08004681
 8004a90:	080046a7 	.word	0x080046a7
 8004a94:	080046df 	.word	0x080046df
 8004a98:	08004703 	.word	0x08004703

08004a9c <_cleanup_r>:
 8004a9c:	4901      	ldr	r1, [pc, #4]	; (8004aa4 <_cleanup_r+0x8>)
 8004a9e:	f000 b8af 	b.w	8004c00 <_fwalk_reent>
 8004aa2:	bf00      	nop
 8004aa4:	080049dd 	.word	0x080049dd

08004aa8 <__sfmoreglue>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	2268      	movs	r2, #104	; 0x68
 8004aac:	1e4d      	subs	r5, r1, #1
 8004aae:	4355      	muls	r5, r2
 8004ab0:	460e      	mov	r6, r1
 8004ab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ab6:	f000 f9a9 	bl	8004e0c <_malloc_r>
 8004aba:	4604      	mov	r4, r0
 8004abc:	b140      	cbz	r0, 8004ad0 <__sfmoreglue+0x28>
 8004abe:	2100      	movs	r1, #0
 8004ac0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ac4:	300c      	adds	r0, #12
 8004ac6:	60a0      	str	r0, [r4, #8]
 8004ac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004acc:	f7ff fd2e 	bl	800452c <memset>
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}

08004ad4 <__sfp_lock_acquire>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	; (8004adc <__sfp_lock_acquire+0x8>)
 8004ad6:	f000 b8b3 	b.w	8004c40 <__retarget_lock_acquire_recursive>
 8004ada:	bf00      	nop
 8004adc:	2000026d 	.word	0x2000026d

08004ae0 <__sfp_lock_release>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	; (8004ae8 <__sfp_lock_release+0x8>)
 8004ae2:	f000 b8ae 	b.w	8004c42 <__retarget_lock_release_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	2000026d 	.word	0x2000026d

08004aec <__sinit_lock_acquire>:
 8004aec:	4801      	ldr	r0, [pc, #4]	; (8004af4 <__sinit_lock_acquire+0x8>)
 8004aee:	f000 b8a7 	b.w	8004c40 <__retarget_lock_acquire_recursive>
 8004af2:	bf00      	nop
 8004af4:	2000026e 	.word	0x2000026e

08004af8 <__sinit_lock_release>:
 8004af8:	4801      	ldr	r0, [pc, #4]	; (8004b00 <__sinit_lock_release+0x8>)
 8004afa:	f000 b8a2 	b.w	8004c42 <__retarget_lock_release_recursive>
 8004afe:	bf00      	nop
 8004b00:	2000026e 	.word	0x2000026e

08004b04 <__sinit>:
 8004b04:	b510      	push	{r4, lr}
 8004b06:	4604      	mov	r4, r0
 8004b08:	f7ff fff0 	bl	8004aec <__sinit_lock_acquire>
 8004b0c:	69a3      	ldr	r3, [r4, #24]
 8004b0e:	b11b      	cbz	r3, 8004b18 <__sinit+0x14>
 8004b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b14:	f7ff bff0 	b.w	8004af8 <__sinit_lock_release>
 8004b18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b1c:	6523      	str	r3, [r4, #80]	; 0x50
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <__sinit+0x68>)
 8004b20:	4a13      	ldr	r2, [pc, #76]	; (8004b70 <__sinit+0x6c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b26:	42a3      	cmp	r3, r4
 8004b28:	bf04      	itt	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	61a3      	streq	r3, [r4, #24]
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 f820 	bl	8004b74 <__sfp>
 8004b34:	6060      	str	r0, [r4, #4]
 8004b36:	4620      	mov	r0, r4
 8004b38:	f000 f81c 	bl	8004b74 <__sfp>
 8004b3c:	60a0      	str	r0, [r4, #8]
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f000 f818 	bl	8004b74 <__sfp>
 8004b44:	2200      	movs	r2, #0
 8004b46:	60e0      	str	r0, [r4, #12]
 8004b48:	2104      	movs	r1, #4
 8004b4a:	6860      	ldr	r0, [r4, #4]
 8004b4c:	f7ff ff82 	bl	8004a54 <std>
 8004b50:	68a0      	ldr	r0, [r4, #8]
 8004b52:	2201      	movs	r2, #1
 8004b54:	2109      	movs	r1, #9
 8004b56:	f7ff ff7d 	bl	8004a54 <std>
 8004b5a:	68e0      	ldr	r0, [r4, #12]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	2112      	movs	r1, #18
 8004b60:	f7ff ff78 	bl	8004a54 <std>
 8004b64:	2301      	movs	r3, #1
 8004b66:	61a3      	str	r3, [r4, #24]
 8004b68:	e7d2      	b.n	8004b10 <__sinit+0xc>
 8004b6a:	bf00      	nop
 8004b6c:	08005a4c 	.word	0x08005a4c
 8004b70:	08004a9d 	.word	0x08004a9d

08004b74 <__sfp>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	4607      	mov	r7, r0
 8004b78:	f7ff ffac 	bl	8004ad4 <__sfp_lock_acquire>
 8004b7c:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <__sfp+0x84>)
 8004b7e:	681e      	ldr	r6, [r3, #0]
 8004b80:	69b3      	ldr	r3, [r6, #24]
 8004b82:	b913      	cbnz	r3, 8004b8a <__sfp+0x16>
 8004b84:	4630      	mov	r0, r6
 8004b86:	f7ff ffbd 	bl	8004b04 <__sinit>
 8004b8a:	3648      	adds	r6, #72	; 0x48
 8004b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	d503      	bpl.n	8004b9c <__sfp+0x28>
 8004b94:	6833      	ldr	r3, [r6, #0]
 8004b96:	b30b      	cbz	r3, 8004bdc <__sfp+0x68>
 8004b98:	6836      	ldr	r6, [r6, #0]
 8004b9a:	e7f7      	b.n	8004b8c <__sfp+0x18>
 8004b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ba0:	b9d5      	cbnz	r5, 8004bd8 <__sfp+0x64>
 8004ba2:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <__sfp+0x88>)
 8004ba4:	60e3      	str	r3, [r4, #12]
 8004ba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004baa:	6665      	str	r5, [r4, #100]	; 0x64
 8004bac:	f000 f847 	bl	8004c3e <__retarget_lock_init_recursive>
 8004bb0:	f7ff ff96 	bl	8004ae0 <__sfp_lock_release>
 8004bb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004bb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004bbc:	6025      	str	r5, [r4, #0]
 8004bbe:	61a5      	str	r5, [r4, #24]
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bc8:	f7ff fcb0 	bl	800452c <memset>
 8004bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd8:	3468      	adds	r4, #104	; 0x68
 8004bda:	e7d9      	b.n	8004b90 <__sfp+0x1c>
 8004bdc:	2104      	movs	r1, #4
 8004bde:	4638      	mov	r0, r7
 8004be0:	f7ff ff62 	bl	8004aa8 <__sfmoreglue>
 8004be4:	4604      	mov	r4, r0
 8004be6:	6030      	str	r0, [r6, #0]
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d1d5      	bne.n	8004b98 <__sfp+0x24>
 8004bec:	f7ff ff78 	bl	8004ae0 <__sfp_lock_release>
 8004bf0:	230c      	movs	r3, #12
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	e7ee      	b.n	8004bd4 <__sfp+0x60>
 8004bf6:	bf00      	nop
 8004bf8:	08005a4c 	.word	0x08005a4c
 8004bfc:	ffff0001 	.word	0xffff0001

08004c00 <_fwalk_reent>:
 8004c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c04:	4606      	mov	r6, r0
 8004c06:	4688      	mov	r8, r1
 8004c08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c0c:	2700      	movs	r7, #0
 8004c0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c12:	f1b9 0901 	subs.w	r9, r9, #1
 8004c16:	d505      	bpl.n	8004c24 <_fwalk_reent+0x24>
 8004c18:	6824      	ldr	r4, [r4, #0]
 8004c1a:	2c00      	cmp	r4, #0
 8004c1c:	d1f7      	bne.n	8004c0e <_fwalk_reent+0xe>
 8004c1e:	4638      	mov	r0, r7
 8004c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c24:	89ab      	ldrh	r3, [r5, #12]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d907      	bls.n	8004c3a <_fwalk_reent+0x3a>
 8004c2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	d003      	beq.n	8004c3a <_fwalk_reent+0x3a>
 8004c32:	4629      	mov	r1, r5
 8004c34:	4630      	mov	r0, r6
 8004c36:	47c0      	blx	r8
 8004c38:	4307      	orrs	r7, r0
 8004c3a:	3568      	adds	r5, #104	; 0x68
 8004c3c:	e7e9      	b.n	8004c12 <_fwalk_reent+0x12>

08004c3e <__retarget_lock_init_recursive>:
 8004c3e:	4770      	bx	lr

08004c40 <__retarget_lock_acquire_recursive>:
 8004c40:	4770      	bx	lr

08004c42 <__retarget_lock_release_recursive>:
 8004c42:	4770      	bx	lr

08004c44 <_lseek_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4d07      	ldr	r5, [pc, #28]	; (8004c64 <_lseek_r+0x20>)
 8004c48:	4604      	mov	r4, r0
 8004c4a:	4608      	mov	r0, r1
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	602a      	str	r2, [r5, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f7fc f8b2 	bl	8000dbc <_lseek>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_lseek_r+0x1e>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_lseek_r+0x1e>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	20000278 	.word	0x20000278

08004c68 <__swhatbuf_r>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	460e      	mov	r6, r1
 8004c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c70:	2900      	cmp	r1, #0
 8004c72:	b096      	sub	sp, #88	; 0x58
 8004c74:	4614      	mov	r4, r2
 8004c76:	461d      	mov	r5, r3
 8004c78:	da08      	bge.n	8004c8c <__swhatbuf_r+0x24>
 8004c7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	602a      	str	r2, [r5, #0]
 8004c82:	061a      	lsls	r2, r3, #24
 8004c84:	d410      	bmi.n	8004ca8 <__swhatbuf_r+0x40>
 8004c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c8a:	e00e      	b.n	8004caa <__swhatbuf_r+0x42>
 8004c8c:	466a      	mov	r2, sp
 8004c8e:	f000 fde1 	bl	8005854 <_fstat_r>
 8004c92:	2800      	cmp	r0, #0
 8004c94:	dbf1      	blt.n	8004c7a <__swhatbuf_r+0x12>
 8004c96:	9a01      	ldr	r2, [sp, #4]
 8004c98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ca0:	425a      	negs	r2, r3
 8004ca2:	415a      	adcs	r2, r3
 8004ca4:	602a      	str	r2, [r5, #0]
 8004ca6:	e7ee      	b.n	8004c86 <__swhatbuf_r+0x1e>
 8004ca8:	2340      	movs	r3, #64	; 0x40
 8004caa:	2000      	movs	r0, #0
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	b016      	add	sp, #88	; 0x58
 8004cb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004cb4 <__smakebuf_r>:
 8004cb4:	898b      	ldrh	r3, [r1, #12]
 8004cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cb8:	079d      	lsls	r5, r3, #30
 8004cba:	4606      	mov	r6, r0
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	d507      	bpl.n	8004cd0 <__smakebuf_r+0x1c>
 8004cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	6123      	str	r3, [r4, #16]
 8004cc8:	2301      	movs	r3, #1
 8004cca:	6163      	str	r3, [r4, #20]
 8004ccc:	b002      	add	sp, #8
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	ab01      	add	r3, sp, #4
 8004cd2:	466a      	mov	r2, sp
 8004cd4:	f7ff ffc8 	bl	8004c68 <__swhatbuf_r>
 8004cd8:	9900      	ldr	r1, [sp, #0]
 8004cda:	4605      	mov	r5, r0
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f000 f895 	bl	8004e0c <_malloc_r>
 8004ce2:	b948      	cbnz	r0, 8004cf8 <__smakebuf_r+0x44>
 8004ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce8:	059a      	lsls	r2, r3, #22
 8004cea:	d4ef      	bmi.n	8004ccc <__smakebuf_r+0x18>
 8004cec:	f023 0303 	bic.w	r3, r3, #3
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	e7e3      	b.n	8004cc0 <__smakebuf_r+0xc>
 8004cf8:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <__smakebuf_r+0x7c>)
 8004cfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	6020      	str	r0, [r4, #0]
 8004d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	9b00      	ldr	r3, [sp, #0]
 8004d08:	6163      	str	r3, [r4, #20]
 8004d0a:	9b01      	ldr	r3, [sp, #4]
 8004d0c:	6120      	str	r0, [r4, #16]
 8004d0e:	b15b      	cbz	r3, 8004d28 <__smakebuf_r+0x74>
 8004d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d14:	4630      	mov	r0, r6
 8004d16:	f000 fdaf 	bl	8005878 <_isatty_r>
 8004d1a:	b128      	cbz	r0, 8004d28 <__smakebuf_r+0x74>
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	f023 0303 	bic.w	r3, r3, #3
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	81a3      	strh	r3, [r4, #12]
 8004d28:	89a0      	ldrh	r0, [r4, #12]
 8004d2a:	4305      	orrs	r5, r0
 8004d2c:	81a5      	strh	r5, [r4, #12]
 8004d2e:	e7cd      	b.n	8004ccc <__smakebuf_r+0x18>
 8004d30:	08004a9d 	.word	0x08004a9d

08004d34 <_free_r>:
 8004d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d36:	2900      	cmp	r1, #0
 8004d38:	d044      	beq.n	8004dc4 <_free_r+0x90>
 8004d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d3e:	9001      	str	r0, [sp, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f1a1 0404 	sub.w	r4, r1, #4
 8004d46:	bfb8      	it	lt
 8004d48:	18e4      	addlt	r4, r4, r3
 8004d4a:	f000 fdb3 	bl	80058b4 <__malloc_lock>
 8004d4e:	4a1e      	ldr	r2, [pc, #120]	; (8004dc8 <_free_r+0x94>)
 8004d50:	9801      	ldr	r0, [sp, #4]
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	b933      	cbnz	r3, 8004d64 <_free_r+0x30>
 8004d56:	6063      	str	r3, [r4, #4]
 8004d58:	6014      	str	r4, [r2, #0]
 8004d5a:	b003      	add	sp, #12
 8004d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d60:	f000 bdae 	b.w	80058c0 <__malloc_unlock>
 8004d64:	42a3      	cmp	r3, r4
 8004d66:	d908      	bls.n	8004d7a <_free_r+0x46>
 8004d68:	6825      	ldr	r5, [r4, #0]
 8004d6a:	1961      	adds	r1, r4, r5
 8004d6c:	428b      	cmp	r3, r1
 8004d6e:	bf01      	itttt	eq
 8004d70:	6819      	ldreq	r1, [r3, #0]
 8004d72:	685b      	ldreq	r3, [r3, #4]
 8004d74:	1949      	addeq	r1, r1, r5
 8004d76:	6021      	streq	r1, [r4, #0]
 8004d78:	e7ed      	b.n	8004d56 <_free_r+0x22>
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	b10b      	cbz	r3, 8004d84 <_free_r+0x50>
 8004d80:	42a3      	cmp	r3, r4
 8004d82:	d9fa      	bls.n	8004d7a <_free_r+0x46>
 8004d84:	6811      	ldr	r1, [r2, #0]
 8004d86:	1855      	adds	r5, r2, r1
 8004d88:	42a5      	cmp	r5, r4
 8004d8a:	d10b      	bne.n	8004da4 <_free_r+0x70>
 8004d8c:	6824      	ldr	r4, [r4, #0]
 8004d8e:	4421      	add	r1, r4
 8004d90:	1854      	adds	r4, r2, r1
 8004d92:	42a3      	cmp	r3, r4
 8004d94:	6011      	str	r1, [r2, #0]
 8004d96:	d1e0      	bne.n	8004d5a <_free_r+0x26>
 8004d98:	681c      	ldr	r4, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	6053      	str	r3, [r2, #4]
 8004d9e:	4421      	add	r1, r4
 8004da0:	6011      	str	r1, [r2, #0]
 8004da2:	e7da      	b.n	8004d5a <_free_r+0x26>
 8004da4:	d902      	bls.n	8004dac <_free_r+0x78>
 8004da6:	230c      	movs	r3, #12
 8004da8:	6003      	str	r3, [r0, #0]
 8004daa:	e7d6      	b.n	8004d5a <_free_r+0x26>
 8004dac:	6825      	ldr	r5, [r4, #0]
 8004dae:	1961      	adds	r1, r4, r5
 8004db0:	428b      	cmp	r3, r1
 8004db2:	bf04      	itt	eq
 8004db4:	6819      	ldreq	r1, [r3, #0]
 8004db6:	685b      	ldreq	r3, [r3, #4]
 8004db8:	6063      	str	r3, [r4, #4]
 8004dba:	bf04      	itt	eq
 8004dbc:	1949      	addeq	r1, r1, r5
 8004dbe:	6021      	streq	r1, [r4, #0]
 8004dc0:	6054      	str	r4, [r2, #4]
 8004dc2:	e7ca      	b.n	8004d5a <_free_r+0x26>
 8004dc4:	b003      	add	sp, #12
 8004dc6:	bd30      	pop	{r4, r5, pc}
 8004dc8:	20000270 	.word	0x20000270

08004dcc <sbrk_aligned>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	4e0e      	ldr	r6, [pc, #56]	; (8004e08 <sbrk_aligned+0x3c>)
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	6831      	ldr	r1, [r6, #0]
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	b911      	cbnz	r1, 8004dde <sbrk_aligned+0x12>
 8004dd8:	f000 fbc2 	bl	8005560 <_sbrk_r>
 8004ddc:	6030      	str	r0, [r6, #0]
 8004dde:	4621      	mov	r1, r4
 8004de0:	4628      	mov	r0, r5
 8004de2:	f000 fbbd 	bl	8005560 <_sbrk_r>
 8004de6:	1c43      	adds	r3, r0, #1
 8004de8:	d00a      	beq.n	8004e00 <sbrk_aligned+0x34>
 8004dea:	1cc4      	adds	r4, r0, #3
 8004dec:	f024 0403 	bic.w	r4, r4, #3
 8004df0:	42a0      	cmp	r0, r4
 8004df2:	d007      	beq.n	8004e04 <sbrk_aligned+0x38>
 8004df4:	1a21      	subs	r1, r4, r0
 8004df6:	4628      	mov	r0, r5
 8004df8:	f000 fbb2 	bl	8005560 <_sbrk_r>
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d101      	bne.n	8004e04 <sbrk_aligned+0x38>
 8004e00:	f04f 34ff 	mov.w	r4, #4294967295
 8004e04:	4620      	mov	r0, r4
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	20000274 	.word	0x20000274

08004e0c <_malloc_r>:
 8004e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e10:	1ccd      	adds	r5, r1, #3
 8004e12:	f025 0503 	bic.w	r5, r5, #3
 8004e16:	3508      	adds	r5, #8
 8004e18:	2d0c      	cmp	r5, #12
 8004e1a:	bf38      	it	cc
 8004e1c:	250c      	movcc	r5, #12
 8004e1e:	2d00      	cmp	r5, #0
 8004e20:	4607      	mov	r7, r0
 8004e22:	db01      	blt.n	8004e28 <_malloc_r+0x1c>
 8004e24:	42a9      	cmp	r1, r5
 8004e26:	d905      	bls.n	8004e34 <_malloc_r+0x28>
 8004e28:	230c      	movs	r3, #12
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	2600      	movs	r6, #0
 8004e2e:	4630      	mov	r0, r6
 8004e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e34:	4e2e      	ldr	r6, [pc, #184]	; (8004ef0 <_malloc_r+0xe4>)
 8004e36:	f000 fd3d 	bl	80058b4 <__malloc_lock>
 8004e3a:	6833      	ldr	r3, [r6, #0]
 8004e3c:	461c      	mov	r4, r3
 8004e3e:	bb34      	cbnz	r4, 8004e8e <_malloc_r+0x82>
 8004e40:	4629      	mov	r1, r5
 8004e42:	4638      	mov	r0, r7
 8004e44:	f7ff ffc2 	bl	8004dcc <sbrk_aligned>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	d14d      	bne.n	8004eea <_malloc_r+0xde>
 8004e4e:	6834      	ldr	r4, [r6, #0]
 8004e50:	4626      	mov	r6, r4
 8004e52:	2e00      	cmp	r6, #0
 8004e54:	d140      	bne.n	8004ed8 <_malloc_r+0xcc>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	4631      	mov	r1, r6
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	eb04 0803 	add.w	r8, r4, r3
 8004e60:	f000 fb7e 	bl	8005560 <_sbrk_r>
 8004e64:	4580      	cmp	r8, r0
 8004e66:	d13a      	bne.n	8004ede <_malloc_r+0xd2>
 8004e68:	6821      	ldr	r1, [r4, #0]
 8004e6a:	3503      	adds	r5, #3
 8004e6c:	1a6d      	subs	r5, r5, r1
 8004e6e:	f025 0503 	bic.w	r5, r5, #3
 8004e72:	3508      	adds	r5, #8
 8004e74:	2d0c      	cmp	r5, #12
 8004e76:	bf38      	it	cc
 8004e78:	250c      	movcc	r5, #12
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	f7ff ffa5 	bl	8004dcc <sbrk_aligned>
 8004e82:	3001      	adds	r0, #1
 8004e84:	d02b      	beq.n	8004ede <_malloc_r+0xd2>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	442b      	add	r3, r5
 8004e8a:	6023      	str	r3, [r4, #0]
 8004e8c:	e00e      	b.n	8004eac <_malloc_r+0xa0>
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	1b52      	subs	r2, r2, r5
 8004e92:	d41e      	bmi.n	8004ed2 <_malloc_r+0xc6>
 8004e94:	2a0b      	cmp	r2, #11
 8004e96:	d916      	bls.n	8004ec6 <_malloc_r+0xba>
 8004e98:	1961      	adds	r1, r4, r5
 8004e9a:	42a3      	cmp	r3, r4
 8004e9c:	6025      	str	r5, [r4, #0]
 8004e9e:	bf18      	it	ne
 8004ea0:	6059      	strne	r1, [r3, #4]
 8004ea2:	6863      	ldr	r3, [r4, #4]
 8004ea4:	bf08      	it	eq
 8004ea6:	6031      	streq	r1, [r6, #0]
 8004ea8:	5162      	str	r2, [r4, r5]
 8004eaa:	604b      	str	r3, [r1, #4]
 8004eac:	4638      	mov	r0, r7
 8004eae:	f104 060b 	add.w	r6, r4, #11
 8004eb2:	f000 fd05 	bl	80058c0 <__malloc_unlock>
 8004eb6:	f026 0607 	bic.w	r6, r6, #7
 8004eba:	1d23      	adds	r3, r4, #4
 8004ebc:	1af2      	subs	r2, r6, r3
 8004ebe:	d0b6      	beq.n	8004e2e <_malloc_r+0x22>
 8004ec0:	1b9b      	subs	r3, r3, r6
 8004ec2:	50a3      	str	r3, [r4, r2]
 8004ec4:	e7b3      	b.n	8004e2e <_malloc_r+0x22>
 8004ec6:	6862      	ldr	r2, [r4, #4]
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	bf0c      	ite	eq
 8004ecc:	6032      	streq	r2, [r6, #0]
 8004ece:	605a      	strne	r2, [r3, #4]
 8004ed0:	e7ec      	b.n	8004eac <_malloc_r+0xa0>
 8004ed2:	4623      	mov	r3, r4
 8004ed4:	6864      	ldr	r4, [r4, #4]
 8004ed6:	e7b2      	b.n	8004e3e <_malloc_r+0x32>
 8004ed8:	4634      	mov	r4, r6
 8004eda:	6876      	ldr	r6, [r6, #4]
 8004edc:	e7b9      	b.n	8004e52 <_malloc_r+0x46>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	f000 fcec 	bl	80058c0 <__malloc_unlock>
 8004ee8:	e7a1      	b.n	8004e2e <_malloc_r+0x22>
 8004eea:	6025      	str	r5, [r4, #0]
 8004eec:	e7de      	b.n	8004eac <_malloc_r+0xa0>
 8004eee:	bf00      	nop
 8004ef0:	20000270 	.word	0x20000270

08004ef4 <_sungetc_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	1c4b      	adds	r3, r1, #1
 8004ef8:	4614      	mov	r4, r2
 8004efa:	d103      	bne.n	8004f04 <_sungetc_r+0x10>
 8004efc:	f04f 35ff 	mov.w	r5, #4294967295
 8004f00:	4628      	mov	r0, r5
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
 8004f04:	8993      	ldrh	r3, [r2, #12]
 8004f06:	f023 0320 	bic.w	r3, r3, #32
 8004f0a:	8193      	strh	r3, [r2, #12]
 8004f0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f0e:	6852      	ldr	r2, [r2, #4]
 8004f10:	b2cd      	uxtb	r5, r1
 8004f12:	b18b      	cbz	r3, 8004f38 <_sungetc_r+0x44>
 8004f14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f16:	4293      	cmp	r3, r2
 8004f18:	dd08      	ble.n	8004f2c <_sungetc_r+0x38>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	6022      	str	r2, [r4, #0]
 8004f20:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004f24:	6863      	ldr	r3, [r4, #4]
 8004f26:	3301      	adds	r3, #1
 8004f28:	6063      	str	r3, [r4, #4]
 8004f2a:	e7e9      	b.n	8004f00 <_sungetc_r+0xc>
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	f000 fc57 	bl	80057e0 <__submore>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d0f1      	beq.n	8004f1a <_sungetc_r+0x26>
 8004f36:	e7e1      	b.n	8004efc <_sungetc_r+0x8>
 8004f38:	6921      	ldr	r1, [r4, #16]
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	b151      	cbz	r1, 8004f54 <_sungetc_r+0x60>
 8004f3e:	4299      	cmp	r1, r3
 8004f40:	d208      	bcs.n	8004f54 <_sungetc_r+0x60>
 8004f42:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004f46:	42a9      	cmp	r1, r5
 8004f48:	d104      	bne.n	8004f54 <_sungetc_r+0x60>
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	3201      	adds	r2, #1
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	6062      	str	r2, [r4, #4]
 8004f52:	e7d5      	b.n	8004f00 <_sungetc_r+0xc>
 8004f54:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f5c:	6363      	str	r3, [r4, #52]	; 0x34
 8004f5e:	2303      	movs	r3, #3
 8004f60:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f62:	4623      	mov	r3, r4
 8004f64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e7dc      	b.n	8004f28 <_sungetc_r+0x34>

08004f6e <__ssrefill_r>:
 8004f6e:	b510      	push	{r4, lr}
 8004f70:	460c      	mov	r4, r1
 8004f72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004f74:	b169      	cbz	r1, 8004f92 <__ssrefill_r+0x24>
 8004f76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f7a:	4299      	cmp	r1, r3
 8004f7c:	d001      	beq.n	8004f82 <__ssrefill_r+0x14>
 8004f7e:	f7ff fed9 	bl	8004d34 <_free_r>
 8004f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f84:	6063      	str	r3, [r4, #4]
 8004f86:	2000      	movs	r0, #0
 8004f88:	6360      	str	r0, [r4, #52]	; 0x34
 8004f8a:	b113      	cbz	r3, 8004f92 <__ssrefill_r+0x24>
 8004f8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	bd10      	pop	{r4, pc}
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	2300      	movs	r3, #0
 8004f98:	6063      	str	r3, [r4, #4]
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	f043 0320 	orr.w	r3, r3, #32
 8004fa0:	81a3      	strh	r3, [r4, #12]
 8004fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa6:	e7f3      	b.n	8004f90 <__ssrefill_r+0x22>

08004fa8 <__ssvfiscanf_r>:
 8004fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fac:	460c      	mov	r4, r1
 8004fae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004fb8:	49a6      	ldr	r1, [pc, #664]	; (8005254 <__ssvfiscanf_r+0x2ac>)
 8004fba:	91a0      	str	r1, [sp, #640]	; 0x280
 8004fbc:	f10d 0804 	add.w	r8, sp, #4
 8004fc0:	49a5      	ldr	r1, [pc, #660]	; (8005258 <__ssvfiscanf_r+0x2b0>)
 8004fc2:	4fa6      	ldr	r7, [pc, #664]	; (800525c <__ssvfiscanf_r+0x2b4>)
 8004fc4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005260 <__ssvfiscanf_r+0x2b8>
 8004fc8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004fcc:	4606      	mov	r6, r0
 8004fce:	91a1      	str	r1, [sp, #644]	; 0x284
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	7813      	ldrb	r3, [r2, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 815a 	beq.w	800528e <__ssvfiscanf_r+0x2e6>
 8004fda:	5dd9      	ldrb	r1, [r3, r7]
 8004fdc:	f011 0108 	ands.w	r1, r1, #8
 8004fe0:	f102 0501 	add.w	r5, r2, #1
 8004fe4:	d019      	beq.n	800501a <__ssvfiscanf_r+0x72>
 8004fe6:	6863      	ldr	r3, [r4, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dd0f      	ble.n	800500c <__ssvfiscanf_r+0x64>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	781a      	ldrb	r2, [r3, #0]
 8004ff0:	5cba      	ldrb	r2, [r7, r2]
 8004ff2:	0712      	lsls	r2, r2, #28
 8004ff4:	d401      	bmi.n	8004ffa <__ssvfiscanf_r+0x52>
 8004ff6:	462a      	mov	r2, r5
 8004ff8:	e7eb      	b.n	8004fd2 <__ssvfiscanf_r+0x2a>
 8004ffa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004ffc:	3201      	adds	r2, #1
 8004ffe:	9245      	str	r2, [sp, #276]	; 0x114
 8005000:	6862      	ldr	r2, [r4, #4]
 8005002:	3301      	adds	r3, #1
 8005004:	3a01      	subs	r2, #1
 8005006:	6062      	str	r2, [r4, #4]
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	e7ec      	b.n	8004fe6 <__ssvfiscanf_r+0x3e>
 800500c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800500e:	4621      	mov	r1, r4
 8005010:	4630      	mov	r0, r6
 8005012:	4798      	blx	r3
 8005014:	2800      	cmp	r0, #0
 8005016:	d0e9      	beq.n	8004fec <__ssvfiscanf_r+0x44>
 8005018:	e7ed      	b.n	8004ff6 <__ssvfiscanf_r+0x4e>
 800501a:	2b25      	cmp	r3, #37	; 0x25
 800501c:	d012      	beq.n	8005044 <__ssvfiscanf_r+0x9c>
 800501e:	469a      	mov	sl, r3
 8005020:	6863      	ldr	r3, [r4, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f340 8091 	ble.w	800514a <__ssvfiscanf_r+0x1a2>
 8005028:	6822      	ldr	r2, [r4, #0]
 800502a:	7813      	ldrb	r3, [r2, #0]
 800502c:	4553      	cmp	r3, sl
 800502e:	f040 812e 	bne.w	800528e <__ssvfiscanf_r+0x2e6>
 8005032:	6863      	ldr	r3, [r4, #4]
 8005034:	3b01      	subs	r3, #1
 8005036:	6063      	str	r3, [r4, #4]
 8005038:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800503a:	3201      	adds	r2, #1
 800503c:	3301      	adds	r3, #1
 800503e:	6022      	str	r2, [r4, #0]
 8005040:	9345      	str	r3, [sp, #276]	; 0x114
 8005042:	e7d8      	b.n	8004ff6 <__ssvfiscanf_r+0x4e>
 8005044:	9141      	str	r1, [sp, #260]	; 0x104
 8005046:	9143      	str	r1, [sp, #268]	; 0x10c
 8005048:	7853      	ldrb	r3, [r2, #1]
 800504a:	2b2a      	cmp	r3, #42	; 0x2a
 800504c:	bf02      	ittt	eq
 800504e:	2310      	moveq	r3, #16
 8005050:	1c95      	addeq	r5, r2, #2
 8005052:	9341      	streq	r3, [sp, #260]	; 0x104
 8005054:	220a      	movs	r2, #10
 8005056:	46aa      	mov	sl, r5
 8005058:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800505c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005060:	2b09      	cmp	r3, #9
 8005062:	d91d      	bls.n	80050a0 <__ssvfiscanf_r+0xf8>
 8005064:	487e      	ldr	r0, [pc, #504]	; (8005260 <__ssvfiscanf_r+0x2b8>)
 8005066:	2203      	movs	r2, #3
 8005068:	f7fb f8ca 	bl	8000200 <memchr>
 800506c:	b140      	cbz	r0, 8005080 <__ssvfiscanf_r+0xd8>
 800506e:	2301      	movs	r3, #1
 8005070:	eba0 0009 	sub.w	r0, r0, r9
 8005074:	fa03 f000 	lsl.w	r0, r3, r0
 8005078:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800507a:	4318      	orrs	r0, r3
 800507c:	9041      	str	r0, [sp, #260]	; 0x104
 800507e:	4655      	mov	r5, sl
 8005080:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005084:	2b78      	cmp	r3, #120	; 0x78
 8005086:	d806      	bhi.n	8005096 <__ssvfiscanf_r+0xee>
 8005088:	2b57      	cmp	r3, #87	; 0x57
 800508a:	d810      	bhi.n	80050ae <__ssvfiscanf_r+0x106>
 800508c:	2b25      	cmp	r3, #37	; 0x25
 800508e:	d0c6      	beq.n	800501e <__ssvfiscanf_r+0x76>
 8005090:	d856      	bhi.n	8005140 <__ssvfiscanf_r+0x198>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d064      	beq.n	8005160 <__ssvfiscanf_r+0x1b8>
 8005096:	2303      	movs	r3, #3
 8005098:	9347      	str	r3, [sp, #284]	; 0x11c
 800509a:	230a      	movs	r3, #10
 800509c:	9342      	str	r3, [sp, #264]	; 0x108
 800509e:	e071      	b.n	8005184 <__ssvfiscanf_r+0x1dc>
 80050a0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80050a2:	fb02 1103 	mla	r1, r2, r3, r1
 80050a6:	3930      	subs	r1, #48	; 0x30
 80050a8:	9143      	str	r1, [sp, #268]	; 0x10c
 80050aa:	4655      	mov	r5, sl
 80050ac:	e7d3      	b.n	8005056 <__ssvfiscanf_r+0xae>
 80050ae:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80050b2:	2a20      	cmp	r2, #32
 80050b4:	d8ef      	bhi.n	8005096 <__ssvfiscanf_r+0xee>
 80050b6:	a101      	add	r1, pc, #4	; (adr r1, 80050bc <__ssvfiscanf_r+0x114>)
 80050b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80050bc:	0800516f 	.word	0x0800516f
 80050c0:	08005097 	.word	0x08005097
 80050c4:	08005097 	.word	0x08005097
 80050c8:	080051cd 	.word	0x080051cd
 80050cc:	08005097 	.word	0x08005097
 80050d0:	08005097 	.word	0x08005097
 80050d4:	08005097 	.word	0x08005097
 80050d8:	08005097 	.word	0x08005097
 80050dc:	08005097 	.word	0x08005097
 80050e0:	08005097 	.word	0x08005097
 80050e4:	08005097 	.word	0x08005097
 80050e8:	080051e3 	.word	0x080051e3
 80050ec:	080051b9 	.word	0x080051b9
 80050f0:	08005147 	.word	0x08005147
 80050f4:	08005147 	.word	0x08005147
 80050f8:	08005147 	.word	0x08005147
 80050fc:	08005097 	.word	0x08005097
 8005100:	080051bd 	.word	0x080051bd
 8005104:	08005097 	.word	0x08005097
 8005108:	08005097 	.word	0x08005097
 800510c:	08005097 	.word	0x08005097
 8005110:	08005097 	.word	0x08005097
 8005114:	080051f3 	.word	0x080051f3
 8005118:	080051c5 	.word	0x080051c5
 800511c:	08005167 	.word	0x08005167
 8005120:	08005097 	.word	0x08005097
 8005124:	08005097 	.word	0x08005097
 8005128:	080051ef 	.word	0x080051ef
 800512c:	08005097 	.word	0x08005097
 8005130:	080051b9 	.word	0x080051b9
 8005134:	08005097 	.word	0x08005097
 8005138:	08005097 	.word	0x08005097
 800513c:	0800516f 	.word	0x0800516f
 8005140:	3b45      	subs	r3, #69	; 0x45
 8005142:	2b02      	cmp	r3, #2
 8005144:	d8a7      	bhi.n	8005096 <__ssvfiscanf_r+0xee>
 8005146:	2305      	movs	r3, #5
 8005148:	e01b      	b.n	8005182 <__ssvfiscanf_r+0x1da>
 800514a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800514c:	4621      	mov	r1, r4
 800514e:	4630      	mov	r0, r6
 8005150:	4798      	blx	r3
 8005152:	2800      	cmp	r0, #0
 8005154:	f43f af68 	beq.w	8005028 <__ssvfiscanf_r+0x80>
 8005158:	9844      	ldr	r0, [sp, #272]	; 0x110
 800515a:	2800      	cmp	r0, #0
 800515c:	f040 808d 	bne.w	800527a <__ssvfiscanf_r+0x2d2>
 8005160:	f04f 30ff 	mov.w	r0, #4294967295
 8005164:	e08f      	b.n	8005286 <__ssvfiscanf_r+0x2de>
 8005166:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005168:	f042 0220 	orr.w	r2, r2, #32
 800516c:	9241      	str	r2, [sp, #260]	; 0x104
 800516e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005174:	9241      	str	r2, [sp, #260]	; 0x104
 8005176:	2210      	movs	r2, #16
 8005178:	2b6f      	cmp	r3, #111	; 0x6f
 800517a:	9242      	str	r2, [sp, #264]	; 0x108
 800517c:	bf34      	ite	cc
 800517e:	2303      	movcc	r3, #3
 8005180:	2304      	movcs	r3, #4
 8005182:	9347      	str	r3, [sp, #284]	; 0x11c
 8005184:	6863      	ldr	r3, [r4, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	dd42      	ble.n	8005210 <__ssvfiscanf_r+0x268>
 800518a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800518c:	0659      	lsls	r1, r3, #25
 800518e:	d404      	bmi.n	800519a <__ssvfiscanf_r+0x1f2>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	781a      	ldrb	r2, [r3, #0]
 8005194:	5cba      	ldrb	r2, [r7, r2]
 8005196:	0712      	lsls	r2, r2, #28
 8005198:	d441      	bmi.n	800521e <__ssvfiscanf_r+0x276>
 800519a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800519c:	2b02      	cmp	r3, #2
 800519e:	dc50      	bgt.n	8005242 <__ssvfiscanf_r+0x29a>
 80051a0:	466b      	mov	r3, sp
 80051a2:	4622      	mov	r2, r4
 80051a4:	a941      	add	r1, sp, #260	; 0x104
 80051a6:	4630      	mov	r0, r6
 80051a8:	f000 f876 	bl	8005298 <_scanf_chars>
 80051ac:	2801      	cmp	r0, #1
 80051ae:	d06e      	beq.n	800528e <__ssvfiscanf_r+0x2e6>
 80051b0:	2802      	cmp	r0, #2
 80051b2:	f47f af20 	bne.w	8004ff6 <__ssvfiscanf_r+0x4e>
 80051b6:	e7cf      	b.n	8005158 <__ssvfiscanf_r+0x1b0>
 80051b8:	220a      	movs	r2, #10
 80051ba:	e7dd      	b.n	8005178 <__ssvfiscanf_r+0x1d0>
 80051bc:	2300      	movs	r3, #0
 80051be:	9342      	str	r3, [sp, #264]	; 0x108
 80051c0:	2303      	movs	r3, #3
 80051c2:	e7de      	b.n	8005182 <__ssvfiscanf_r+0x1da>
 80051c4:	2308      	movs	r3, #8
 80051c6:	9342      	str	r3, [sp, #264]	; 0x108
 80051c8:	2304      	movs	r3, #4
 80051ca:	e7da      	b.n	8005182 <__ssvfiscanf_r+0x1da>
 80051cc:	4629      	mov	r1, r5
 80051ce:	4640      	mov	r0, r8
 80051d0:	f000 f9d6 	bl	8005580 <__sccl>
 80051d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80051d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051da:	9341      	str	r3, [sp, #260]	; 0x104
 80051dc:	4605      	mov	r5, r0
 80051de:	2301      	movs	r3, #1
 80051e0:	e7cf      	b.n	8005182 <__ssvfiscanf_r+0x1da>
 80051e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80051e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e8:	9341      	str	r3, [sp, #260]	; 0x104
 80051ea:	2300      	movs	r3, #0
 80051ec:	e7c9      	b.n	8005182 <__ssvfiscanf_r+0x1da>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e7c7      	b.n	8005182 <__ssvfiscanf_r+0x1da>
 80051f2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80051f4:	06c3      	lsls	r3, r0, #27
 80051f6:	f53f aefe 	bmi.w	8004ff6 <__ssvfiscanf_r+0x4e>
 80051fa:	9b00      	ldr	r3, [sp, #0]
 80051fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80051fe:	1d19      	adds	r1, r3, #4
 8005200:	9100      	str	r1, [sp, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f010 0f01 	tst.w	r0, #1
 8005208:	bf14      	ite	ne
 800520a:	801a      	strhne	r2, [r3, #0]
 800520c:	601a      	streq	r2, [r3, #0]
 800520e:	e6f2      	b.n	8004ff6 <__ssvfiscanf_r+0x4e>
 8005210:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005212:	4621      	mov	r1, r4
 8005214:	4630      	mov	r0, r6
 8005216:	4798      	blx	r3
 8005218:	2800      	cmp	r0, #0
 800521a:	d0b6      	beq.n	800518a <__ssvfiscanf_r+0x1e2>
 800521c:	e79c      	b.n	8005158 <__ssvfiscanf_r+0x1b0>
 800521e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005220:	3201      	adds	r2, #1
 8005222:	9245      	str	r2, [sp, #276]	; 0x114
 8005224:	6862      	ldr	r2, [r4, #4]
 8005226:	3a01      	subs	r2, #1
 8005228:	2a00      	cmp	r2, #0
 800522a:	6062      	str	r2, [r4, #4]
 800522c:	dd02      	ble.n	8005234 <__ssvfiscanf_r+0x28c>
 800522e:	3301      	adds	r3, #1
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	e7ad      	b.n	8005190 <__ssvfiscanf_r+0x1e8>
 8005234:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005236:	4621      	mov	r1, r4
 8005238:	4630      	mov	r0, r6
 800523a:	4798      	blx	r3
 800523c:	2800      	cmp	r0, #0
 800523e:	d0a7      	beq.n	8005190 <__ssvfiscanf_r+0x1e8>
 8005240:	e78a      	b.n	8005158 <__ssvfiscanf_r+0x1b0>
 8005242:	2b04      	cmp	r3, #4
 8005244:	dc0e      	bgt.n	8005264 <__ssvfiscanf_r+0x2bc>
 8005246:	466b      	mov	r3, sp
 8005248:	4622      	mov	r2, r4
 800524a:	a941      	add	r1, sp, #260	; 0x104
 800524c:	4630      	mov	r0, r6
 800524e:	f000 f87d 	bl	800534c <_scanf_i>
 8005252:	e7ab      	b.n	80051ac <__ssvfiscanf_r+0x204>
 8005254:	08004ef5 	.word	0x08004ef5
 8005258:	08004f6f 	.word	0x08004f6f
 800525c:	08005ad0 	.word	0x08005ad0
 8005260:	08005ab0 	.word	0x08005ab0
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <__ssvfiscanf_r+0x2ec>)
 8005266:	2b00      	cmp	r3, #0
 8005268:	f43f aec5 	beq.w	8004ff6 <__ssvfiscanf_r+0x4e>
 800526c:	466b      	mov	r3, sp
 800526e:	4622      	mov	r2, r4
 8005270:	a941      	add	r1, sp, #260	; 0x104
 8005272:	4630      	mov	r0, r6
 8005274:	f3af 8000 	nop.w
 8005278:	e798      	b.n	80051ac <__ssvfiscanf_r+0x204>
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005280:	bf18      	it	ne
 8005282:	f04f 30ff 	movne.w	r0, #4294967295
 8005286:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800528a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800528e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005290:	e7f9      	b.n	8005286 <__ssvfiscanf_r+0x2de>
 8005292:	bf00      	nop
 8005294:	00000000 	.word	0x00000000

08005298 <_scanf_chars>:
 8005298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800529c:	4615      	mov	r5, r2
 800529e:	688a      	ldr	r2, [r1, #8]
 80052a0:	4680      	mov	r8, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	b932      	cbnz	r2, 80052b4 <_scanf_chars+0x1c>
 80052a6:	698a      	ldr	r2, [r1, #24]
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	bf0c      	ite	eq
 80052ac:	2201      	moveq	r2, #1
 80052ae:	f04f 32ff 	movne.w	r2, #4294967295
 80052b2:	608a      	str	r2, [r1, #8]
 80052b4:	6822      	ldr	r2, [r4, #0]
 80052b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005348 <_scanf_chars+0xb0>
 80052ba:	06d1      	lsls	r1, r2, #27
 80052bc:	bf5f      	itttt	pl
 80052be:	681a      	ldrpl	r2, [r3, #0]
 80052c0:	1d11      	addpl	r1, r2, #4
 80052c2:	6019      	strpl	r1, [r3, #0]
 80052c4:	6816      	ldrpl	r6, [r2, #0]
 80052c6:	2700      	movs	r7, #0
 80052c8:	69a0      	ldr	r0, [r4, #24]
 80052ca:	b188      	cbz	r0, 80052f0 <_scanf_chars+0x58>
 80052cc:	2801      	cmp	r0, #1
 80052ce:	d107      	bne.n	80052e0 <_scanf_chars+0x48>
 80052d0:	682a      	ldr	r2, [r5, #0]
 80052d2:	7811      	ldrb	r1, [r2, #0]
 80052d4:	6962      	ldr	r2, [r4, #20]
 80052d6:	5c52      	ldrb	r2, [r2, r1]
 80052d8:	b952      	cbnz	r2, 80052f0 <_scanf_chars+0x58>
 80052da:	2f00      	cmp	r7, #0
 80052dc:	d031      	beq.n	8005342 <_scanf_chars+0xaa>
 80052de:	e022      	b.n	8005326 <_scanf_chars+0x8e>
 80052e0:	2802      	cmp	r0, #2
 80052e2:	d120      	bne.n	8005326 <_scanf_chars+0x8e>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80052ec:	071b      	lsls	r3, r3, #28
 80052ee:	d41a      	bmi.n	8005326 <_scanf_chars+0x8e>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	06da      	lsls	r2, r3, #27
 80052f4:	bf5e      	ittt	pl
 80052f6:	682b      	ldrpl	r3, [r5, #0]
 80052f8:	781b      	ldrbpl	r3, [r3, #0]
 80052fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80052fe:	682a      	ldr	r2, [r5, #0]
 8005300:	686b      	ldr	r3, [r5, #4]
 8005302:	3201      	adds	r2, #1
 8005304:	602a      	str	r2, [r5, #0]
 8005306:	68a2      	ldr	r2, [r4, #8]
 8005308:	3b01      	subs	r3, #1
 800530a:	3a01      	subs	r2, #1
 800530c:	606b      	str	r3, [r5, #4]
 800530e:	3701      	adds	r7, #1
 8005310:	60a2      	str	r2, [r4, #8]
 8005312:	b142      	cbz	r2, 8005326 <_scanf_chars+0x8e>
 8005314:	2b00      	cmp	r3, #0
 8005316:	dcd7      	bgt.n	80052c8 <_scanf_chars+0x30>
 8005318:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800531c:	4629      	mov	r1, r5
 800531e:	4640      	mov	r0, r8
 8005320:	4798      	blx	r3
 8005322:	2800      	cmp	r0, #0
 8005324:	d0d0      	beq.n	80052c8 <_scanf_chars+0x30>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	f013 0310 	ands.w	r3, r3, #16
 800532c:	d105      	bne.n	800533a <_scanf_chars+0xa2>
 800532e:	68e2      	ldr	r2, [r4, #12]
 8005330:	3201      	adds	r2, #1
 8005332:	60e2      	str	r2, [r4, #12]
 8005334:	69a2      	ldr	r2, [r4, #24]
 8005336:	b102      	cbz	r2, 800533a <_scanf_chars+0xa2>
 8005338:	7033      	strb	r3, [r6, #0]
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	443b      	add	r3, r7
 800533e:	6123      	str	r3, [r4, #16]
 8005340:	2000      	movs	r0, #0
 8005342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005346:	bf00      	nop
 8005348:	08005ad0 	.word	0x08005ad0

0800534c <_scanf_i>:
 800534c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005350:	4698      	mov	r8, r3
 8005352:	4b76      	ldr	r3, [pc, #472]	; (800552c <_scanf_i+0x1e0>)
 8005354:	460c      	mov	r4, r1
 8005356:	4682      	mov	sl, r0
 8005358:	4616      	mov	r6, r2
 800535a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800535e:	b087      	sub	sp, #28
 8005360:	ab03      	add	r3, sp, #12
 8005362:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005366:	4b72      	ldr	r3, [pc, #456]	; (8005530 <_scanf_i+0x1e4>)
 8005368:	69a1      	ldr	r1, [r4, #24]
 800536a:	4a72      	ldr	r2, [pc, #456]	; (8005534 <_scanf_i+0x1e8>)
 800536c:	2903      	cmp	r1, #3
 800536e:	bf18      	it	ne
 8005370:	461a      	movne	r2, r3
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	9201      	str	r2, [sp, #4]
 8005376:	1e5a      	subs	r2, r3, #1
 8005378:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800537c:	bf88      	it	hi
 800537e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005382:	4627      	mov	r7, r4
 8005384:	bf82      	ittt	hi
 8005386:	eb03 0905 	addhi.w	r9, r3, r5
 800538a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800538e:	60a3      	strhi	r3, [r4, #8]
 8005390:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005394:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005398:	bf98      	it	ls
 800539a:	f04f 0900 	movls.w	r9, #0
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	463d      	mov	r5, r7
 80053a2:	f04f 0b00 	mov.w	fp, #0
 80053a6:	6831      	ldr	r1, [r6, #0]
 80053a8:	ab03      	add	r3, sp, #12
 80053aa:	7809      	ldrb	r1, [r1, #0]
 80053ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f7fa ff25 	bl	8000200 <memchr>
 80053b6:	b328      	cbz	r0, 8005404 <_scanf_i+0xb8>
 80053b8:	f1bb 0f01 	cmp.w	fp, #1
 80053bc:	d159      	bne.n	8005472 <_scanf_i+0x126>
 80053be:	6862      	ldr	r2, [r4, #4]
 80053c0:	b92a      	cbnz	r2, 80053ce <_scanf_i+0x82>
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	2308      	movs	r3, #8
 80053c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ca:	6063      	str	r3, [r4, #4]
 80053cc:	6022      	str	r2, [r4, #0]
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80053d4:	6022      	str	r2, [r4, #0]
 80053d6:	68a2      	ldr	r2, [r4, #8]
 80053d8:	1e51      	subs	r1, r2, #1
 80053da:	60a1      	str	r1, [r4, #8]
 80053dc:	b192      	cbz	r2, 8005404 <_scanf_i+0xb8>
 80053de:	6832      	ldr	r2, [r6, #0]
 80053e0:	1c51      	adds	r1, r2, #1
 80053e2:	6031      	str	r1, [r6, #0]
 80053e4:	7812      	ldrb	r2, [r2, #0]
 80053e6:	f805 2b01 	strb.w	r2, [r5], #1
 80053ea:	6872      	ldr	r2, [r6, #4]
 80053ec:	3a01      	subs	r2, #1
 80053ee:	2a00      	cmp	r2, #0
 80053f0:	6072      	str	r2, [r6, #4]
 80053f2:	dc07      	bgt.n	8005404 <_scanf_i+0xb8>
 80053f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80053f8:	4631      	mov	r1, r6
 80053fa:	4650      	mov	r0, sl
 80053fc:	4790      	blx	r2
 80053fe:	2800      	cmp	r0, #0
 8005400:	f040 8085 	bne.w	800550e <_scanf_i+0x1c2>
 8005404:	f10b 0b01 	add.w	fp, fp, #1
 8005408:	f1bb 0f03 	cmp.w	fp, #3
 800540c:	d1cb      	bne.n	80053a6 <_scanf_i+0x5a>
 800540e:	6863      	ldr	r3, [r4, #4]
 8005410:	b90b      	cbnz	r3, 8005416 <_scanf_i+0xca>
 8005412:	230a      	movs	r3, #10
 8005414:	6063      	str	r3, [r4, #4]
 8005416:	6863      	ldr	r3, [r4, #4]
 8005418:	4947      	ldr	r1, [pc, #284]	; (8005538 <_scanf_i+0x1ec>)
 800541a:	6960      	ldr	r0, [r4, #20]
 800541c:	1ac9      	subs	r1, r1, r3
 800541e:	f000 f8af 	bl	8005580 <__sccl>
 8005422:	f04f 0b00 	mov.w	fp, #0
 8005426:	68a3      	ldr	r3, [r4, #8]
 8005428:	6822      	ldr	r2, [r4, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d03d      	beq.n	80054aa <_scanf_i+0x15e>
 800542e:	6831      	ldr	r1, [r6, #0]
 8005430:	6960      	ldr	r0, [r4, #20]
 8005432:	f891 c000 	ldrb.w	ip, [r1]
 8005436:	f810 000c 	ldrb.w	r0, [r0, ip]
 800543a:	2800      	cmp	r0, #0
 800543c:	d035      	beq.n	80054aa <_scanf_i+0x15e>
 800543e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005442:	d124      	bne.n	800548e <_scanf_i+0x142>
 8005444:	0510      	lsls	r0, r2, #20
 8005446:	d522      	bpl.n	800548e <_scanf_i+0x142>
 8005448:	f10b 0b01 	add.w	fp, fp, #1
 800544c:	f1b9 0f00 	cmp.w	r9, #0
 8005450:	d003      	beq.n	800545a <_scanf_i+0x10e>
 8005452:	3301      	adds	r3, #1
 8005454:	f109 39ff 	add.w	r9, r9, #4294967295
 8005458:	60a3      	str	r3, [r4, #8]
 800545a:	6873      	ldr	r3, [r6, #4]
 800545c:	3b01      	subs	r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	6073      	str	r3, [r6, #4]
 8005462:	dd1b      	ble.n	800549c <_scanf_i+0x150>
 8005464:	6833      	ldr	r3, [r6, #0]
 8005466:	3301      	adds	r3, #1
 8005468:	6033      	str	r3, [r6, #0]
 800546a:	68a3      	ldr	r3, [r4, #8]
 800546c:	3b01      	subs	r3, #1
 800546e:	60a3      	str	r3, [r4, #8]
 8005470:	e7d9      	b.n	8005426 <_scanf_i+0xda>
 8005472:	f1bb 0f02 	cmp.w	fp, #2
 8005476:	d1ae      	bne.n	80053d6 <_scanf_i+0x8a>
 8005478:	6822      	ldr	r2, [r4, #0]
 800547a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800547e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005482:	d1bf      	bne.n	8005404 <_scanf_i+0xb8>
 8005484:	2310      	movs	r3, #16
 8005486:	6063      	str	r3, [r4, #4]
 8005488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548c:	e7a2      	b.n	80053d4 <_scanf_i+0x88>
 800548e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005492:	6022      	str	r2, [r4, #0]
 8005494:	780b      	ldrb	r3, [r1, #0]
 8005496:	f805 3b01 	strb.w	r3, [r5], #1
 800549a:	e7de      	b.n	800545a <_scanf_i+0x10e>
 800549c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80054a0:	4631      	mov	r1, r6
 80054a2:	4650      	mov	r0, sl
 80054a4:	4798      	blx	r3
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d0df      	beq.n	800546a <_scanf_i+0x11e>
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	05db      	lsls	r3, r3, #23
 80054ae:	d50d      	bpl.n	80054cc <_scanf_i+0x180>
 80054b0:	42bd      	cmp	r5, r7
 80054b2:	d909      	bls.n	80054c8 <_scanf_i+0x17c>
 80054b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80054b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054bc:	4632      	mov	r2, r6
 80054be:	4650      	mov	r0, sl
 80054c0:	4798      	blx	r3
 80054c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80054c6:	464d      	mov	r5, r9
 80054c8:	42bd      	cmp	r5, r7
 80054ca:	d02d      	beq.n	8005528 <_scanf_i+0x1dc>
 80054cc:	6822      	ldr	r2, [r4, #0]
 80054ce:	f012 0210 	ands.w	r2, r2, #16
 80054d2:	d113      	bne.n	80054fc <_scanf_i+0x1b0>
 80054d4:	702a      	strb	r2, [r5, #0]
 80054d6:	6863      	ldr	r3, [r4, #4]
 80054d8:	9e01      	ldr	r6, [sp, #4]
 80054da:	4639      	mov	r1, r7
 80054dc:	4650      	mov	r0, sl
 80054de:	47b0      	blx	r6
 80054e0:	6821      	ldr	r1, [r4, #0]
 80054e2:	f8d8 3000 	ldr.w	r3, [r8]
 80054e6:	f011 0f20 	tst.w	r1, #32
 80054ea:	d013      	beq.n	8005514 <_scanf_i+0x1c8>
 80054ec:	1d1a      	adds	r2, r3, #4
 80054ee:	f8c8 2000 	str.w	r2, [r8]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6018      	str	r0, [r3, #0]
 80054f6:	68e3      	ldr	r3, [r4, #12]
 80054f8:	3301      	adds	r3, #1
 80054fa:	60e3      	str	r3, [r4, #12]
 80054fc:	1bed      	subs	r5, r5, r7
 80054fe:	44ab      	add	fp, r5
 8005500:	6925      	ldr	r5, [r4, #16]
 8005502:	445d      	add	r5, fp
 8005504:	6125      	str	r5, [r4, #16]
 8005506:	2000      	movs	r0, #0
 8005508:	b007      	add	sp, #28
 800550a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550e:	f04f 0b00 	mov.w	fp, #0
 8005512:	e7ca      	b.n	80054aa <_scanf_i+0x15e>
 8005514:	1d1a      	adds	r2, r3, #4
 8005516:	f8c8 2000 	str.w	r2, [r8]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f011 0f01 	tst.w	r1, #1
 8005520:	bf14      	ite	ne
 8005522:	8018      	strhne	r0, [r3, #0]
 8005524:	6018      	streq	r0, [r3, #0]
 8005526:	e7e6      	b.n	80054f6 <_scanf_i+0x1aa>
 8005528:	2001      	movs	r0, #1
 800552a:	e7ed      	b.n	8005508 <_scanf_i+0x1bc>
 800552c:	080059f8 	.word	0x080059f8
 8005530:	080057dd 	.word	0x080057dd
 8005534:	080056f5 	.word	0x080056f5
 8005538:	08005acd 	.word	0x08005acd

0800553c <_read_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d07      	ldr	r5, [pc, #28]	; (800555c <_read_r+0x20>)
 8005540:	4604      	mov	r4, r0
 8005542:	4608      	mov	r0, r1
 8005544:	4611      	mov	r1, r2
 8005546:	2200      	movs	r2, #0
 8005548:	602a      	str	r2, [r5, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	f7fb fbf2 	bl	8000d34 <_read>
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	d102      	bne.n	800555a <_read_r+0x1e>
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	b103      	cbz	r3, 800555a <_read_r+0x1e>
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	bd38      	pop	{r3, r4, r5, pc}
 800555c:	20000278 	.word	0x20000278

08005560 <_sbrk_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d06      	ldr	r5, [pc, #24]	; (800557c <_sbrk_r+0x1c>)
 8005564:	2300      	movs	r3, #0
 8005566:	4604      	mov	r4, r0
 8005568:	4608      	mov	r0, r1
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	f7fb fc34 	bl	8000dd8 <_sbrk>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_sbrk_r+0x1a>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_sbrk_r+0x1a>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	20000278 	.word	0x20000278

08005580 <__sccl>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	780b      	ldrb	r3, [r1, #0]
 8005584:	4604      	mov	r4, r0
 8005586:	2b5e      	cmp	r3, #94	; 0x5e
 8005588:	bf0b      	itete	eq
 800558a:	784b      	ldrbeq	r3, [r1, #1]
 800558c:	1c48      	addne	r0, r1, #1
 800558e:	1c88      	addeq	r0, r1, #2
 8005590:	2200      	movne	r2, #0
 8005592:	bf08      	it	eq
 8005594:	2201      	moveq	r2, #1
 8005596:	1e61      	subs	r1, r4, #1
 8005598:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800559c:	f801 2f01 	strb.w	r2, [r1, #1]!
 80055a0:	42a9      	cmp	r1, r5
 80055a2:	d1fb      	bne.n	800559c <__sccl+0x1c>
 80055a4:	b90b      	cbnz	r3, 80055aa <__sccl+0x2a>
 80055a6:	3801      	subs	r0, #1
 80055a8:	bd70      	pop	{r4, r5, r6, pc}
 80055aa:	f082 0201 	eor.w	r2, r2, #1
 80055ae:	54e2      	strb	r2, [r4, r3]
 80055b0:	4605      	mov	r5, r0
 80055b2:	4628      	mov	r0, r5
 80055b4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80055b8:	292d      	cmp	r1, #45	; 0x2d
 80055ba:	d006      	beq.n	80055ca <__sccl+0x4a>
 80055bc:	295d      	cmp	r1, #93	; 0x5d
 80055be:	d0f3      	beq.n	80055a8 <__sccl+0x28>
 80055c0:	b909      	cbnz	r1, 80055c6 <__sccl+0x46>
 80055c2:	4628      	mov	r0, r5
 80055c4:	e7f0      	b.n	80055a8 <__sccl+0x28>
 80055c6:	460b      	mov	r3, r1
 80055c8:	e7f1      	b.n	80055ae <__sccl+0x2e>
 80055ca:	786e      	ldrb	r6, [r5, #1]
 80055cc:	2e5d      	cmp	r6, #93	; 0x5d
 80055ce:	d0fa      	beq.n	80055c6 <__sccl+0x46>
 80055d0:	42b3      	cmp	r3, r6
 80055d2:	dcf8      	bgt.n	80055c6 <__sccl+0x46>
 80055d4:	3502      	adds	r5, #2
 80055d6:	4619      	mov	r1, r3
 80055d8:	3101      	adds	r1, #1
 80055da:	428e      	cmp	r6, r1
 80055dc:	5462      	strb	r2, [r4, r1]
 80055de:	dcfb      	bgt.n	80055d8 <__sccl+0x58>
 80055e0:	1af1      	subs	r1, r6, r3
 80055e2:	3901      	subs	r1, #1
 80055e4:	1c58      	adds	r0, r3, #1
 80055e6:	42b3      	cmp	r3, r6
 80055e8:	bfa8      	it	ge
 80055ea:	2100      	movge	r1, #0
 80055ec:	1843      	adds	r3, r0, r1
 80055ee:	e7e0      	b.n	80055b2 <__sccl+0x32>

080055f0 <_strtol_l.constprop.0>:
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f6:	d001      	beq.n	80055fc <_strtol_l.constprop.0+0xc>
 80055f8:	2b24      	cmp	r3, #36	; 0x24
 80055fa:	d906      	bls.n	800560a <_strtol_l.constprop.0+0x1a>
 80055fc:	f7fe ff6c 	bl	80044d8 <__errno>
 8005600:	2316      	movs	r3, #22
 8005602:	6003      	str	r3, [r0, #0]
 8005604:	2000      	movs	r0, #0
 8005606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80056f0 <_strtol_l.constprop.0+0x100>
 800560e:	460d      	mov	r5, r1
 8005610:	462e      	mov	r6, r5
 8005612:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005616:	f814 700c 	ldrb.w	r7, [r4, ip]
 800561a:	f017 0708 	ands.w	r7, r7, #8
 800561e:	d1f7      	bne.n	8005610 <_strtol_l.constprop.0+0x20>
 8005620:	2c2d      	cmp	r4, #45	; 0x2d
 8005622:	d132      	bne.n	800568a <_strtol_l.constprop.0+0x9a>
 8005624:	782c      	ldrb	r4, [r5, #0]
 8005626:	2701      	movs	r7, #1
 8005628:	1cb5      	adds	r5, r6, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d05b      	beq.n	80056e6 <_strtol_l.constprop.0+0xf6>
 800562e:	2b10      	cmp	r3, #16
 8005630:	d109      	bne.n	8005646 <_strtol_l.constprop.0+0x56>
 8005632:	2c30      	cmp	r4, #48	; 0x30
 8005634:	d107      	bne.n	8005646 <_strtol_l.constprop.0+0x56>
 8005636:	782c      	ldrb	r4, [r5, #0]
 8005638:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800563c:	2c58      	cmp	r4, #88	; 0x58
 800563e:	d14d      	bne.n	80056dc <_strtol_l.constprop.0+0xec>
 8005640:	786c      	ldrb	r4, [r5, #1]
 8005642:	2310      	movs	r3, #16
 8005644:	3502      	adds	r5, #2
 8005646:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800564a:	f108 38ff 	add.w	r8, r8, #4294967295
 800564e:	f04f 0c00 	mov.w	ip, #0
 8005652:	fbb8 f9f3 	udiv	r9, r8, r3
 8005656:	4666      	mov	r6, ip
 8005658:	fb03 8a19 	mls	sl, r3, r9, r8
 800565c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005660:	f1be 0f09 	cmp.w	lr, #9
 8005664:	d816      	bhi.n	8005694 <_strtol_l.constprop.0+0xa4>
 8005666:	4674      	mov	r4, lr
 8005668:	42a3      	cmp	r3, r4
 800566a:	dd24      	ble.n	80056b6 <_strtol_l.constprop.0+0xc6>
 800566c:	f1bc 0f00 	cmp.w	ip, #0
 8005670:	db1e      	blt.n	80056b0 <_strtol_l.constprop.0+0xc0>
 8005672:	45b1      	cmp	r9, r6
 8005674:	d31c      	bcc.n	80056b0 <_strtol_l.constprop.0+0xc0>
 8005676:	d101      	bne.n	800567c <_strtol_l.constprop.0+0x8c>
 8005678:	45a2      	cmp	sl, r4
 800567a:	db19      	blt.n	80056b0 <_strtol_l.constprop.0+0xc0>
 800567c:	fb06 4603 	mla	r6, r6, r3, r4
 8005680:	f04f 0c01 	mov.w	ip, #1
 8005684:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005688:	e7e8      	b.n	800565c <_strtol_l.constprop.0+0x6c>
 800568a:	2c2b      	cmp	r4, #43	; 0x2b
 800568c:	bf04      	itt	eq
 800568e:	782c      	ldrbeq	r4, [r5, #0]
 8005690:	1cb5      	addeq	r5, r6, #2
 8005692:	e7ca      	b.n	800562a <_strtol_l.constprop.0+0x3a>
 8005694:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005698:	f1be 0f19 	cmp.w	lr, #25
 800569c:	d801      	bhi.n	80056a2 <_strtol_l.constprop.0+0xb2>
 800569e:	3c37      	subs	r4, #55	; 0x37
 80056a0:	e7e2      	b.n	8005668 <_strtol_l.constprop.0+0x78>
 80056a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80056a6:	f1be 0f19 	cmp.w	lr, #25
 80056aa:	d804      	bhi.n	80056b6 <_strtol_l.constprop.0+0xc6>
 80056ac:	3c57      	subs	r4, #87	; 0x57
 80056ae:	e7db      	b.n	8005668 <_strtol_l.constprop.0+0x78>
 80056b0:	f04f 3cff 	mov.w	ip, #4294967295
 80056b4:	e7e6      	b.n	8005684 <_strtol_l.constprop.0+0x94>
 80056b6:	f1bc 0f00 	cmp.w	ip, #0
 80056ba:	da05      	bge.n	80056c8 <_strtol_l.constprop.0+0xd8>
 80056bc:	2322      	movs	r3, #34	; 0x22
 80056be:	6003      	str	r3, [r0, #0]
 80056c0:	4646      	mov	r6, r8
 80056c2:	b942      	cbnz	r2, 80056d6 <_strtol_l.constprop.0+0xe6>
 80056c4:	4630      	mov	r0, r6
 80056c6:	e79e      	b.n	8005606 <_strtol_l.constprop.0+0x16>
 80056c8:	b107      	cbz	r7, 80056cc <_strtol_l.constprop.0+0xdc>
 80056ca:	4276      	negs	r6, r6
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	d0f9      	beq.n	80056c4 <_strtol_l.constprop.0+0xd4>
 80056d0:	f1bc 0f00 	cmp.w	ip, #0
 80056d4:	d000      	beq.n	80056d8 <_strtol_l.constprop.0+0xe8>
 80056d6:	1e69      	subs	r1, r5, #1
 80056d8:	6011      	str	r1, [r2, #0]
 80056da:	e7f3      	b.n	80056c4 <_strtol_l.constprop.0+0xd4>
 80056dc:	2430      	movs	r4, #48	; 0x30
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1b1      	bne.n	8005646 <_strtol_l.constprop.0+0x56>
 80056e2:	2308      	movs	r3, #8
 80056e4:	e7af      	b.n	8005646 <_strtol_l.constprop.0+0x56>
 80056e6:	2c30      	cmp	r4, #48	; 0x30
 80056e8:	d0a5      	beq.n	8005636 <_strtol_l.constprop.0+0x46>
 80056ea:	230a      	movs	r3, #10
 80056ec:	e7ab      	b.n	8005646 <_strtol_l.constprop.0+0x56>
 80056ee:	bf00      	nop
 80056f0:	08005ad0 	.word	0x08005ad0

080056f4 <_strtol_r>:
 80056f4:	f7ff bf7c 	b.w	80055f0 <_strtol_l.constprop.0>

080056f8 <_strtoul_l.constprop.0>:
 80056f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056fc:	4f36      	ldr	r7, [pc, #216]	; (80057d8 <_strtoul_l.constprop.0+0xe0>)
 80056fe:	4686      	mov	lr, r0
 8005700:	460d      	mov	r5, r1
 8005702:	4628      	mov	r0, r5
 8005704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005708:	5de6      	ldrb	r6, [r4, r7]
 800570a:	f016 0608 	ands.w	r6, r6, #8
 800570e:	d1f8      	bne.n	8005702 <_strtoul_l.constprop.0+0xa>
 8005710:	2c2d      	cmp	r4, #45	; 0x2d
 8005712:	d12f      	bne.n	8005774 <_strtoul_l.constprop.0+0x7c>
 8005714:	782c      	ldrb	r4, [r5, #0]
 8005716:	2601      	movs	r6, #1
 8005718:	1c85      	adds	r5, r0, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d057      	beq.n	80057ce <_strtoul_l.constprop.0+0xd6>
 800571e:	2b10      	cmp	r3, #16
 8005720:	d109      	bne.n	8005736 <_strtoul_l.constprop.0+0x3e>
 8005722:	2c30      	cmp	r4, #48	; 0x30
 8005724:	d107      	bne.n	8005736 <_strtoul_l.constprop.0+0x3e>
 8005726:	7828      	ldrb	r0, [r5, #0]
 8005728:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800572c:	2858      	cmp	r0, #88	; 0x58
 800572e:	d149      	bne.n	80057c4 <_strtoul_l.constprop.0+0xcc>
 8005730:	786c      	ldrb	r4, [r5, #1]
 8005732:	2310      	movs	r3, #16
 8005734:	3502      	adds	r5, #2
 8005736:	f04f 38ff 	mov.w	r8, #4294967295
 800573a:	2700      	movs	r7, #0
 800573c:	fbb8 f8f3 	udiv	r8, r8, r3
 8005740:	fb03 f908 	mul.w	r9, r3, r8
 8005744:	ea6f 0909 	mvn.w	r9, r9
 8005748:	4638      	mov	r0, r7
 800574a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800574e:	f1bc 0f09 	cmp.w	ip, #9
 8005752:	d814      	bhi.n	800577e <_strtoul_l.constprop.0+0x86>
 8005754:	4664      	mov	r4, ip
 8005756:	42a3      	cmp	r3, r4
 8005758:	dd22      	ble.n	80057a0 <_strtoul_l.constprop.0+0xa8>
 800575a:	2f00      	cmp	r7, #0
 800575c:	db1d      	blt.n	800579a <_strtoul_l.constprop.0+0xa2>
 800575e:	4580      	cmp	r8, r0
 8005760:	d31b      	bcc.n	800579a <_strtoul_l.constprop.0+0xa2>
 8005762:	d101      	bne.n	8005768 <_strtoul_l.constprop.0+0x70>
 8005764:	45a1      	cmp	r9, r4
 8005766:	db18      	blt.n	800579a <_strtoul_l.constprop.0+0xa2>
 8005768:	fb00 4003 	mla	r0, r0, r3, r4
 800576c:	2701      	movs	r7, #1
 800576e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005772:	e7ea      	b.n	800574a <_strtoul_l.constprop.0+0x52>
 8005774:	2c2b      	cmp	r4, #43	; 0x2b
 8005776:	bf04      	itt	eq
 8005778:	782c      	ldrbeq	r4, [r5, #0]
 800577a:	1c85      	addeq	r5, r0, #2
 800577c:	e7cd      	b.n	800571a <_strtoul_l.constprop.0+0x22>
 800577e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005782:	f1bc 0f19 	cmp.w	ip, #25
 8005786:	d801      	bhi.n	800578c <_strtoul_l.constprop.0+0x94>
 8005788:	3c37      	subs	r4, #55	; 0x37
 800578a:	e7e4      	b.n	8005756 <_strtoul_l.constprop.0+0x5e>
 800578c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005790:	f1bc 0f19 	cmp.w	ip, #25
 8005794:	d804      	bhi.n	80057a0 <_strtoul_l.constprop.0+0xa8>
 8005796:	3c57      	subs	r4, #87	; 0x57
 8005798:	e7dd      	b.n	8005756 <_strtoul_l.constprop.0+0x5e>
 800579a:	f04f 37ff 	mov.w	r7, #4294967295
 800579e:	e7e6      	b.n	800576e <_strtoul_l.constprop.0+0x76>
 80057a0:	2f00      	cmp	r7, #0
 80057a2:	da07      	bge.n	80057b4 <_strtoul_l.constprop.0+0xbc>
 80057a4:	2322      	movs	r3, #34	; 0x22
 80057a6:	f8ce 3000 	str.w	r3, [lr]
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
 80057ae:	b932      	cbnz	r2, 80057be <_strtoul_l.constprop.0+0xc6>
 80057b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057b4:	b106      	cbz	r6, 80057b8 <_strtoul_l.constprop.0+0xc0>
 80057b6:	4240      	negs	r0, r0
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	d0f9      	beq.n	80057b0 <_strtoul_l.constprop.0+0xb8>
 80057bc:	b107      	cbz	r7, 80057c0 <_strtoul_l.constprop.0+0xc8>
 80057be:	1e69      	subs	r1, r5, #1
 80057c0:	6011      	str	r1, [r2, #0]
 80057c2:	e7f5      	b.n	80057b0 <_strtoul_l.constprop.0+0xb8>
 80057c4:	2430      	movs	r4, #48	; 0x30
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1b5      	bne.n	8005736 <_strtoul_l.constprop.0+0x3e>
 80057ca:	2308      	movs	r3, #8
 80057cc:	e7b3      	b.n	8005736 <_strtoul_l.constprop.0+0x3e>
 80057ce:	2c30      	cmp	r4, #48	; 0x30
 80057d0:	d0a9      	beq.n	8005726 <_strtoul_l.constprop.0+0x2e>
 80057d2:	230a      	movs	r3, #10
 80057d4:	e7af      	b.n	8005736 <_strtoul_l.constprop.0+0x3e>
 80057d6:	bf00      	nop
 80057d8:	08005ad0 	.word	0x08005ad0

080057dc <_strtoul_r>:
 80057dc:	f7ff bf8c 	b.w	80056f8 <_strtoul_l.constprop.0>

080057e0 <__submore>:
 80057e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e4:	460c      	mov	r4, r1
 80057e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80057e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057ec:	4299      	cmp	r1, r3
 80057ee:	d11d      	bne.n	800582c <__submore+0x4c>
 80057f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057f4:	f7ff fb0a 	bl	8004e0c <_malloc_r>
 80057f8:	b918      	cbnz	r0, 8005802 <__submore+0x22>
 80057fa:	f04f 30ff 	mov.w	r0, #4294967295
 80057fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005806:	63a3      	str	r3, [r4, #56]	; 0x38
 8005808:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800580c:	6360      	str	r0, [r4, #52]	; 0x34
 800580e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005812:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005816:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800581a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800581e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005822:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005826:	6020      	str	r0, [r4, #0]
 8005828:	2000      	movs	r0, #0
 800582a:	e7e8      	b.n	80057fe <__submore+0x1e>
 800582c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800582e:	0077      	lsls	r7, r6, #1
 8005830:	463a      	mov	r2, r7
 8005832:	f000 f84b 	bl	80058cc <_realloc_r>
 8005836:	4605      	mov	r5, r0
 8005838:	2800      	cmp	r0, #0
 800583a:	d0de      	beq.n	80057fa <__submore+0x1a>
 800583c:	eb00 0806 	add.w	r8, r0, r6
 8005840:	4601      	mov	r1, r0
 8005842:	4632      	mov	r2, r6
 8005844:	4640      	mov	r0, r8
 8005846:	f000 f827 	bl	8005898 <memcpy>
 800584a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800584e:	f8c4 8000 	str.w	r8, [r4]
 8005852:	e7e9      	b.n	8005828 <__submore+0x48>

08005854 <_fstat_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4d07      	ldr	r5, [pc, #28]	; (8005874 <_fstat_r+0x20>)
 8005858:	2300      	movs	r3, #0
 800585a:	4604      	mov	r4, r0
 800585c:	4608      	mov	r0, r1
 800585e:	4611      	mov	r1, r2
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	f7fb fa90 	bl	8000d86 <_fstat>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	d102      	bne.n	8005870 <_fstat_r+0x1c>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b103      	cbz	r3, 8005870 <_fstat_r+0x1c>
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	bd38      	pop	{r3, r4, r5, pc}
 8005872:	bf00      	nop
 8005874:	20000278 	.word	0x20000278

08005878 <_isatty_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4d06      	ldr	r5, [pc, #24]	; (8005894 <_isatty_r+0x1c>)
 800587c:	2300      	movs	r3, #0
 800587e:	4604      	mov	r4, r0
 8005880:	4608      	mov	r0, r1
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	f7fb fa8f 	bl	8000da6 <_isatty>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_isatty_r+0x1a>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b103      	cbz	r3, 8005892 <_isatty_r+0x1a>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	20000278 	.word	0x20000278

08005898 <memcpy>:
 8005898:	440a      	add	r2, r1
 800589a:	4291      	cmp	r1, r2
 800589c:	f100 33ff 	add.w	r3, r0, #4294967295
 80058a0:	d100      	bne.n	80058a4 <memcpy+0xc>
 80058a2:	4770      	bx	lr
 80058a4:	b510      	push	{r4, lr}
 80058a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ae:	4291      	cmp	r1, r2
 80058b0:	d1f9      	bne.n	80058a6 <memcpy+0xe>
 80058b2:	bd10      	pop	{r4, pc}

080058b4 <__malloc_lock>:
 80058b4:	4801      	ldr	r0, [pc, #4]	; (80058bc <__malloc_lock+0x8>)
 80058b6:	f7ff b9c3 	b.w	8004c40 <__retarget_lock_acquire_recursive>
 80058ba:	bf00      	nop
 80058bc:	2000026c 	.word	0x2000026c

080058c0 <__malloc_unlock>:
 80058c0:	4801      	ldr	r0, [pc, #4]	; (80058c8 <__malloc_unlock+0x8>)
 80058c2:	f7ff b9be 	b.w	8004c42 <__retarget_lock_release_recursive>
 80058c6:	bf00      	nop
 80058c8:	2000026c 	.word	0x2000026c

080058cc <_realloc_r>:
 80058cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d0:	4680      	mov	r8, r0
 80058d2:	4614      	mov	r4, r2
 80058d4:	460e      	mov	r6, r1
 80058d6:	b921      	cbnz	r1, 80058e2 <_realloc_r+0x16>
 80058d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	4611      	mov	r1, r2
 80058de:	f7ff ba95 	b.w	8004e0c <_malloc_r>
 80058e2:	b92a      	cbnz	r2, 80058f0 <_realloc_r+0x24>
 80058e4:	f7ff fa26 	bl	8004d34 <_free_r>
 80058e8:	4625      	mov	r5, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f0:	f000 f81b 	bl	800592a <_malloc_usable_size_r>
 80058f4:	4284      	cmp	r4, r0
 80058f6:	4607      	mov	r7, r0
 80058f8:	d802      	bhi.n	8005900 <_realloc_r+0x34>
 80058fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058fe:	d812      	bhi.n	8005926 <_realloc_r+0x5a>
 8005900:	4621      	mov	r1, r4
 8005902:	4640      	mov	r0, r8
 8005904:	f7ff fa82 	bl	8004e0c <_malloc_r>
 8005908:	4605      	mov	r5, r0
 800590a:	2800      	cmp	r0, #0
 800590c:	d0ed      	beq.n	80058ea <_realloc_r+0x1e>
 800590e:	42bc      	cmp	r4, r7
 8005910:	4622      	mov	r2, r4
 8005912:	4631      	mov	r1, r6
 8005914:	bf28      	it	cs
 8005916:	463a      	movcs	r2, r7
 8005918:	f7ff ffbe 	bl	8005898 <memcpy>
 800591c:	4631      	mov	r1, r6
 800591e:	4640      	mov	r0, r8
 8005920:	f7ff fa08 	bl	8004d34 <_free_r>
 8005924:	e7e1      	b.n	80058ea <_realloc_r+0x1e>
 8005926:	4635      	mov	r5, r6
 8005928:	e7df      	b.n	80058ea <_realloc_r+0x1e>

0800592a <_malloc_usable_size_r>:
 800592a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800592e:	1f18      	subs	r0, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	bfbc      	itt	lt
 8005934:	580b      	ldrlt	r3, [r1, r0]
 8005936:	18c0      	addlt	r0, r0, r3
 8005938:	4770      	bx	lr
	...

0800593c <_init>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	bf00      	nop
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr

08005948 <_fini>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr
