
UartReceiveAndCmdProcessingInterrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004010  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041e0  080041e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041e0  080041e0  000141e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041e8  080041e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041e8  080041e8  000141e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  080041fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  080041fc  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbb6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9e  00000000  00000000  0002cbf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002ea90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263bc  00000000  00000000  0002fe48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c536  00000000  00000000  00056204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9cae  00000000  00000000  0006273a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c3e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a4  00000000  00000000  0014c438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004180 	.word	0x08004180

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004180 	.word	0x08004180

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <UART_Transmit>:
#define OPTION1 "1. Start LED blinking\n\r"
#define OPTION2 "2. Stop LED blinking\n\r"
#define PROMPT "Select Option >\n\r"

int UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, size_t len)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit_IT(huart, pData, len) != HAL_OK) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	b29b      	uxth	r3, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	68b9      	ldr	r1, [r7, #8]
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f002 fa69 	bl	80029b8 <HAL_UART_Transmit_IT>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d009      	beq.n	8000500 <UART_Transmit+0x34>
		if (!RingBuffer_Write(&txrb, pData, len)) {
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	4806      	ldr	r0, [pc, #24]	; (800050c <UART_Transmit+0x40>)
 80004f2:	f000 f9b5 	bl	8000860 <RingBuffer_Write>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d101      	bne.n	8000500 <UART_Transmit+0x34>
			return 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	e000      	b.n	8000502 <UART_Transmit+0x36>
		}
	}
	return 1;
 8000500:	2301      	movs	r3, #1
}
 8000502:	4618      	mov	r0, r3
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200000ac 	.word	0x200000ac

08000510 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint8_t txData;
	if (!RingBuffer_IsEmpty(&txrb)) {
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <HAL_UART_TxCpltCallback+0x38>)
 800051a:	f000 f970 	bl	80007fe <RingBuffer_IsEmpty>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d10d      	bne.n	8000540 <HAL_UART_TxCpltCallback+0x30>
		RingBuffer_Read(&txrb, &txData, 1);
 8000524:	f107 030f 	add.w	r3, r7, #15
 8000528:	2201      	movs	r2, #1
 800052a:	4619      	mov	r1, r3
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <HAL_UART_TxCpltCallback+0x38>)
 800052e:	f000 f9d1 	bl	80008d4 <RingBuffer_Read>
		HAL_UART_Transmit_IT(huart, &txData, 1);
 8000532:	f107 030f 	add.w	r3, r7, #15
 8000536:	2201      	movs	r2, #1
 8000538:	4619      	mov	r1, r3
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f002 fa3c 	bl	80029b8 <HAL_UART_Transmit_IT>
	}
}
 8000540:	bf00      	nop
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200000ac 	.word	0x200000ac

0800054c <HAL_UART_RxCpltCallback>:
int cmdcount = 0;
int cmdprint = 0;
uint8_t ch;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	// in this callback we know that we have received the data
	if (ch == '\r')
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <HAL_UART_RxCpltCallback+0x6c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b0d      	cmp	r3, #13
 800055a:	d108      	bne.n	800056e <HAL_UART_RxCpltCallback+0x22>
	{
		// this is the end of the input
		// notify that we ready to handle new command
		cmdcount = RING_BUFFER_SIZE - RingBuffer_FreeSpace(&rxrb);
 800055c:	4817      	ldr	r0, [pc, #92]	; (80005bc <HAL_UART_RxCpltCallback+0x70>)
 800055e:	f000 f961 	bl	8000824 <RingBuffer_FreeSpace>
 8000562:	4603      	mov	r3, r0
 8000564:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000568:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <HAL_UART_RxCpltCallback+0x74>)
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	e00f      	b.n	800058e <HAL_UART_RxCpltCallback+0x42>
	}
	else
	{
		// put char to rx buffer
		if (RingBuffer_Write(&rxrb, &ch, 1) != 1)
 800056e:	2201      	movs	r2, #1
 8000570:	4911      	ldr	r1, [pc, #68]	; (80005b8 <HAL_UART_RxCpltCallback+0x6c>)
 8000572:	4812      	ldr	r0, [pc, #72]	; (80005bc <HAL_UART_RxCpltCallback+0x70>)
 8000574:	f000 f974 	bl	8000860 <RingBuffer_Write>
 8000578:	4603      	mov	r3, r0
 800057a:	2b01      	cmp	r3, #1
 800057c:	d002      	beq.n	8000584 <HAL_UART_RxCpltCallback+0x38>
		{
			// no more space in buffer, clear it
			RingBuffer_Init(&rxrb);
 800057e:	480f      	ldr	r0, [pc, #60]	; (80005bc <HAL_UART_RxCpltCallback+0x70>)
 8000580:	f000 f92d 	bl	80007de <RingBuffer_Init>
		}

		// we can echo it because echo will use interrupt and will not stop this interrupt
		UART_Transmit(&huart2, &ch, 1);
 8000584:	2201      	movs	r2, #1
 8000586:	490c      	ldr	r1, [pc, #48]	; (80005b8 <HAL_UART_RxCpltCallback+0x6c>)
 8000588:	480e      	ldr	r0, [pc, #56]	; (80005c4 <HAL_UART_RxCpltCallback+0x78>)
 800058a:	f7ff ff9f 	bl	80004cc <UART_Transmit>
	}

	// clear error if we have
	if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <HAL_UART_RxCpltCallback+0x78>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	2b00      	cmp	r3, #0
 800059a:	d003      	beq.n	80005a4 <HAL_UART_RxCpltCallback+0x58>
	{
		__HAL_UART_CLEAR_OREFLAG(&huart2);
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_UART_RxCpltCallback+0x78>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2208      	movs	r2, #8
 80005a2:	621a      	str	r2, [r3, #32]
	}

	// start reading again
	/*HAL_StatusTypeDef Status = */HAL_UART_Receive_IT(&huart2, &ch, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	4904      	ldr	r1, [pc, #16]	; (80005b8 <HAL_UART_RxCpltCallback+0x6c>)
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <HAL_UART_RxCpltCallback+0x78>)
 80005aa:	f002 fa73 	bl	8002a94 <HAL_UART_Receive_IT>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000188 	.word	0x20000188
 80005bc:	20000118 	.word	0x20000118
 80005c0:	20000184 	.word	0x20000184
 80005c4:	20000028 	.word	0x20000028

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fab8 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f818 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f898 	bl	8000708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 f866 	bl	80006a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RingBuffer_Init(&txrb);
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <main+0x2c>)
 80005de:	f000 f8fe 	bl	80007de <RingBuffer_Init>
  RingBuffer_Init(&rxrb);
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <main+0x30>)
 80005e4:	f000 f8fb 	bl	80007de <RingBuffer_Init>

 // printMessages2();

  //
  // start communication be receiving one byte
  /*HAL_StatusTypeDef Status = */HAL_UART_Receive_IT(&huart2, &ch, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	4904      	ldr	r1, [pc, #16]	; (80005fc <main+0x34>)
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <main+0x38>)
 80005ee:	f002 fa51 	bl	8002a94 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <main+0x2a>
 80005f4:	200000ac 	.word	0x200000ac
 80005f8:	20000118 	.word	0x20000118
 80005fc:	20000188 	.word	0x20000188
 8000600:	20000028 	.word	0x20000028

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	; 0x58
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2244      	movs	r2, #68	; 0x44
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fdac 	bl	8004170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000626:	f44f 7000 	mov.w	r0, #512	; 0x200
 800062a:	f000 fe65 	bl	80012f8 <HAL_PWREx_ControlVoltageScaling>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000634:	f000 f8ce 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000640:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000642:	2310      	movs	r3, #16
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064a:	2302      	movs	r3, #2
 800064c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000652:	230a      	movs	r3, #10
 8000654:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fe9c 	bl	80013a4 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000672:	f000 f8af 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fa64 	bl	8001b5c <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800069a:	f000 f89b 	bl	80007d4 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3758      	adds	r7, #88	; 0x58
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_USART2_UART_Init+0x5c>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ec:	f002 f916 	bl	800291c <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 f86d 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000028 	.word	0x20000028
 8000704:	40004400 	.word	0x40004400

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a24      	ldr	r2, [pc, #144]	; (80007cc <MX_GPIO_Init+0xc4>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <MX_GPIO_Init+0xc4>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000786:	f000 fd91 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000790:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_GPIO_Init+0xc8>)
 80007a2:	f000 fbd9 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	2320      	movs	r3, #32
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f000 fbca 	bl	8000f58 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000800 	.word	0x48000800

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>

080007de <RingBuffer_Init>:
#include "ringbuffer.h"

// Initializes the ring buffer internal data structures
void RingBuffer_Init(RingBuffer* rb)
{
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
	rb->_head = 0;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
	rb->_tail = 0;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <RingBuffer_IsEmpty>:

// returns 1 if it’s empty and 0 if it has at least one byte
int RingBuffer_IsEmpty(RingBuffer* rb)
{
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
	return rb->_head == rb->_tail;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	bf0c      	ite	eq
 8000812:	2301      	moveq	r3, #1
 8000814:	2300      	movne	r3, #0
 8000816:	b2db      	uxtb	r3, r3
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <RingBuffer_FreeSpace>:
	return rb->_tail == (rb->_head + 1) % RING_BUFFER_SIZE;
}

// returns the amount of free space in the buffer
int RingBuffer_FreeSpace(RingBuffer* rb)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	if (rb->_head >= rb->_tail) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	429a      	cmp	r2, r3
 8000836:	db07      	blt.n	8000848 <RingBuffer_FreeSpace+0x24>
		return RING_BUFFER_SIZE - rb->_head + rb->_tail;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	4413      	add	r3, r2
 8000846:	e005      	b.n	8000854 <RingBuffer_FreeSpace+0x30>
	}
	else {
		return rb->_tail - rb->_head - 1;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	3b01      	subs	r3, #1
	}
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <RingBuffer_Write>:

// Writes the data from the input array to the ring buffer.
// If it does not have enough space returns 0 and does not write any bytes,
// otherwise writes the bytes to the ring buffer and returns 1
int RingBuffer_Write(RingBuffer* rb, uint8_t * data, size_t dataSize)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	if (dataSize >= RingBuffer_FreeSpace(rb)) {
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f7ff ffd9 	bl	8000824 <RingBuffer_FreeSpace>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4293      	cmp	r3, r2
 800087a:	d301      	bcc.n	8000880 <RingBuffer_Write+0x20>
		return 0;
 800087c:	2300      	movs	r3, #0
 800087e:	e023      	b.n	80008c8 <RingBuffer_Write+0x68>
	}

	for (size_t i = 0; i < dataSize; i++) {
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	e01b      	b.n	80008be <RingBuffer_Write+0x5e>
		rb->_buffer[rb->_head] = *data++;
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	60ba      	str	r2, [r7, #8]
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	6812      	ldr	r2, [r2, #0]
 8000890:	7819      	ldrb	r1, [r3, #0]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4413      	add	r3, r2
 8000896:	460a      	mov	r2, r1
 8000898:	721a      	strb	r2, [r3, #8]
		rb->_head = (rb->_head + 1) % RING_BUFFER_SIZE;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <RingBuffer_Write+0x70>)
 80008a2:	fb83 1302 	smull	r1, r3, r3, r2
 80008a6:	1159      	asrs	r1, r3, #5
 80008a8:	17d3      	asrs	r3, r2, #31
 80008aa:	1acb      	subs	r3, r1, r3
 80008ac:	2164      	movs	r1, #100	; 0x64
 80008ae:	fb01 f303 	mul.w	r3, r1, r3
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	6013      	str	r3, [r2, #0]
	for (size_t i = 0; i < dataSize; i++) {
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	3301      	adds	r3, #1
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d3df      	bcc.n	8000886 <RingBuffer_Write+0x26>
	}
	return 1;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	51eb851f 	.word	0x51eb851f

080008d4 <RingBuffer_Read>:

// Reads the amount of bytes specified in dataSize from the ring buffer to the data array
int RingBuffer_Read(RingBuffer* rb, uint8_t * data, size_t dataSize)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b087      	sub	sp, #28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	int readCount = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < dataSize; i++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	e023      	b.n	8000932 <RingBuffer_Read+0x5e>
		if (rb->_tail == rb->_head) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	685a      	ldr	r2, [r3, #4]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d022      	beq.n	800093c <RingBuffer_Read+0x68>
			break;
		}

		*data++ = rb->_buffer[rb->_tail];
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1c59      	adds	r1, r3, #1
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	68f9      	ldr	r1, [r7, #12]
 8000902:	440a      	add	r2, r1
 8000904:	7a12      	ldrb	r2, [r2, #8]
 8000906:	701a      	strb	r2, [r3, #0]
		rb->_tail = (rb->_tail + 1) % RING_BUFFER_SIZE;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <RingBuffer_Read+0x78>)
 8000910:	fb83 1302 	smull	r1, r3, r3, r2
 8000914:	1159      	asrs	r1, r3, #5
 8000916:	17d3      	asrs	r3, r2, #31
 8000918:	1acb      	subs	r3, r1, r3
 800091a:	2164      	movs	r1, #100	; 0x64
 800091c:	fb01 f303 	mul.w	r3, r1, r3
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	6053      	str	r3, [r2, #4]
		readCount++;
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	3301      	adds	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < dataSize; i++) {
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	3301      	adds	r3, #1
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	429a      	cmp	r2, r3
 8000938:	d3d7      	bcc.n	80008ea <RingBuffer_Read+0x16>
 800093a:	e000      	b.n	800093e <RingBuffer_Read+0x6a>
			break;
 800093c:	bf00      	nop
	}

	return readCount;
 800093e:	697b      	ldr	r3, [r7, #20]
}
 8000940:	4618      	mov	r0, r3
 8000942:	371c      	adds	r7, #28
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	51eb851f 	.word	0x51eb851f

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x44>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_MspInit+0x44>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6613      	str	r3, [r2, #96]	; 0x60
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x44>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x44>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6593      	str	r3, [r2, #88]	; 0x58
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0ac      	sub	sp, #176	; 0xb0
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2288      	movs	r2, #136	; 0x88
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 fbd9 	bl	8004170 <memset>
  if(huart->Instance==USART2)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a25      	ldr	r2, [pc, #148]	; (8000a58 <HAL_UART_MspInit+0xc0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d143      	bne.n	8000a50 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fae5 	bl	8001fa4 <HAL_RCCEx_PeriphCLKConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009e0:	f7ff fef8 	bl	80007d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <HAL_UART_MspInit+0xc4>)
 80009e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e8:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <HAL_UART_MspInit+0xc4>)
 80009ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ee:	6593      	str	r3, [r2, #88]	; 0x58
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_UART_MspInit+0xc4>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_UART_MspInit+0xc4>)
 80009fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a00:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <HAL_UART_MspInit+0xc4>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_UART_MspInit+0xc4>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a14:	230c      	movs	r3, #12
 8000a16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a36:	4619      	mov	r1, r3
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f000 fa8c 	bl	8000f58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2026      	movs	r0, #38	; 0x26
 8000a46:	f000 f9d2 	bl	8000dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a4a:	2026      	movs	r0, #38	; 0x26
 8000a4c:	f000 f9eb 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	37b0      	adds	r7, #176	; 0xb0
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40021000 	.word	0x40021000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aac:	f000 f8a4 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <USART2_IRQHandler+0x10>)
 8000aba:	f002 f841 	bl	8002b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000028 	.word	0x20000028

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af0:	f7ff ffea 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af6:	490d      	ldr	r1, [pc, #52]	; (8000b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <LoopForever+0xe>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	; (8000b38 <LoopForever+0x16>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f003 fb05 	bl	8004128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1e:	f7ff fd53 	bl	80005c8 <main>

08000b22 <LoopForever>:

LoopForever:
    b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b30:	080041f0 	.word	0x080041f0
  ldr r2, =_sbss
 8000b34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b38:	20000190 	.word	0x20000190

08000b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_2_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_Init+0x3c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <HAL_Init+0x3c>)
 8000b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b56:	2003      	movs	r0, #3
 8000b58:	f000 f93e 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f000 f80f 	bl	8000b80 <HAL_InitTick>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	e001      	b.n	8000b72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6e:	f7ff feef 	bl	8000950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b72:	79fb      	ldrb	r3, [r7, #7]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_InitTick+0x6c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d023      	beq.n	8000bdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_InitTick+0x70>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_InitTick+0x6c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f949 	bl	8000e42 <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10f      	bne.n	8000bd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d809      	bhi.n	8000bd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f000 f913 	bl	8000dee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_InitTick+0x74>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e007      	b.n	8000be0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e004      	b.n	8000be0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e001      	b.n	8000be0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	2000018c 	.word	0x2000018c

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	2000018c 	.word	0x2000018c

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff29 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff3e 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff31 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffa2 	bl	8000d94 <SysTick_Config>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b085      	sub	sp, #20
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d008      	beq.n	8000e84 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2204      	movs	r2, #4
 8000e76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e022      	b.n	8000eca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 020e 	bic.w	r2, r2, #14
 8000e92:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0201 	bic.w	r2, r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea8:	f003 021c 	and.w	r2, r3, #28
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d005      	beq.n	8000efa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e029      	b.n	8000f4e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 020e 	bic.w	r2, r2, #14
 8000f08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f003 021c 	and.w	r2, r3, #28
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	4798      	blx	r3
    }
  }
  return status;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e17f      	b.n	8001268 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8171 	beq.w	8001262 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d005      	beq.n	8000f98 <HAL_GPIO_Init+0x40>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d130      	bne.n	8000ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	f003 0201 	and.w	r2, r3, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b03      	cmp	r3, #3
 8001004:	d118      	bne.n	8001038 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800100c:	2201      	movs	r2, #1
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	f003 0201 	and.w	r2, r3, #1
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b03      	cmp	r3, #3
 8001042:	d017      	beq.n	8001074 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d123      	bne.n	80010c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	08da      	lsrs	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3208      	adds	r2, #8
 8001088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	6939      	ldr	r1, [r7, #16]
 80010c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0203 	and.w	r2, r3, #3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80ac 	beq.w	8001262 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	4b5f      	ldr	r3, [pc, #380]	; (8001288 <HAL_GPIO_Init+0x330>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110e:	4a5e      	ldr	r2, [pc, #376]	; (8001288 <HAL_GPIO_Init+0x330>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6613      	str	r3, [r2, #96]	; 0x60
 8001116:	4b5c      	ldr	r3, [pc, #368]	; (8001288 <HAL_GPIO_Init+0x330>)
 8001118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001122:	4a5a      	ldr	r2, [pc, #360]	; (800128c <HAL_GPIO_Init+0x334>)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800114c:	d025      	beq.n	800119a <HAL_GPIO_Init+0x242>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4f      	ldr	r2, [pc, #316]	; (8001290 <HAL_GPIO_Init+0x338>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01f      	beq.n	8001196 <HAL_GPIO_Init+0x23e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4e      	ldr	r2, [pc, #312]	; (8001294 <HAL_GPIO_Init+0x33c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x23a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4d      	ldr	r2, [pc, #308]	; (8001298 <HAL_GPIO_Init+0x340>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x236>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4c      	ldr	r2, [pc, #304]	; (800129c <HAL_GPIO_Init+0x344>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x232>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4b      	ldr	r2, [pc, #300]	; (80012a0 <HAL_GPIO_Init+0x348>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x22e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4a      	ldr	r2, [pc, #296]	; (80012a4 <HAL_GPIO_Init+0x34c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x22a>
 800117e:	2306      	movs	r3, #6
 8001180:	e00c      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001182:	2307      	movs	r3, #7
 8001184:	e00a      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001186:	2305      	movs	r3, #5
 8001188:	e008      	b.n	800119c <HAL_GPIO_Init+0x244>
 800118a:	2304      	movs	r3, #4
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x244>
 800118e:	2303      	movs	r3, #3
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x244>
 800119a:	2300      	movs	r3, #0
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ac:	4937      	ldr	r1, [pc, #220]	; (800128c <HAL_GPIO_Init+0x334>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_GPIO_Init+0x350>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011de:	4a32      	ldr	r2, [pc, #200]	; (80012a8 <HAL_GPIO_Init+0x350>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_GPIO_Init+0x350>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001208:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <HAL_GPIO_Init+0x350>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_GPIO_Init+0x350>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001232:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <HAL_GPIO_Init+0x350>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_GPIO_Init+0x350>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <HAL_GPIO_Init+0x350>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	f47f ae78 	bne.w	8000f68 <HAL_GPIO_Init+0x10>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800
 8001298:	48000c00 	.word	0x48000c00
 800129c:	48001000 	.word	0x48001000
 80012a0:	48001400 	.word	0x48001400
 80012a4:	48001800 	.word	0x48001800
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40007000 	.word	0x40007000

080012f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001306:	d130      	bne.n	800136a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001314:	d038      	beq.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800131e:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001320:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2232      	movs	r2, #50	; 0x32
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0c9b      	lsrs	r3, r3, #18
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800133c:	e002      	b.n	8001344 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3b01      	subs	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001350:	d102      	bne.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f2      	bne.n	800133e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001364:	d110      	bne.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e00f      	b.n	800138a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001376:	d007      	beq.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001380:	4a05      	ldr	r2, [pc, #20]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001386:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40007000 	.word	0x40007000
 800139c:	20000000 	.word	0x20000000
 80013a0:	431bde83 	.word	0x431bde83

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e3ca      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b6:	4b97      	ldr	r3, [pc, #604]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c0:	4b94      	ldr	r3, [pc, #592]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80e4 	beq.w	80015a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <HAL_RCC_OscConfig+0x4a>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b0c      	cmp	r3, #12
 80013e2:	f040 808b 	bne.w	80014fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	f040 8087 	bne.w	80014fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ee:	4b89      	ldr	r3, [pc, #548]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x62>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e3a2      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1a      	ldr	r2, [r3, #32]
 800140a:	4b82      	ldr	r3, [pc, #520]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <HAL_RCC_OscConfig+0x7c>
 8001416:	4b7f      	ldr	r3, [pc, #508]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800141e:	e005      	b.n	800142c <HAL_RCC_OscConfig+0x88>
 8001420:	4b7c      	ldr	r3, [pc, #496]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800142c:	4293      	cmp	r3, r2
 800142e:	d223      	bcs.n	8001478 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 fd55 	bl	8001ee4 <RCC_SetFlashLatencyFromMSIRange>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e383      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001444:	4b73      	ldr	r3, [pc, #460]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a72      	ldr	r2, [pc, #456]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b70      	ldr	r3, [pc, #448]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	496d      	ldr	r1, [pc, #436]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001462:	4b6c      	ldr	r3, [pc, #432]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	4968      	ldr	r1, [pc, #416]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001472:	4313      	orrs	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
 8001476:	e025      	b.n	80014c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001478:	4b66      	ldr	r3, [pc, #408]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a65      	ldr	r2, [pc, #404]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4960      	ldr	r1, [pc, #384]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001496:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	495b      	ldr	r1, [pc, #364]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d109      	bne.n	80014c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fd15 	bl	8001ee4 <RCC_SetFlashLatencyFromMSIRange>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e343      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014c4:	f000 fc4a 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 80014c8:	4602      	mov	r2, r0
 80014ca:	4b52      	ldr	r3, [pc, #328]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	4950      	ldr	r1, [pc, #320]	; (8001618 <HAL_RCC_OscConfig+0x274>)
 80014d6:	5ccb      	ldrb	r3, [r1, r3]
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	4a4e      	ldr	r2, [pc, #312]	; (800161c <HAL_RCC_OscConfig+0x278>)
 80014e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014e4:	4b4e      	ldr	r3, [pc, #312]	; (8001620 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fb49 	bl	8000b80 <HAL_InitTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d052      	beq.n	800159e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	e327      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d032      	beq.n	800156a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001504:	4b43      	ldr	r3, [pc, #268]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a42      	ldr	r2, [pc, #264]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb86 	bl	8000c20 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001518:	f7ff fb82 	bl	8000c20 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e310      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800152a:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001536:	4b37      	ldr	r3, [pc, #220]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a36      	ldr	r2, [pc, #216]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b34      	ldr	r3, [pc, #208]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4931      	ldr	r1, [pc, #196]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	492c      	ldr	r1, [pc, #176]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
 8001568:	e01a      	b.n	80015a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a29      	ldr	r2, [pc, #164]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001576:	f7ff fb53 	bl	8000c20 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800157e:	f7ff fb4f 	bl	8000c20 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e2dd      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x1da>
 800159c:	e000      	b.n	80015a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800159e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d074      	beq.n	8001696 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d005      	beq.n	80015be <HAL_RCC_OscConfig+0x21a>
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d10e      	bne.n	80015d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d10b      	bne.n	80015d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d064      	beq.n	8001694 <HAL_RCC_OscConfig+0x2f0>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d160      	bne.n	8001694 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e2ba      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x24a>
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80015e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	e026      	b.n	800163c <HAL_RCC_OscConfig+0x298>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f6:	d115      	bne.n	8001624 <HAL_RCC_OscConfig+0x280>
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a05      	ldr	r2, [pc, #20]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80015fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a02      	ldr	r2, [pc, #8]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e014      	b.n	800163c <HAL_RCC_OscConfig+0x298>
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000
 8001618:	08004198 	.word	0x08004198
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004
 8001624:	4ba0      	ldr	r3, [pc, #640]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a9f      	ldr	r2, [pc, #636]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800162a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b9d      	ldr	r3, [pc, #628]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a9c      	ldr	r2, [pc, #624]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d013      	beq.n	800166c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff faec 	bl	8000c20 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fae8 	bl	8000c20 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e276      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165e:	4b92      	ldr	r3, [pc, #584]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x2a8>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fad8 	bl	8000c20 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fad4 	bl	8000c20 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e262      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001686:	4b88      	ldr	r3, [pc, #544]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x2d0>
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d060      	beq.n	8001764 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_OscConfig+0x310>
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d119      	bne.n	80016e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d116      	bne.n	80016e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	4b7c      	ldr	r3, [pc, #496]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_OscConfig+0x328>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e23f      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b76      	ldr	r3, [pc, #472]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	4973      	ldr	r1, [pc, #460]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e0:	e040      	b.n	8001764 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d023      	beq.n	8001732 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ea:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80016f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f6:	f7ff fa93 	bl	8000c20 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff fa8f 	bl	8000c20 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e21d      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001710:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171c:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	061b      	lsls	r3, r3, #24
 800172a:	495f      	ldr	r1, [pc, #380]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
 8001730:	e018      	b.n	8001764 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001732:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a5c      	ldr	r2, [pc, #368]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff fa6f 	bl	8000c20 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff fa6b 	bl	8000c20 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e1f9      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d03c      	beq.n	80017ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d01c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001778:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800177a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177e:	4a4a      	ldr	r2, [pc, #296]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fa4a 	bl	8000c20 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fa46 	bl	8000c20 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1d4      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80017a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0ef      	beq.n	8001790 <HAL_RCC_OscConfig+0x3ec>
 80017b0:	e01b      	b.n	80017ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b8:	4a3b      	ldr	r2, [pc, #236]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff fa2d 	bl	8000c20 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff fa29 	bl	8000c20 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1b7      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017dc:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80017de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ef      	bne.n	80017ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80a6 	beq.w	8001944 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10d      	bne.n	8001824 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800180e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001812:	6593      	str	r3, [r2, #88]	; 0x58
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001820:	2301      	movs	r3, #1
 8001822:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_RCC_OscConfig+0x508>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d118      	bne.n	8001862 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_RCC_OscConfig+0x508>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1d      	ldr	r2, [pc, #116]	; (80018ac <HAL_RCC_OscConfig+0x508>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183c:	f7ff f9f0 	bl	8000c20 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001844:	f7ff f9ec 	bl	8000c20 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e17a      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_RCC_OscConfig+0x508>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d108      	bne.n	800187c <HAL_RCC_OscConfig+0x4d8>
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800186c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187a:	e029      	b.n	80018d0 <HAL_RCC_OscConfig+0x52c>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b05      	cmp	r3, #5
 8001882:	d115      	bne.n	80018b0 <HAL_RCC_OscConfig+0x50c>
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188a:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189a:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a4:	e014      	b.n	80018d0 <HAL_RCC_OscConfig+0x52c>
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40007000 	.word	0x40007000
 80018b0:	4b9c      	ldr	r3, [pc, #624]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	4a9b      	ldr	r2, [pc, #620]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c0:	4b98      	ldr	r3, [pc, #608]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	4a97      	ldr	r2, [pc, #604]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d016      	beq.n	8001906 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff f9a2 	bl	8000c20 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e0:	f7ff f99e 	bl	8000c20 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e12a      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f6:	4b8b      	ldr	r3, [pc, #556]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80018f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0ed      	beq.n	80018e0 <HAL_RCC_OscConfig+0x53c>
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff f98b 	bl	8000c20 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff f987 	bl	8000c20 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e113      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001924:	4b7f      	ldr	r3, [pc, #508]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ed      	bne.n	800190e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001932:	7ffb      	ldrb	r3, [r7, #31]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001938:	4b7a      	ldr	r3, [pc, #488]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	4a79      	ldr	r2, [pc, #484]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 800193e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001942:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80fe 	beq.w	8001b4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	2b02      	cmp	r3, #2
 8001954:	f040 80d0 	bne.w	8001af8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001958:	4b72      	ldr	r3, [pc, #456]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0203 	and.w	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	429a      	cmp	r2, r3
 800196a:	d130      	bne.n	80019ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	3b01      	subs	r3, #1
 8001978:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d127      	bne.n	80019ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001988:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d11f      	bne.n	80019ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001998:	2a07      	cmp	r2, #7
 800199a:	bf14      	ite	ne
 800199c:	2201      	movne	r2, #1
 800199e:	2200      	moveq	r2, #0
 80019a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d113      	bne.n	80019ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	3b01      	subs	r3, #1
 80019b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d109      	bne.n	80019ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d06e      	beq.n	8001aac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	2b0c      	cmp	r3, #12
 80019d2:	d069      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019d4:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019e0:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0ad      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019f0:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80019f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019fc:	f7ff f910 	bl	8000c20 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff f90c 	bl	8000c20 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e09a      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a16:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a22:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <HAL_RCC_OscConfig+0x784>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a32:	3a01      	subs	r2, #1
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	4311      	orrs	r1, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a3c:	0212      	lsls	r2, r2, #8
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a44:	0852      	lsrs	r2, r2, #1
 8001a46:	3a01      	subs	r2, #1
 8001a48:	0552      	lsls	r2, r2, #21
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a50:	0852      	lsrs	r2, r2, #1
 8001a52:	3a01      	subs	r2, #1
 8001a54:	0652      	lsls	r2, r2, #25
 8001a56:	4311      	orrs	r1, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a5c:	0912      	lsrs	r2, r2, #4
 8001a5e:	0452      	lsls	r2, r2, #17
 8001a60:	430a      	orrs	r2, r1
 8001a62:	4930      	ldr	r1, [pc, #192]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a68:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a80:	f7ff f8ce 	bl	8000c20 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff f8ca 	bl	8000c20 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e058      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa6:	e050      	b.n	8001b4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e04f      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d148      	bne.n	8001b4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ace:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ad0:	f7ff f8a6 	bl	8000c20 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f8a2 	bl	8000c20 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e030      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x734>
 8001af6:	e028      	b.n	8001b4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d023      	beq.n	8001b46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff f889 	bl	8000c20 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b10:	e00c      	b.n	8001b2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff f885 	bl	8000c20 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d905      	bls.n	8001b2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e013      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
 8001b24:	40021000 	.word	0x40021000
 8001b28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_OscConfig+0x7b0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ec      	bne.n	8001b12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_OscConfig+0x7b0>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4905      	ldr	r1, [pc, #20]	; (8001b54 <HAL_RCC_OscConfig+0x7b0>)
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_OscConfig+0x7b4>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
 8001b44:	e001      	b.n	8001b4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	feeefffc 	.word	0xfeeefffc

08001b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0e7      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b75      	ldr	r3, [pc, #468]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d910      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b72      	ldr	r3, [pc, #456]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4970      	ldr	r1, [pc, #448]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0cf      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d010      	beq.n	8001bce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d908      	bls.n	8001bce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbc:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4960      	ldr	r1, [pc, #384]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d04c      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be2:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d121      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0a6      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfa:	4b54      	ldr	r3, [pc, #336]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d115      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e09a      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c12:	4b4e      	ldr	r3, [pc, #312]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e08e      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c22:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e086      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c32:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f023 0203 	bic.w	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4943      	ldr	r1, [pc, #268]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c44:	f7fe ffec 	bl	8000c20 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4c:	f7fe ffe8 	bl	8000c20 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e06e      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 020c 	and.w	r2, r3, #12
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d1eb      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d010      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d208      	bcs.n	8001ca2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	492b      	ldr	r1, [pc, #172]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d210      	bcs.n	8001cd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 0207 	bic.w	r2, r3, #7
 8001cb8:	4923      	ldr	r1, [pc, #140]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e036      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	4918      	ldr	r1, [pc, #96]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4910      	ldr	r1, [pc, #64]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d10:	f000 f824 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	490b      	ldr	r1, [pc, #44]	; (8001d50 <HAL_RCC_ClockConfig+0x1f4>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1fc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe ff23 	bl	8000b80 <HAL_InitTick>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08004198 	.word	0x08004198
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d74:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x34>
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	d121      	bne.n	8001dce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d11e      	bne.n	8001dce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d9c:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	e005      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001db8:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10d      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d102      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	e004      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001de0:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001de2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d134      	bne.n	8001e54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d003      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0xac>
 8001e00:	e005      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001e04:	617b      	str	r3, [r7, #20]
      break;
 8001e06:	e005      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e0a:	617b      	str	r3, [r7, #20]
      break;
 8001e0c:	e002      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	617b      	str	r3, [r7, #20]
      break;
 8001e12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	3301      	adds	r3, #1
 8001e20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	fb03 f202 	mul.w	r2, r3, r2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	0e5b      	lsrs	r3, r3, #25
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	3301      	adds	r3, #1
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e54:	69bb      	ldr	r3, [r7, #24]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	080041b0 	.word	0x080041b0
 8001e6c:	00f42400 	.word	0x00f42400
 8001e70:	007a1200 	.word	0x007a1200

08001e74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000000 	.word	0x20000000

08001e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4904      	ldr	r1, [pc, #16]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	080041a8 	.word	0x080041a8

08001eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ebc:	f7ff ffda 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0adb      	lsrs	r3, r3, #11
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4904      	ldr	r1, [pc, #16]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	080041a8 	.word	0x080041a8

08001ee4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001efc:	f7ff f9ee 	bl	80012dc <HAL_PWREx_GetVoltageRange>
 8001f00:	6178      	str	r0, [r7, #20]
 8001f02:	e014      	b.n	8001f2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f1c:	f7ff f9de 	bl	80012dc <HAL_PWREx_GetVoltageRange>
 8001f20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f34:	d10b      	bne.n	8001f4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b80      	cmp	r3, #128	; 0x80
 8001f3a:	d919      	bls.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f40:	d902      	bls.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f42:	2302      	movs	r3, #2
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	e013      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f48:	2301      	movs	r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	e010      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b80      	cmp	r3, #128	; 0x80
 8001f52:	d902      	bls.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f54:	2303      	movs	r3, #3
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	e00a      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b80      	cmp	r3, #128	; 0x80
 8001f5e:	d102      	bne.n	8001f66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f60:	2302      	movs	r3, #2
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	e004      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b70      	cmp	r3, #112	; 0x70
 8001f6a:	d101      	bne.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 0207 	bic.w	r2, r3, #7
 8001f78:	4909      	ldr	r1, [pc, #36]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d001      	beq.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40022000 	.word	0x40022000

08001fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fac:	2300      	movs	r3, #0
 8001fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d041      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fc8:	d02a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fce:	d824      	bhi.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fd4:	d008      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fda:	d81e      	bhi.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe4:	d010      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fe6:	e018      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fe8:	4b86      	ldr	r3, [pc, #536]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a85      	ldr	r2, [pc, #532]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ff4:	e015      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fabb 	bl	8002578 <RCCEx_PLLSAI1_Config>
 8002002:	4603      	mov	r3, r0
 8002004:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002006:	e00c      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3320      	adds	r3, #32
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fba6 	bl	8002760 <RCCEx_PLLSAI2_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002018:	e003      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	74fb      	strb	r3, [r7, #19]
      break;
 800201e:	e000      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002022:	7cfb      	ldrb	r3, [r7, #19]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002028:	4b76      	ldr	r3, [pc, #472]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002036:	4973      	ldr	r1, [pc, #460]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800203e:	e001      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002040:	7cfb      	ldrb	r3, [r7, #19]
 8002042:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d041      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002054:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002058:	d02a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800205a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800205e:	d824      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002064:	d008      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800206a:	d81e      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002074:	d010      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002076:	e018      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002078:	4b62      	ldr	r3, [pc, #392]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a61      	ldr	r2, [pc, #388]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002084:	e015      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fa73 	bl	8002578 <RCCEx_PLLSAI1_Config>
 8002092:	4603      	mov	r3, r0
 8002094:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002096:	e00c      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3320      	adds	r3, #32
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fb5e 	bl	8002760 <RCCEx_PLLSAI2_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020a8:	e003      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	74fb      	strb	r3, [r7, #19]
      break;
 80020ae:	e000      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020b8:	4b52      	ldr	r3, [pc, #328]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c6:	494f      	ldr	r1, [pc, #316]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ce:	e001      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a0 	beq.w	8002222 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020f6:	2300      	movs	r3, #0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00d      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a40      	ldr	r2, [pc, #256]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002106:	6593      	str	r3, [r2, #88]	; 0x58
 8002108:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002114:	2301      	movs	r3, #1
 8002116:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002118:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a3a      	ldr	r2, [pc, #232]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002124:	f7fe fd7c 	bl	8000c20 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800212a:	e009      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212c:	f7fe fd78 	bl	8000c20 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d902      	bls.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	74fb      	strb	r3, [r7, #19]
        break;
 800213e:	e005      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ef      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d15c      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002152:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01f      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	d019      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800217a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800217c:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	4a20      	ldr	r2, [pc, #128]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800219c:	4a19      	ldr	r2, [pc, #100]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d016      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7fe fd37 	bl	8000c20 <HAL_GetTick>
 80021b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b4:	e00b      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fd33 	bl	8000c20 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d902      	bls.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	74fb      	strb	r3, [r7, #19]
            break;
 80021cc:	e006      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ec      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f2:	4904      	ldr	r1, [pc, #16]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021fa:	e009      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	74bb      	strb	r3, [r7, #18]
 8002200:	e006      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002210:	7c7b      	ldrb	r3, [r7, #17]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d105      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002216:	4b9e      	ldr	r3, [pc, #632]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	4a9d      	ldr	r2, [pc, #628]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800222e:	4b98      	ldr	r3, [pc, #608]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f023 0203 	bic.w	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	4994      	ldr	r1, [pc, #592]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002250:	4b8f      	ldr	r3, [pc, #572]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f023 020c 	bic.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	498c      	ldr	r1, [pc, #560]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002272:	4b87      	ldr	r3, [pc, #540]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	4983      	ldr	r1, [pc, #524]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002294:	4b7e      	ldr	r3, [pc, #504]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	497b      	ldr	r1, [pc, #492]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022b6:	4b76      	ldr	r3, [pc, #472]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	4972      	ldr	r1, [pc, #456]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d8:	4b6d      	ldr	r3, [pc, #436]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	496a      	ldr	r1, [pc, #424]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022fa:	4b65      	ldr	r3, [pc, #404]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	4961      	ldr	r1, [pc, #388]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800231c:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	4959      	ldr	r1, [pc, #356]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800233e:	4b54      	ldr	r3, [pc, #336]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234c:	4950      	ldr	r1, [pc, #320]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002360:	4b4b      	ldr	r3, [pc, #300]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	4948      	ldr	r1, [pc, #288]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	493f      	ldr	r1, [pc, #252]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d028      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023a4:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b2:	4937      	ldr	r1, [pc, #220]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c2:	d106      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c4:	4b32      	ldr	r3, [pc, #200]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a31      	ldr	r2, [pc, #196]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ce:	60d3      	str	r3, [r2, #12]
 80023d0:	e011      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023da:	d10c      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	2101      	movs	r1, #1
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f8c8 	bl	8002578 <RCCEx_PLLSAI1_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d028      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	491f      	ldr	r1, [pc, #124]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002420:	d106      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002422:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800242c:	60d3      	str	r3, [r2, #12]
 800242e:	e011      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002438:	d10c      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f899 	bl	8002578 <RCCEx_PLLSAI1_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d02b      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800247e:	d109      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a02      	ldr	r2, [pc, #8]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248a:	60d3      	str	r3, [r2, #12]
 800248c:	e014      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2101      	movs	r1, #1
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f867 	bl	8002578 <RCCEx_PLLSAI1_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d02f      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024c4:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024d2:	4928      	ldr	r1, [pc, #160]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024e2:	d10d      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	2102      	movs	r1, #2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f844 	bl	8002578 <RCCEx_PLLSAI1_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d014      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	74bb      	strb	r3, [r7, #18]
 80024fe:	e011      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002508:	d10c      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3320      	adds	r3, #32
 800250e:	2102      	movs	r1, #2
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f925 	bl	8002760 <RCCEx_PLLSAI2_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800253e:	490d      	ldr	r1, [pc, #52]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002562:	4904      	ldr	r1, [pc, #16]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800256a:	7cbb      	ldrb	r3, [r7, #18]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000

08002578 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002586:	4b75      	ldr	r3, [pc, #468]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d018      	beq.n	80025c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002592:	4b72      	ldr	r3, [pc, #456]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0203 	and.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d10d      	bne.n	80025be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
       ||
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025aa:	4b6c      	ldr	r3, [pc, #432]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
       ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d047      	beq.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e044      	b.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d018      	beq.n	80025fe <RCCEx_PLLSAI1_Config+0x86>
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d825      	bhi.n	800261c <RCCEx_PLLSAI1_Config+0xa4>
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d002      	beq.n	80025da <RCCEx_PLLSAI1_Config+0x62>
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d009      	beq.n	80025ec <RCCEx_PLLSAI1_Config+0x74>
 80025d8:	e020      	b.n	800261c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025da:	4b60      	ldr	r3, [pc, #384]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d11d      	bne.n	8002622 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ea:	e01a      	b.n	8002622 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025ec:	4b5b      	ldr	r3, [pc, #364]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d116      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fc:	e013      	b.n	8002626 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025fe:	4b57      	ldr	r3, [pc, #348]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800260a:	4b54      	ldr	r3, [pc, #336]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800261a:	e006      	b.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e004      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002622:	bf00      	nop
 8002624:	e002      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800262a:	bf00      	nop
    }

    if(status == HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002632:	4b4a      	ldr	r3, [pc, #296]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	430b      	orrs	r3, r1
 8002648:	4944      	ldr	r1, [pc, #272]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d17d      	bne.n	8002750 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002654:	4b41      	ldr	r3, [pc, #260]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a40      	ldr	r2, [pc, #256]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800265a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800265e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002660:	f7fe fade 	bl	8000c20 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002666:	e009      	b.n	800267c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002668:	f7fe fada 	bl	8000c20 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	73fb      	strb	r3, [r7, #15]
        break;
 800267a:	e005      	b.n	8002688 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800267c:	4b37      	ldr	r3, [pc, #220]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ef      	bne.n	8002668 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d160      	bne.n	8002750 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d111      	bne.n	80026b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002694:	4b31      	ldr	r3, [pc, #196]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800269c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68d2      	ldr	r2, [r2, #12]
 80026aa:	0912      	lsrs	r2, r2, #4
 80026ac:	0452      	lsls	r2, r2, #17
 80026ae:	430a      	orrs	r2, r1
 80026b0:	492a      	ldr	r1, [pc, #168]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	610b      	str	r3, [r1, #16]
 80026b6:	e027      	b.n	8002708 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d112      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026be:	4b27      	ldr	r3, [pc, #156]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6892      	ldr	r2, [r2, #8]
 80026ce:	0211      	lsls	r1, r2, #8
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6912      	ldr	r2, [r2, #16]
 80026d4:	0852      	lsrs	r2, r2, #1
 80026d6:	3a01      	subs	r2, #1
 80026d8:	0552      	lsls	r2, r2, #21
 80026da:	430a      	orrs	r2, r1
 80026dc:	491f      	ldr	r1, [pc, #124]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	610b      	str	r3, [r1, #16]
 80026e2:	e011      	b.n	8002708 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6892      	ldr	r2, [r2, #8]
 80026f4:	0211      	lsls	r1, r2, #8
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6952      	ldr	r2, [r2, #20]
 80026fa:	0852      	lsrs	r2, r2, #1
 80026fc:	3a01      	subs	r2, #1
 80026fe:	0652      	lsls	r2, r2, #25
 8002700:	430a      	orrs	r2, r1
 8002702:	4916      	ldr	r1, [pc, #88]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a13      	ldr	r2, [pc, #76]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800270e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe fa84 	bl	8000c20 <HAL_GetTick>
 8002718:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800271a:	e009      	b.n	8002730 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800271c:	f7fe fa80 	bl	8000c20 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d902      	bls.n	8002730 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	73fb      	strb	r3, [r7, #15]
          break;
 800272e:	e005      	b.n	800273c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ef      	beq.n	800271c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	4904      	ldr	r1, [pc, #16]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000

08002760 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800276e:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d018      	beq.n	80027ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800277a:	4b67      	ldr	r3, [pc, #412]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0203 	and.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d10d      	bne.n	80027a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
       ||
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002792:	4b61      	ldr	r3, [pc, #388]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
       ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d047      	beq.n	8002836 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	e044      	b.n	8002836 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d018      	beq.n	80027e6 <RCCEx_PLLSAI2_Config+0x86>
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d825      	bhi.n	8002804 <RCCEx_PLLSAI2_Config+0xa4>
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d002      	beq.n	80027c2 <RCCEx_PLLSAI2_Config+0x62>
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d009      	beq.n	80027d4 <RCCEx_PLLSAI2_Config+0x74>
 80027c0:	e020      	b.n	8002804 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027c2:	4b55      	ldr	r3, [pc, #340]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11d      	bne.n	800280a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d2:	e01a      	b.n	800280a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027d4:	4b50      	ldr	r3, [pc, #320]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d116      	bne.n	800280e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e4:	e013      	b.n	800280e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027e6:	4b4c      	ldr	r3, [pc, #304]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10f      	bne.n	8002812 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027f2:	4b49      	ldr	r3, [pc, #292]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002802:	e006      	b.n	8002812 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e004      	b.n	8002814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800280a:	bf00      	nop
 800280c:	e002      	b.n	8002814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800280e:	bf00      	nop
 8002810:	e000      	b.n	8002814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002812:	bf00      	nop
    }

    if(status == HAL_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10d      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800281a:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6819      	ldr	r1, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	430b      	orrs	r3, r1
 8002830:	4939      	ldr	r1, [pc, #228]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002832:	4313      	orrs	r3, r2
 8002834:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d167      	bne.n	800290c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800283c:	4b36      	ldr	r3, [pc, #216]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a35      	ldr	r2, [pc, #212]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002848:	f7fe f9ea 	bl	8000c20 <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800284e:	e009      	b.n	8002864 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002850:	f7fe f9e6 	bl	8000c20 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d902      	bls.n	8002864 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	73fb      	strb	r3, [r7, #15]
        break;
 8002862:	e005      	b.n	8002870 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002864:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ef      	bne.n	8002850 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d14a      	bne.n	800290c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d111      	bne.n	80028a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800287c:	4b26      	ldr	r3, [pc, #152]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6892      	ldr	r2, [r2, #8]
 800288c:	0211      	lsls	r1, r2, #8
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68d2      	ldr	r2, [r2, #12]
 8002892:	0912      	lsrs	r2, r2, #4
 8002894:	0452      	lsls	r2, r2, #17
 8002896:	430a      	orrs	r2, r1
 8002898:	491f      	ldr	r1, [pc, #124]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289a:	4313      	orrs	r3, r2
 800289c:	614b      	str	r3, [r1, #20]
 800289e:	e011      	b.n	80028c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6892      	ldr	r2, [r2, #8]
 80028b0:	0211      	lsls	r1, r2, #8
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6912      	ldr	r2, [r2, #16]
 80028b6:	0852      	lsrs	r2, r2, #1
 80028b8:	3a01      	subs	r2, #1
 80028ba:	0652      	lsls	r2, r2, #25
 80028bc:	430a      	orrs	r2, r1
 80028be:	4916      	ldr	r1, [pc, #88]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a13      	ldr	r2, [pc, #76]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7fe f9a6 	bl	8000c20 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028d6:	e009      	b.n	80028ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028d8:	f7fe f9a2 	bl	8000c20 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d902      	bls.n	80028ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	73fb      	strb	r3, [r7, #15]
          break;
 80028ea:	e005      	b.n	80028f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ef      	beq.n	80028d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	4904      	ldr	r1, [pc, #16]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	4313      	orrs	r3, r2
 800290a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000

0800291c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e040      	b.n	80029b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe f82a 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fbe8 	bl	8003130 <UART_SetConfig>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e022      	b.n	80029b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fe94 	bl	80036a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 ff1b 	bl	80037e4 <UART_CheckIdleState>
 80029ae:	4603      	mov	r3, r0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b08b      	sub	sp, #44	; 0x2c
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d156      	bne.n	8002a7c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_UART_Transmit_IT+0x22>
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e04f      	b.n	8002a7e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_UART_Transmit_IT+0x34>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e048      	b.n	8002a7e <HAL_UART_Transmit_IT+0xc6>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	88fa      	ldrh	r2, [r7, #6]
 8002a06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2221      	movs	r2, #33	; 0x21
 8002a1c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a26:	d107      	bne.n	8002a38 <HAL_UART_Transmit_IT+0x80>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <HAL_UART_Transmit_IT+0xd4>)
 8002a34:	669a      	str	r2, [r3, #104]	; 0x68
 8002a36:	e002      	b.n	8002a3e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <HAL_UART_Transmit_IT+0xd8>)
 8002a3c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	e853 3f00 	ldrex	r3, [r3]
 8002a52:	613b      	str	r3, [r7, #16]
   return(result);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a68:	69f9      	ldr	r1, [r7, #28]
 8002a6a:	6a3a      	ldr	r2, [r7, #32]
 8002a6c:	e841 2300 	strex	r3, r2, [r1]
 8002a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e6      	bne.n	8002a46 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e000      	b.n	8002a7e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
  }
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	372c      	adds	r7, #44	; 0x2c
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	08003d3f 	.word	0x08003d3f
 8002a90:	08003c87 	.word	0x08003c87

08002a94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d142      	bne.n	8002b30 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_UART_Receive_IT+0x22>
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e03b      	b.n	8002b32 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_UART_Receive_IT+0x34>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e034      	b.n	8002b32 <HAL_UART_Receive_IT+0x9e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_UART_Receive_IT+0xa8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d01f      	beq.n	8002b20 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d018      	beq.n	8002b20 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	e853 3f00 	ldrex	r3, [r3]
 8002afa:	613b      	str	r3, [r7, #16]
   return(result);
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	623b      	str	r3, [r7, #32]
 8002b0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b10:	69f9      	ldr	r1, [r7, #28]
 8002b12:	6a3a      	ldr	r2, [r7, #32]
 8002b14:	e841 2300 	strex	r3, r2, [r1]
 8002b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e6      	bne.n	8002aee <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 ff6a 	bl	8003a00 <UART_Start_Receive_IT>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	e000      	b.n	8002b32 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3728      	adds	r7, #40	; 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40008000 	.word	0x40008000

08002b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b0ba      	sub	sp, #232	; 0xe8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b6e:	4013      	ands	r3, r2
 8002b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d115      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00f      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d009      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 82a6 	beq.w	80030ea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
      }
      return;
 8002ba6:	e2a0      	b.n	80030ea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8117 	beq.w	8002de0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002bbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002bc2:	4b85      	ldr	r3, [pc, #532]	; (8002dd8 <HAL_UART_IRQHandler+0x298>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 810a 	beq.w	8002de0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d011      	beq.n	8002bfc <HAL_UART_IRQHandler+0xbc>
 8002bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00b      	beq.n	8002bfc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d011      	beq.n	8002c2c <HAL_UART_IRQHandler+0xec>
 8002c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00b      	beq.n	8002c2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c22:	f043 0204 	orr.w	r2, r3, #4
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d011      	beq.n	8002c5c <HAL_UART_IRQHandler+0x11c>
 8002c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00b      	beq.n	8002c5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2204      	movs	r2, #4
 8002c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c52:	f043 0202 	orr.w	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d017      	beq.n	8002c98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2208      	movs	r2, #8
 8002c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8e:	f043 0208 	orr.w	r2, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d012      	beq.n	8002cca <HAL_UART_IRQHandler+0x18a>
 8002ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00c      	beq.n	8002cca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 820c 	beq.w	80030ee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d005      	beq.n	8002d22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d04f      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 ff36 	bl	8003b94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d141      	bne.n	8002dba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1d9      	bne.n	8002d36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d013      	beq.n	8002db2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <HAL_UART_IRQHandler+0x29c>)
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe f89d 	bl	8000ed6 <HAL_DMA_Abort_IT>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d017      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002dac:	4610      	mov	r0, r2
 8002dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	e00f      	b.n	8002dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f9a6 	bl	8003104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	e00b      	b.n	8002dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f9a2 	bl	8003104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	e007      	b.n	8002dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f99e 	bl	8003104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002dd0:	e18d      	b.n	80030ee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd2:	bf00      	nop
    return;
 8002dd4:	e18b      	b.n	80030ee <HAL_UART_IRQHandler+0x5ae>
 8002dd6:	bf00      	nop
 8002dd8:	04000120 	.word	0x04000120
 8002ddc:	08003c5b 	.word	0x08003c5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	f040 8146 	bne.w	8003076 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 813f 	beq.w	8003076 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8138 	beq.w	8003076 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	f040 80b4 	bne.w	8002f86 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 815f 	beq.w	80030f2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	f080 8157 	bcs.w	80030f2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 8085 	bne.w	8002f6a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1da      	bne.n	8002e60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3308      	adds	r3, #8
 8002eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3308      	adds	r3, #8
 8002eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e1      	bne.n	8002eaa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3308      	adds	r3, #8
 8002eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef0:	e853 3f00 	ldrex	r3, [r3]
 8002ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3308      	adds	r3, #8
 8002f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e3      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f3a:	f023 0310 	bic.w	r3, r3, #16
 8002f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f4e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e4      	bne.n	8002f2a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd ff78 	bl	8000e5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f8ca 	bl	8003118 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f84:	e0b5      	b.n	80030f2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80a7 	beq.w	80030f6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a2 	beq.w	80030f6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	e853 3f00 	ldrex	r3, [r3]
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e4      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3308      	adds	r3, #8
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	e853 3f00 	ldrex	r3, [r3]
 8002ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3308      	adds	r3, #8
 8003008:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800300c:	633a      	str	r2, [r7, #48]	; 0x30
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003014:	e841 2300 	strex	r3, r2, [r1]
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e3      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	e853 3f00 	ldrex	r3, [r3]
 800303e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0310 	bic.w	r3, r3, #16
 8003046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	69b9      	ldr	r1, [r7, #24]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	e841 2300 	strex	r3, r2, [r1]
 8003060:	617b      	str	r3, [r7, #20]
   return(result);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e4      	bne.n	8003032 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800306c:	4619      	mov	r1, r3
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f852 	bl	8003118 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003074:	e03f      	b.n	80030f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800307a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00e      	beq.n	80030a0 <HAL_UART_IRQHandler+0x560>
 8003082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003096:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f001 f83a 	bl	8004112 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800309e:	e02d      	b.n	80030fc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00e      	beq.n	80030ca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01c      	beq.n	80030fa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
    }
    return;
 80030c8:	e017      	b.n	80030fa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <HAL_UART_IRQHandler+0x5bc>
 80030d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fe8b 	bl	8003dfe <UART_EndTransmit_IT>
    return;
 80030e8:	e008      	b.n	80030fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80030ea:	bf00      	nop
 80030ec:	e006      	b.n	80030fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80030ee:	bf00      	nop
 80030f0:	e004      	b.n	80030fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80030f2:	bf00      	nop
 80030f4:	e002      	b.n	80030fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80030f6:	bf00      	nop
 80030f8:	e000      	b.n	80030fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80030fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80030fc:	37e8      	adds	r7, #232	; 0xe8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop

08003104 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003134:	b08a      	sub	sp, #40	; 0x28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	431a      	orrs	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	4313      	orrs	r3, r2
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4ba4      	ldr	r3, [pc, #656]	; (80033f0 <UART_SetConfig+0x2c0>)
 8003160:	4013      	ands	r3, r2
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003168:	430b      	orrs	r3, r1
 800316a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a99      	ldr	r2, [pc, #612]	; (80033f4 <UART_SetConfig+0x2c4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d004      	beq.n	800319c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003198:	4313      	orrs	r3, r2
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ac:	430a      	orrs	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a90      	ldr	r2, [pc, #576]	; (80033f8 <UART_SetConfig+0x2c8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d126      	bne.n	8003208 <UART_SetConfig+0xd8>
 80031ba:	4b90      	ldr	r3, [pc, #576]	; (80033fc <UART_SetConfig+0x2cc>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d81b      	bhi.n	8003200 <UART_SetConfig+0xd0>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0xa0>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031f1 	.word	0x080031f1
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031f9 	.word	0x080031f9
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e6:	e116      	b.n	8003416 <UART_SetConfig+0x2e6>
 80031e8:	2302      	movs	r3, #2
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ee:	e112      	b.n	8003416 <UART_SetConfig+0x2e6>
 80031f0:	2304      	movs	r3, #4
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f6:	e10e      	b.n	8003416 <UART_SetConfig+0x2e6>
 80031f8:	2308      	movs	r3, #8
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fe:	e10a      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003200:	2310      	movs	r3, #16
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	e106      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7c      	ldr	r2, [pc, #496]	; (8003400 <UART_SetConfig+0x2d0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d138      	bne.n	8003284 <UART_SetConfig+0x154>
 8003212:	4b7a      	ldr	r3, [pc, #488]	; (80033fc <UART_SetConfig+0x2cc>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d82d      	bhi.n	800327c <UART_SetConfig+0x14c>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <UART_SetConfig+0xf8>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800325d 	.word	0x0800325d
 800322c:	0800327d 	.word	0x0800327d
 8003230:	0800327d 	.word	0x0800327d
 8003234:	0800327d 	.word	0x0800327d
 8003238:	0800326d 	.word	0x0800326d
 800323c:	0800327d 	.word	0x0800327d
 8003240:	0800327d 	.word	0x0800327d
 8003244:	0800327d 	.word	0x0800327d
 8003248:	08003265 	.word	0x08003265
 800324c:	0800327d 	.word	0x0800327d
 8003250:	0800327d 	.word	0x0800327d
 8003254:	0800327d 	.word	0x0800327d
 8003258:	08003275 	.word	0x08003275
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003262:	e0d8      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003264:	2302      	movs	r3, #2
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326a:	e0d4      	b.n	8003416 <UART_SetConfig+0x2e6>
 800326c:	2304      	movs	r3, #4
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003272:	e0d0      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003274:	2308      	movs	r3, #8
 8003276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327a:	e0cc      	b.n	8003416 <UART_SetConfig+0x2e6>
 800327c:	2310      	movs	r3, #16
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	e0c8      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a5e      	ldr	r2, [pc, #376]	; (8003404 <UART_SetConfig+0x2d4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d125      	bne.n	80032da <UART_SetConfig+0x1aa>
 800328e:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <UART_SetConfig+0x2cc>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003298:	2b30      	cmp	r3, #48	; 0x30
 800329a:	d016      	beq.n	80032ca <UART_SetConfig+0x19a>
 800329c:	2b30      	cmp	r3, #48	; 0x30
 800329e:	d818      	bhi.n	80032d2 <UART_SetConfig+0x1a2>
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d00a      	beq.n	80032ba <UART_SetConfig+0x18a>
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d814      	bhi.n	80032d2 <UART_SetConfig+0x1a2>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <UART_SetConfig+0x182>
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d008      	beq.n	80032c2 <UART_SetConfig+0x192>
 80032b0:	e00f      	b.n	80032d2 <UART_SetConfig+0x1a2>
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b8:	e0ad      	b.n	8003416 <UART_SetConfig+0x2e6>
 80032ba:	2302      	movs	r3, #2
 80032bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c0:	e0a9      	b.n	8003416 <UART_SetConfig+0x2e6>
 80032c2:	2304      	movs	r3, #4
 80032c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c8:	e0a5      	b.n	8003416 <UART_SetConfig+0x2e6>
 80032ca:	2308      	movs	r3, #8
 80032cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d0:	e0a1      	b.n	8003416 <UART_SetConfig+0x2e6>
 80032d2:	2310      	movs	r3, #16
 80032d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d8:	e09d      	b.n	8003416 <UART_SetConfig+0x2e6>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a4a      	ldr	r2, [pc, #296]	; (8003408 <UART_SetConfig+0x2d8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d125      	bne.n	8003330 <UART_SetConfig+0x200>
 80032e4:	4b45      	ldr	r3, [pc, #276]	; (80033fc <UART_SetConfig+0x2cc>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032ee:	2bc0      	cmp	r3, #192	; 0xc0
 80032f0:	d016      	beq.n	8003320 <UART_SetConfig+0x1f0>
 80032f2:	2bc0      	cmp	r3, #192	; 0xc0
 80032f4:	d818      	bhi.n	8003328 <UART_SetConfig+0x1f8>
 80032f6:	2b80      	cmp	r3, #128	; 0x80
 80032f8:	d00a      	beq.n	8003310 <UART_SetConfig+0x1e0>
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d814      	bhi.n	8003328 <UART_SetConfig+0x1f8>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <UART_SetConfig+0x1d8>
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d008      	beq.n	8003318 <UART_SetConfig+0x1e8>
 8003306:	e00f      	b.n	8003328 <UART_SetConfig+0x1f8>
 8003308:	2300      	movs	r3, #0
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e082      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003310:	2302      	movs	r3, #2
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003316:	e07e      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003318:	2304      	movs	r3, #4
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331e:	e07a      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003320:	2308      	movs	r3, #8
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003326:	e076      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003328:	2310      	movs	r3, #16
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332e:	e072      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a35      	ldr	r2, [pc, #212]	; (800340c <UART_SetConfig+0x2dc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d12a      	bne.n	8003390 <UART_SetConfig+0x260>
 800333a:	4b30      	ldr	r3, [pc, #192]	; (80033fc <UART_SetConfig+0x2cc>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003348:	d01a      	beq.n	8003380 <UART_SetConfig+0x250>
 800334a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334e:	d81b      	bhi.n	8003388 <UART_SetConfig+0x258>
 8003350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003354:	d00c      	beq.n	8003370 <UART_SetConfig+0x240>
 8003356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335a:	d815      	bhi.n	8003388 <UART_SetConfig+0x258>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <UART_SetConfig+0x238>
 8003360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003364:	d008      	beq.n	8003378 <UART_SetConfig+0x248>
 8003366:	e00f      	b.n	8003388 <UART_SetConfig+0x258>
 8003368:	2300      	movs	r3, #0
 800336a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336e:	e052      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003370:	2302      	movs	r3, #2
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003376:	e04e      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003378:	2304      	movs	r3, #4
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337e:	e04a      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003380:	2308      	movs	r3, #8
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003386:	e046      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003388:	2310      	movs	r3, #16
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338e:	e042      	b.n	8003416 <UART_SetConfig+0x2e6>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <UART_SetConfig+0x2c4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d13a      	bne.n	8003410 <UART_SetConfig+0x2e0>
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <UART_SetConfig+0x2cc>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033a8:	d01a      	beq.n	80033e0 <UART_SetConfig+0x2b0>
 80033aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033ae:	d81b      	bhi.n	80033e8 <UART_SetConfig+0x2b8>
 80033b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b4:	d00c      	beq.n	80033d0 <UART_SetConfig+0x2a0>
 80033b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ba:	d815      	bhi.n	80033e8 <UART_SetConfig+0x2b8>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <UART_SetConfig+0x298>
 80033c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c4:	d008      	beq.n	80033d8 <UART_SetConfig+0x2a8>
 80033c6:	e00f      	b.n	80033e8 <UART_SetConfig+0x2b8>
 80033c8:	2300      	movs	r3, #0
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ce:	e022      	b.n	8003416 <UART_SetConfig+0x2e6>
 80033d0:	2302      	movs	r3, #2
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d6:	e01e      	b.n	8003416 <UART_SetConfig+0x2e6>
 80033d8:	2304      	movs	r3, #4
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033de:	e01a      	b.n	8003416 <UART_SetConfig+0x2e6>
 80033e0:	2308      	movs	r3, #8
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e6:	e016      	b.n	8003416 <UART_SetConfig+0x2e6>
 80033e8:	2310      	movs	r3, #16
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ee:	e012      	b.n	8003416 <UART_SetConfig+0x2e6>
 80033f0:	efff69f3 	.word	0xefff69f3
 80033f4:	40008000 	.word	0x40008000
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	40005000 	.word	0x40005000
 8003410:	2310      	movs	r3, #16
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a9f      	ldr	r2, [pc, #636]	; (8003698 <UART_SetConfig+0x568>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d17a      	bne.n	8003516 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003424:	2b08      	cmp	r3, #8
 8003426:	d824      	bhi.n	8003472 <UART_SetConfig+0x342>
 8003428:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <UART_SetConfig+0x300>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003455 	.word	0x08003455
 8003434:	08003473 	.word	0x08003473
 8003438:	0800345d 	.word	0x0800345d
 800343c:	08003473 	.word	0x08003473
 8003440:	08003463 	.word	0x08003463
 8003444:	08003473 	.word	0x08003473
 8003448:	08003473 	.word	0x08003473
 800344c:	08003473 	.word	0x08003473
 8003450:	0800346b 	.word	0x0800346b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003454:	f7fe fd1a 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 8003458:	61f8      	str	r0, [r7, #28]
        break;
 800345a:	e010      	b.n	800347e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800345c:	4b8f      	ldr	r3, [pc, #572]	; (800369c <UART_SetConfig+0x56c>)
 800345e:	61fb      	str	r3, [r7, #28]
        break;
 8003460:	e00d      	b.n	800347e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003462:	f7fe fc7b 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8003466:	61f8      	str	r0, [r7, #28]
        break;
 8003468:	e009      	b.n	800347e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800346e:	61fb      	str	r3, [r7, #28]
        break;
 8003470:	e005      	b.n	800347e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800347c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80fb 	beq.w	800367c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	429a      	cmp	r2, r3
 8003494:	d305      	bcc.n	80034a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d903      	bls.n	80034aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034a8:	e0e8      	b.n	800367c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2200      	movs	r2, #0
 80034ae:	461c      	mov	r4, r3
 80034b0:	4615      	mov	r5, r2
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	022b      	lsls	r3, r5, #8
 80034bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034c0:	0222      	lsls	r2, r4, #8
 80034c2:	68f9      	ldr	r1, [r7, #12]
 80034c4:	6849      	ldr	r1, [r1, #4]
 80034c6:	0849      	lsrs	r1, r1, #1
 80034c8:	2000      	movs	r0, #0
 80034ca:	4688      	mov	r8, r1
 80034cc:	4681      	mov	r9, r0
 80034ce:	eb12 0a08 	adds.w	sl, r2, r8
 80034d2:	eb43 0b09 	adc.w	fp, r3, r9
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034e4:	4650      	mov	r0, sl
 80034e6:	4659      	mov	r1, fp
 80034e8:	f7fc fe6e 	bl	80001c8 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4613      	mov	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034fa:	d308      	bcc.n	800350e <UART_SetConfig+0x3de>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003502:	d204      	bcs.n	800350e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	e0b6      	b.n	800367c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003514:	e0b2      	b.n	800367c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351e:	d15e      	bne.n	80035de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003524:	2b08      	cmp	r3, #8
 8003526:	d828      	bhi.n	800357a <UART_SetConfig+0x44a>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <UART_SetConfig+0x400>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003555 	.word	0x08003555
 8003534:	0800355d 	.word	0x0800355d
 8003538:	08003565 	.word	0x08003565
 800353c:	0800357b 	.word	0x0800357b
 8003540:	0800356b 	.word	0x0800356b
 8003544:	0800357b 	.word	0x0800357b
 8003548:	0800357b 	.word	0x0800357b
 800354c:	0800357b 	.word	0x0800357b
 8003550:	08003573 	.word	0x08003573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003554:	f7fe fc9a 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 8003558:	61f8      	str	r0, [r7, #28]
        break;
 800355a:	e014      	b.n	8003586 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800355c:	f7fe fcac 	bl	8001eb8 <HAL_RCC_GetPCLK2Freq>
 8003560:	61f8      	str	r0, [r7, #28]
        break;
 8003562:	e010      	b.n	8003586 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003564:	4b4d      	ldr	r3, [pc, #308]	; (800369c <UART_SetConfig+0x56c>)
 8003566:	61fb      	str	r3, [r7, #28]
        break;
 8003568:	e00d      	b.n	8003586 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800356a:	f7fe fbf7 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 800356e:	61f8      	str	r0, [r7, #28]
        break;
 8003570:	e009      	b.n	8003586 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003576:	61fb      	str	r3, [r7, #28]
        break;
 8003578:	e005      	b.n	8003586 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d077      	beq.n	800367c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005a      	lsls	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	441a      	add	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b0f      	cmp	r3, #15
 80035a6:	d916      	bls.n	80035d6 <UART_SetConfig+0x4a6>
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ae:	d212      	bcs.n	80035d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f023 030f 	bic.w	r3, r3, #15
 80035b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	8afb      	ldrh	r3, [r7, #22]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	8afa      	ldrh	r2, [r7, #22]
 80035d2:	60da      	str	r2, [r3, #12]
 80035d4:	e052      	b.n	800367c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035dc:	e04e      	b.n	800367c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d827      	bhi.n	8003636 <UART_SetConfig+0x506>
 80035e6:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <UART_SetConfig+0x4bc>)
 80035e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ec:	08003611 	.word	0x08003611
 80035f0:	08003619 	.word	0x08003619
 80035f4:	08003621 	.word	0x08003621
 80035f8:	08003637 	.word	0x08003637
 80035fc:	08003627 	.word	0x08003627
 8003600:	08003637 	.word	0x08003637
 8003604:	08003637 	.word	0x08003637
 8003608:	08003637 	.word	0x08003637
 800360c:	0800362f 	.word	0x0800362f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003610:	f7fe fc3c 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 8003614:	61f8      	str	r0, [r7, #28]
        break;
 8003616:	e014      	b.n	8003642 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003618:	f7fe fc4e 	bl	8001eb8 <HAL_RCC_GetPCLK2Freq>
 800361c:	61f8      	str	r0, [r7, #28]
        break;
 800361e:	e010      	b.n	8003642 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003620:	4b1e      	ldr	r3, [pc, #120]	; (800369c <UART_SetConfig+0x56c>)
 8003622:	61fb      	str	r3, [r7, #28]
        break;
 8003624:	e00d      	b.n	8003642 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003626:	f7fe fb99 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 800362a:	61f8      	str	r0, [r7, #28]
        break;
 800362c:	e009      	b.n	8003642 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800362e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003632:	61fb      	str	r3, [r7, #28]
        break;
 8003634:	e005      	b.n	8003642 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003640:	bf00      	nop
    }

    if (pclk != 0U)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d019      	beq.n	800367c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	085a      	lsrs	r2, r3, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	d909      	bls.n	8003676 <UART_SetConfig+0x546>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003668:	d205      	bcs.n	8003676 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60da      	str	r2, [r3, #12]
 8003674:	e002      	b.n	800367c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003688:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800368c:	4618      	mov	r0, r3
 800368e:	3728      	adds	r7, #40	; 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003696:	bf00      	nop
 8003698:	40008000 	.word	0x40008000
 800369c:	00f42400 	.word	0x00f42400

080036a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01a      	beq.n	80037b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800379e:	d10a      	bne.n	80037b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	605a      	str	r2, [r3, #4]
  }
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037f4:	f7fd fa14 	bl	8000c20 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b08      	cmp	r3, #8
 8003806:	d10e      	bne.n	8003826 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f82d 	bl	8003876 <UART_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e023      	b.n	800386e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d10e      	bne.n	8003852 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f817 	bl	8003876 <UART_WaitOnFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e00d      	b.n	800386e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b09c      	sub	sp, #112	; 0x70
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003886:	e0a5      	b.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	f000 80a1 	beq.w	80039d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003892:	f7fd f9c5 	bl	8000c20 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80038a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d13e      	bne.n	8003926 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038bc:	667b      	str	r3, [r7, #100]	; 0x64
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038ce:	e841 2300 	strex	r3, r2, [r1]
 80038d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e6      	bne.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3308      	adds	r3, #8
 80038e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	663b      	str	r3, [r7, #96]	; 0x60
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3308      	adds	r3, #8
 80038f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80038fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e5      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e067      	b.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d04f      	beq.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800393e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003942:	d147      	bne.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800394c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003962:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396c:	637b      	str	r3, [r7, #52]	; 0x34
 800396e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e6      	bne.n	800394e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3308      	adds	r3, #8
 8003986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	613b      	str	r3, [r7, #16]
   return(result);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	66bb      	str	r3, [r7, #104]	; 0x68
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3308      	adds	r3, #8
 800399e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039a0:	623a      	str	r2, [r7, #32]
 80039a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	69f9      	ldr	r1, [r7, #28]
 80039a6:	6a3a      	ldr	r2, [r7, #32]
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e5      	bne.n	8003980 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e010      	b.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4013      	ands	r3, r2
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	f43f af4a 	beq.w	8003888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3770      	adds	r7, #112	; 0x70
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b097      	sub	sp, #92	; 0x5c
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	d10e      	bne.n	8003a52 <UART_Start_Receive_IT+0x52>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d105      	bne.n	8003a48 <UART_Start_Receive_IT+0x48>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a46:	e02d      	b.n	8003aa4 <UART_Start_Receive_IT+0xa4>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	22ff      	movs	r2, #255	; 0xff
 8003a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a50:	e028      	b.n	8003aa4 <UART_Start_Receive_IT+0xa4>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <UART_Start_Receive_IT+0x76>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <UART_Start_Receive_IT+0x6c>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	22ff      	movs	r2, #255	; 0xff
 8003a66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a6a:	e01b      	b.n	8003aa4 <UART_Start_Receive_IT+0xa4>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	227f      	movs	r2, #127	; 0x7f
 8003a70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a74:	e016      	b.n	8003aa4 <UART_Start_Receive_IT+0xa4>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7e:	d10d      	bne.n	8003a9c <UART_Start_Receive_IT+0x9c>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d104      	bne.n	8003a92 <UART_Start_Receive_IT+0x92>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	227f      	movs	r2, #127	; 0x7f
 8003a8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a90:	e008      	b.n	8003aa4 <UART_Start_Receive_IT+0xa4>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	223f      	movs	r2, #63	; 0x3f
 8003a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a9a:	e003      	b.n	8003aa4 <UART_Start_Receive_IT+0xa4>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2222      	movs	r2, #34	; 0x22
 8003ab0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	657b      	str	r3, [r7, #84]	; 0x54
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ad2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ad4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ada:	e841 2300 	strex	r3, r2, [r1]
 8003ade:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1e5      	bne.n	8003ab2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aee:	d107      	bne.n	8003b00 <UART_Start_Receive_IT+0x100>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d103      	bne.n	8003b00 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a24      	ldr	r2, [pc, #144]	; (8003b8c <UART_Start_Receive_IT+0x18c>)
 8003afc:	665a      	str	r2, [r3, #100]	; 0x64
 8003afe:	e002      	b.n	8003b06 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a23      	ldr	r2, [pc, #140]	; (8003b90 <UART_Start_Receive_IT+0x190>)
 8003b04:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d019      	beq.n	8003b4a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
 8003b36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e6      	bne.n	8003b16 <UART_Start_Receive_IT+0x116>
 8003b48:	e018      	b.n	8003b7c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	613b      	str	r3, [r7, #16]
   return(result);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f043 0320 	orr.w	r3, r3, #32
 8003b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b68:	623b      	str	r3, [r7, #32]
 8003b6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	69f9      	ldr	r1, [r7, #28]
 8003b6e:	6a3a      	ldr	r2, [r7, #32]
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e6      	bne.n	8003b4a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	375c      	adds	r7, #92	; 0x5c
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	08003fb3 	.word	0x08003fb3
 8003b90:	08003e53 	.word	0x08003e53

08003b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b095      	sub	sp, #84	; 0x54
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bba:	643b      	str	r3, [r7, #64]	; 0x40
 8003bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bc2:	e841 2300 	strex	r3, r2, [r1]
 8003bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e6      	bne.n	8003b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3308      	adds	r3, #8
 8003bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e5      	bne.n	8003bce <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d118      	bne.n	8003c3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f023 0310 	bic.w	r3, r3, #16
 8003c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6979      	ldr	r1, [r7, #20]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	613b      	str	r3, [r7, #16]
   return(result);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e6      	bne.n	8003c0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003c4e:	bf00      	nop
 8003c50:	3754      	adds	r7, #84	; 0x54
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fa43 	bl	8003104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b08f      	sub	sp, #60	; 0x3c
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c92:	2b21      	cmp	r3, #33	; 0x21
 8003c94:	d14d      	bne.n	8003d32 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d132      	bne.n	8003d08 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e6      	bne.n	8003ca2 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6979      	ldr	r1, [r7, #20]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e6      	bne.n	8003cd4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003d06:	e014      	b.n	8003d32 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	b292      	uxth	r2, r2
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003d32:	bf00      	nop
 8003d34:	373c      	adds	r7, #60	; 0x3c
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b091      	sub	sp, #68	; 0x44
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d4a:	2b21      	cmp	r3, #33	; 0x21
 8003d4c:	d151      	bne.n	8003df2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d132      	bne.n	8003dc0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	623b      	str	r3, [r7, #32]
   return(result);
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	633b      	str	r3, [r7, #48]	; 0x30
 8003d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e6      	bne.n	8003d5a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	617b      	str	r3, [r7, #20]
   return(result);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e6      	bne.n	8003d8c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003dbe:	e018      	b.n	8003df2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc8:	881a      	ldrh	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	1c9a      	adds	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003df2:	bf00      	nop
 8003df4:	3744      	adds	r7, #68	; 0x44
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b088      	sub	sp, #32
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6979      	ldr	r1, [r7, #20]
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	613b      	str	r3, [r7, #16]
   return(result);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e6      	bne.n	8003e06 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fc fb63 	bl	8000510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4a:	bf00      	nop
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b096      	sub	sp, #88	; 0x58
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e68:	2b22      	cmp	r3, #34	; 0x22
 8003e6a:	f040 8094 	bne.w	8003f96 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e78:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e7c:	b2d9      	uxtb	r1, r3
 8003e7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	400a      	ands	r2, r1
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d179      	bne.n	8003faa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eca:	653b      	str	r3, [r7, #80]	; 0x50
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e6      	bne.n	8003eb6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f08:	633a      	str	r2, [r7, #48]	; 0x30
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e5      	bne.n	8003ee8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d12e      	bne.n	8003f8e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0310 	bic.w	r3, r3, #16
 8003f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	69b9      	ldr	r1, [r7, #24]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	617b      	str	r3, [r7, #20]
   return(result);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e6      	bne.n	8003f36 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d103      	bne.n	8003f7e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2210      	movs	r2, #16
 8003f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f84:	4619      	mov	r1, r3
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff f8c6 	bl	8003118 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f8c:	e00d      	b.n	8003faa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fc fadc 	bl	800054c <HAL_UART_RxCpltCallback>
}
 8003f94:	e009      	b.n	8003faa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	8b1b      	ldrh	r3, [r3, #24]
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0208 	orr.w	r2, r2, #8
 8003fa6:	b292      	uxth	r2, r2
 8003fa8:	831a      	strh	r2, [r3, #24]
}
 8003faa:	bf00      	nop
 8003fac:	3758      	adds	r7, #88	; 0x58
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b096      	sub	sp, #88	; 0x58
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc8:	2b22      	cmp	r3, #34	; 0x22
 8003fca:	f040 8094 	bne.w	80040f6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fd4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003fde:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003fe2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	1c9a      	adds	r2, r3, #2
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d179      	bne.n	800410a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800402a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004034:	643b      	str	r3, [r7, #64]	; 0x40
 8004036:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800403a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e6      	bne.n	8004016 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3308      	adds	r3, #8
 800404e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	61fb      	str	r3, [r7, #28]
   return(result);
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3308      	adds	r3, #8
 8004066:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004068:	62fa      	str	r2, [r7, #44]	; 0x2c
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800406e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e5      	bne.n	8004048 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	2b01      	cmp	r3, #1
 800408e:	d12e      	bne.n	80040ee <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f023 0310 	bic.w	r3, r3, #16
 80040aa:	647b      	str	r3, [r7, #68]	; 0x44
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6979      	ldr	r1, [r7, #20]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	613b      	str	r3, [r7, #16]
   return(result);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e6      	bne.n	8004096 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d103      	bne.n	80040de <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2210      	movs	r2, #16
 80040dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040e4:	4619      	mov	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff f816 	bl	8003118 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040ec:	e00d      	b.n	800410a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fc fa2c 	bl	800054c <HAL_UART_RxCpltCallback>
}
 80040f4:	e009      	b.n	800410a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	8b1b      	ldrh	r3, [r3, #24]
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0208 	orr.w	r2, r2, #8
 8004106:	b292      	uxth	r2, r2
 8004108:	831a      	strh	r2, [r3, #24]
}
 800410a:	bf00      	nop
 800410c:	3758      	adds	r7, #88	; 0x58
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <__libc_init_array>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	4d0d      	ldr	r5, [pc, #52]	; (8004160 <__libc_init_array+0x38>)
 800412c:	4c0d      	ldr	r4, [pc, #52]	; (8004164 <__libc_init_array+0x3c>)
 800412e:	1b64      	subs	r4, r4, r5
 8004130:	10a4      	asrs	r4, r4, #2
 8004132:	2600      	movs	r6, #0
 8004134:	42a6      	cmp	r6, r4
 8004136:	d109      	bne.n	800414c <__libc_init_array+0x24>
 8004138:	4d0b      	ldr	r5, [pc, #44]	; (8004168 <__libc_init_array+0x40>)
 800413a:	4c0c      	ldr	r4, [pc, #48]	; (800416c <__libc_init_array+0x44>)
 800413c:	f000 f820 	bl	8004180 <_init>
 8004140:	1b64      	subs	r4, r4, r5
 8004142:	10a4      	asrs	r4, r4, #2
 8004144:	2600      	movs	r6, #0
 8004146:	42a6      	cmp	r6, r4
 8004148:	d105      	bne.n	8004156 <__libc_init_array+0x2e>
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004150:	4798      	blx	r3
 8004152:	3601      	adds	r6, #1
 8004154:	e7ee      	b.n	8004134 <__libc_init_array+0xc>
 8004156:	f855 3b04 	ldr.w	r3, [r5], #4
 800415a:	4798      	blx	r3
 800415c:	3601      	adds	r6, #1
 800415e:	e7f2      	b.n	8004146 <__libc_init_array+0x1e>
 8004160:	080041e8 	.word	0x080041e8
 8004164:	080041e8 	.word	0x080041e8
 8004168:	080041e8 	.word	0x080041e8
 800416c:	080041ec 	.word	0x080041ec

08004170 <memset>:
 8004170:	4402      	add	r2, r0
 8004172:	4603      	mov	r3, r0
 8004174:	4293      	cmp	r3, r2
 8004176:	d100      	bne.n	800417a <memset+0xa>
 8004178:	4770      	bx	lr
 800417a:	f803 1b01 	strb.w	r1, [r3], #1
 800417e:	e7f9      	b.n	8004174 <memset+0x4>

08004180 <_init>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	bf00      	nop
 8004184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004186:	bc08      	pop	{r3}
 8004188:	469e      	mov	lr, r3
 800418a:	4770      	bx	lr

0800418c <_fini>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	bf00      	nop
 8004190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004192:	bc08      	pop	{r3}
 8004194:	469e      	mov	lr, r3
 8004196:	4770      	bx	lr
