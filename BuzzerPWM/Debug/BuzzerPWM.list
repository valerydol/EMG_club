
BuzzerPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004abc  08004abc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac4  08004ac4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08004acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000003c  08004b08  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004b08  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010344  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d15  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  000320c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00032f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026178  00000000  00000000  00033cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffa5  00000000  00000000  00059e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0473  00000000  00000000  00069dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a240  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c5c  00000000  00000000  0015a290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a5c 	.word	0x08004a5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08004a5c 	.word	0x08004a5c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_PeriodElapsedCallback>:
bool isBuzzer = false;


// Period
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if(counter >= sizeof(tones)/sizeof(tones[0]) )
 80004d4:	4b20      	ldr	r3, [pc, #128]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b0b      	cmp	r3, #11
 80004da:	d909      	bls.n	80004f0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		counter = 0;
 80004dc:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 80004e2:	481e      	ldr	r0, [pc, #120]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80004e4:	f002 fbb0 	bl	8002c48 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim3);
 80004e8:	481d      	ldr	r0, [pc, #116]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80004ea:	f002 fbad 	bl	8002c48 <HAL_TIM_Base_Stop_IT>
		return;
 80004ee:	e030      	b.n	8000552 <HAL_TIM_PeriodElapsedCallback+0x86>
	}
	__HAL_TIM_SET_COUNTER(&htim3 , 0);// clock counter = 0
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000 / tones[counter] / 2); // period
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a19      	ldr	r2, [pc, #100]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80004fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000502:	f242 7210 	movw	r2, #10000	; 0x2710
 8000506:	fb92 f3f3 	sdiv	r3, r2, r3
 800050a:	0fda      	lsrs	r2, r3, #31
 800050c:	4413      	add	r3, r2
 800050e:	105b      	asrs	r3, r3, #1
 8000510:	461a      	mov	r2, r3
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_AUTORELOAD(&htim3,10000 / tones[counter]);// set new clock period
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800051e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000522:	f242 7210 	movw	r2, #10000	; 0x2710
 8000526:	fb92 f2f3 	sdiv	r2, r2, r3
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053a:	f242 7210 	movw	r2, #10000	; 0x2710
 800053e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000542:	461a      	mov	r2, r3
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000546:	60da      	str	r2, [r3, #12]
	counter++;
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	4a02      	ldr	r2, [pc, #8]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000550:	6013      	str	r3, [r2, #0]
}
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000174 	.word	0x20000174
 800055c:	200000a4 	.word	0x200000a4
 8000560:	20000058 	.word	0x20000058
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState state = HAL_GPIO_ReadPin(CLK_BTN_GPIO_Port, CLK_BTN_Pin);
 8000572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057a:	f000 fea5 	bl	80012c8 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	73fb      	strb	r3, [r7, #15]
	if(state == GPIO_PIN_RESET)
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d10a      	bne.n	800059e <HAL_GPIO_EXTI_Callback+0x36>
	{
		 HAL_TIM_Base_Start(&htim3);// start interrupts  HAL_TIM_PeriodElapsedCallbac
 8000588:	480c      	ldr	r0, [pc, #48]	; (80005bc <HAL_GPIO_EXTI_Callback+0x54>)
 800058a:	f002 fa5d 	bl	8002a48 <HAL_TIM_Base_Start>
		 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800058e:	2100      	movs	r1, #0
 8000590:	480a      	ldr	r0, [pc, #40]	; (80005bc <HAL_GPIO_EXTI_Callback+0x54>)
 8000592:	f002 fbe9 	bl	8002d68 <HAL_TIM_PWM_Start>
		 HAL_TIM_Base_Start_IT(&htim6);
 8000596:	480a      	ldr	r0, [pc, #40]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000598:	f002 fae6 	bl	8002b68 <HAL_TIM_Base_Start_IT>
	{
		HAL_TIM_Base_Stop(&htim3);
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		HAL_TIM_Base_Stop_IT(&htim6);
	}
}
 800059c:	e009      	b.n	80005b2 <HAL_GPIO_EXTI_Callback+0x4a>
		HAL_TIM_Base_Stop(&htim3);
 800059e:	4807      	ldr	r0, [pc, #28]	; (80005bc <HAL_GPIO_EXTI_Callback+0x54>)
 80005a0:	f002 faba 	bl	8002b18 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80005a4:	2100      	movs	r1, #0
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <HAL_GPIO_EXTI_Callback+0x54>)
 80005a8:	f002 fce4 	bl	8002f74 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim6);
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x58>)
 80005ae:	f002 fb4b 	bl	8002c48 <HAL_TIM_Base_Stop_IT>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000058 	.word	0x20000058
 80005c0:	200000a4 	.word	0x200000a4

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fb46 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f80f 	bl	80005ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f93e 	bl	8000850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f90c 	bl	80007f0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005d8:	f000 f85a 	bl	8000690 <MX_TIM3_Init>
  MX_TIM6_Init();
 80005dc:	f000 f8d0 	bl	8000780 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
 // HAL_NVIC_EnableIRQ(TIM6_IRQn); // turn on interrupts
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80005e0:	201d      	movs	r0, #29
 80005e2:	f000 fcac 	bl	8000f3e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005e6:	2036      	movs	r0, #54	; 0x36
 80005e8:	f000 fca9 	bl	8000f3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x28>

080005ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b096      	sub	sp, #88	; 0x58
 80005f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2244      	movs	r2, #68	; 0x44
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fa25 	bl	8004a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000610:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000614:	f000 feae 	bl	8001374 <HAL_PWREx_ControlVoltageScaling>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800061e:	f000 f995 	bl	800094c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063c:	230a      	movs	r3, #10
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000640:	2307      	movs	r3, #7
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fee5 	bl	8001420 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800065c:	f000 f976 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2303      	movs	r3, #3
 8000666:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	2104      	movs	r1, #4
 8000678:	4618      	mov	r0, r3
 800067a:	f001 faad 	bl	8001bd8 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000684:	f000 f962 	bl	800094c <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3758      	adds	r7, #88	; 0x58
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08e      	sub	sp, #56	; 0x38
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b0:	463b      	mov	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006c2:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <MX_TIM3_Init+0xe8>)
 80006c4:	4a2d      	ldr	r2, [pc, #180]	; (800077c <MX_TIM3_Init+0xec>)
 80006c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80006c8:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <MX_TIM3_Init+0xe8>)
 80006ca:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80006ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <MX_TIM3_Init+0xe8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 38;
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <MX_TIM3_Init+0xe8>)
 80006d8:	2226      	movs	r2, #38	; 0x26
 80006da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <MX_TIM3_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <MX_TIM3_Init+0xe8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006e8:	4823      	ldr	r0, [pc, #140]	; (8000778 <MX_TIM3_Init+0xe8>)
 80006ea:	f002 f955 	bl	8002998 <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80006f4:	f000 f92a 	bl	800094c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000702:	4619      	mov	r1, r3
 8000704:	481c      	ldr	r0, [pc, #112]	; (8000778 <MX_TIM3_Init+0xe8>)
 8000706:	f002 feff 	bl	8003508 <HAL_TIM_ConfigClockSource>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000710:	f000 f91c 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000714:	4818      	ldr	r0, [pc, #96]	; (8000778 <MX_TIM3_Init+0xe8>)
 8000716:	f002 fac6 	bl	8002ca6 <HAL_TIM_PWM_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000720:	f000 f914 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4811      	ldr	r0, [pc, #68]	; (8000778 <MX_TIM3_Init+0xe8>)
 8000734:	f003 fc0a 	bl	8003f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800073e:	f000 f905 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000742:	2360      	movs	r3, #96	; 0x60
 8000744:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 19;
 8000746:	2313      	movs	r3, #19
 8000748:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <MX_TIM3_Init+0xe8>)
 800075a:	f002 fdc1 	bl	80032e0 <HAL_TIM_PWM_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000764:	f000 f8f2 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000768:	4803      	ldr	r0, [pc, #12]	; (8000778 <MX_TIM3_Init+0xe8>)
 800076a:	f000 f95b 	bl	8000a24 <HAL_TIM_MspPostInit>

}
 800076e:	bf00      	nop
 8000770:	3738      	adds	r7, #56	; 0x38
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000058 	.word	0x20000058
 800077c:	40000400 	.word	0x40000400

08000780 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_TIM6_Init+0x68>)
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_TIM6_Init+0x6c>)
 8000794:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_TIM6_Init+0x68>)
 8000798:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800079c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_TIM6_Init+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_TIM6_Init+0x68>)
 80007a6:	f241 3287 	movw	r2, #4999	; 0x1387
 80007aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_TIM6_Init+0x68>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_TIM6_Init+0x68>)
 80007b4:	f002 f8f0 	bl	8002998 <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80007be:	f000 f8c5 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_TIM6_Init+0x68>)
 80007d0:	f003 fbbc 	bl	8003f4c <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80007da:	f000 f8b7 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000a4 	.word	0x200000a4
 80007ec:	40001000 	.word	0x40001000

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USART2_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <MX_USART2_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_USART2_UART_Init+0x58>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART2_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000834:	f003 fc30 	bl	8004098 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f885 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000f0 	.word	0x200000f0
 800084c:	40004400 	.word	0x40004400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b37      	ldr	r3, [pc, #220]	; (8000944 <MX_GPIO_Init+0xf4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a36      	ldr	r2, [pc, #216]	; (8000944 <MX_GPIO_Init+0xf4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b34      	ldr	r3, [pc, #208]	; (8000944 <MX_GPIO_Init+0xf4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	4b31      	ldr	r3, [pc, #196]	; (8000944 <MX_GPIO_Init+0xf4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a30      	ldr	r2, [pc, #192]	; (8000944 <MX_GPIO_Init+0xf4>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_GPIO_Init+0xf4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <MX_GPIO_Init+0xf4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a2a      	ldr	r2, [pc, #168]	; (8000944 <MX_GPIO_Init+0xf4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <MX_GPIO_Init+0xf4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b25      	ldr	r3, [pc, #148]	; (8000944 <MX_GPIO_Init+0xf4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a24      	ldr	r2, [pc, #144]	; (8000944 <MX_GPIO_Init+0xf4>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_GPIO_Init+0xf4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2120      	movs	r1, #32
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f000 fd13 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008d8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4817      	ldr	r0, [pc, #92]	; (8000948 <MX_GPIO_Init+0xf8>)
 80008ea:	f000 fb43 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ee:	2320      	movs	r3, #32
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f000 fb34 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_BTN_Pin */
  GPIO_InitStruct.Pin = CLK_BTN_Pin;
 800090c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000912:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_BTN_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f000 fb25 	bl	8000f74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2028      	movs	r0, #40	; 0x28
 8000930:	f000 fae9 	bl	8000f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000934:	2028      	movs	r0, #40	; 0x28
 8000936:	f000 fb02 	bl	8000f3e <HAL_NVIC_EnableIRQ>

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000
 8000948:	48000800 	.word	0x48000800

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_MspInit+0x44>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_MspInit+0x44>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6613      	str	r3, [r2, #96]	; 0x60
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_MspInit+0x44>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_MspInit+0x44>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6593      	str	r3, [r2, #88]	; 0x58
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1a      	ldr	r2, [pc, #104]	; (8000a18 <HAL_TIM_Base_MspInit+0x78>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d114      	bne.n	80009dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_TIM_Base_MspInit+0x7c>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_TIM_Base_MspInit+0x7c>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6593      	str	r3, [r2, #88]	; 0x58
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_TIM_Base_MspInit+0x7c>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	201d      	movs	r0, #29
 80009d0:	f000 fa99 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009d4:	201d      	movs	r0, #29
 80009d6:	f000 fab2 	bl	8000f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80009da:	e018      	b.n	8000a0e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <HAL_TIM_Base_MspInit+0x80>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d113      	bne.n	8000a0e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_TIM_Base_MspInit+0x7c>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <HAL_TIM_Base_MspInit+0x7c>)
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	6593      	str	r3, [r2, #88]	; 0x58
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_TIM_Base_MspInit+0x7c>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2036      	movs	r0, #54	; 0x36
 8000a04:	f000 fa7f 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a08:	2036      	movs	r0, #54	; 0x36
 8000a0a:	f000 fa98 	bl	8000f3e <HAL_NVIC_EnableIRQ>
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40000400 	.word	0x40000400
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40001000 	.word	0x40001000

08000a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <HAL_TIM_MspPostInit+0x64>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d11b      	bne.n	8000a7e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_TIM_MspPostInit+0x68>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_TIM_MspPostInit+0x68>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_TIM_MspPostInit+0x68>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_TIM_MspPostInit+0x6c>)
 8000a7a:	f000 fa7b 	bl	8000f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40000400 	.word	0x40000400
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000400 	.word	0x48000400

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b0ac      	sub	sp, #176	; 0xb0
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2288      	movs	r2, #136	; 0x88
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 ffc9 	bl	8004a4c <memset>
  if(huart->Instance==USART2)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <HAL_UART_MspInit+0xb0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d13b      	bne.n	8000b3c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 faa5 	bl	8002020 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000adc:	f7ff ff36 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_UART_MspInit+0xb4>)
 8000ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae4:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <HAL_UART_MspInit+0xb4>)
 8000ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aea:	6593      	str	r3, [r2, #88]	; 0x58
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_UART_MspInit+0xb4>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_UART_MspInit+0xb4>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <HAL_UART_MspInit+0xb4>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_UART_MspInit+0xb4>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b10:	230c      	movs	r3, #12
 8000b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 fa1c 	bl	8000f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	37b0      	adds	r7, #176	; 0xb0
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40021000 	.word	0x40021000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f8ba 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <TIM3_IRQHandler+0x10>)
 8000ba6:	f002 fa7b 	bl	80030a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000058 	.word	0x20000058

08000bb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CLK_BTN_Pin);
 8000bb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bbc:	f000 fbb4 	bl	8001328 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bc4:	f000 fbb0 	bl	8001328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <TIM6_DAC_IRQHandler+0x10>)
 8000bd2:	f002 fa65 	bl	80030a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000a4 	.word	0x200000a4

08000be0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c08:	f7ff ffea 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopForever+0xe>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopForever+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c32:	f003 fee7 	bl	8004a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c36:	f7ff fcc5 	bl	80005c4 <main>

08000c3a <LoopForever>:

LoopForever:
    b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000c48:	08004acc 	.word	0x08004acc
  ldr r2, =_sbss
 8000c4c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000c50:	2000017c 	.word	0x2000017c

08000c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_2_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_Init+0x3c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <HAL_Init+0x3c>)
 8000c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6e:	2003      	movs	r0, #3
 8000c70:	f000 f93e 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 f80f 	bl	8000c98 <HAL_InitTick>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	e001      	b.n	8000c8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c86:	f7ff fe67 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_InitTick+0x6c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d023      	beq.n	8000cf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_InitTick+0x70>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <HAL_InitTick+0x6c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f949 	bl	8000f5a <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10f      	bne.n	8000cee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d809      	bhi.n	8000ce8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f913 	bl	8000f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_InitTick+0x74>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e007      	b.n	8000cf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e004      	b.n	8000cf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e001      	b.n	8000cf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000038 	.word	0x20000038
 8000d08:	20000030 	.word	0x20000030
 8000d0c:	20000034 	.word	0x20000034

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000038 	.word	0x20000038
 8000d34:	20000178 	.word	0x20000178

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000178 	.word	0x20000178

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff29 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff3e 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff31 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa2 	bl	8000eac <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f82:	e17f      	b.n	8001284 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8171 	beq.w	800127e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d005      	beq.n	8000fb4 <HAL_GPIO_Init+0x40>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d130      	bne.n	8001016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fea:	2201      	movs	r2, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	f003 0201 	and.w	r2, r3, #1
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b03      	cmp	r3, #3
 8001020:	d118      	bne.n	8001054 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001028:	2201      	movs	r2, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	08db      	lsrs	r3, r3, #3
 800103e:	f003 0201 	and.w	r2, r3, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b03      	cmp	r3, #3
 800105e:	d017      	beq.n	8001090 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d123      	bne.n	80010e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	08da      	lsrs	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3208      	adds	r2, #8
 80010de:	6939      	ldr	r1, [r7, #16]
 80010e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0203 	and.w	r2, r3, #3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80ac 	beq.w	800127e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <HAL_GPIO_Init+0x330>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	4a5e      	ldr	r2, [pc, #376]	; (80012a4 <HAL_GPIO_Init+0x330>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6613      	str	r3, [r2, #96]	; 0x60
 8001132:	4b5c      	ldr	r3, [pc, #368]	; (80012a4 <HAL_GPIO_Init+0x330>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800113e:	4a5a      	ldr	r2, [pc, #360]	; (80012a8 <HAL_GPIO_Init+0x334>)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001168:	d025      	beq.n	80011b6 <HAL_GPIO_Init+0x242>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4f      	ldr	r2, [pc, #316]	; (80012ac <HAL_GPIO_Init+0x338>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d01f      	beq.n	80011b2 <HAL_GPIO_Init+0x23e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4e      	ldr	r2, [pc, #312]	; (80012b0 <HAL_GPIO_Init+0x33c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x23a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4d      	ldr	r2, [pc, #308]	; (80012b4 <HAL_GPIO_Init+0x340>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x236>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4c      	ldr	r2, [pc, #304]	; (80012b8 <HAL_GPIO_Init+0x344>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x232>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <HAL_GPIO_Init+0x348>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x22e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4a      	ldr	r2, [pc, #296]	; (80012c0 <HAL_GPIO_Init+0x34c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x22a>
 800119a:	2306      	movs	r3, #6
 800119c:	e00c      	b.n	80011b8 <HAL_GPIO_Init+0x244>
 800119e:	2307      	movs	r3, #7
 80011a0:	e00a      	b.n	80011b8 <HAL_GPIO_Init+0x244>
 80011a2:	2305      	movs	r3, #5
 80011a4:	e008      	b.n	80011b8 <HAL_GPIO_Init+0x244>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x244>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x244>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x244>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x244>
 80011b6:	2300      	movs	r3, #0
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	f002 0203 	and.w	r2, r2, #3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c8:	4937      	ldr	r1, [pc, #220]	; (80012a8 <HAL_GPIO_Init+0x334>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_GPIO_Init+0x350>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011fa:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <HAL_GPIO_Init+0x350>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_GPIO_Init+0x350>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001224:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <HAL_GPIO_Init+0x350>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_GPIO_Init+0x350>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_GPIO_Init+0x350>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_GPIO_Init+0x350>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001278:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <HAL_GPIO_Init+0x350>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa22 f303 	lsr.w	r3, r2, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	f47f ae78 	bne.w	8000f84 <HAL_GPIO_Init+0x10>
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	371c      	adds	r7, #28
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010000 	.word	0x40010000
 80012ac:	48000400 	.word	0x48000400
 80012b0:	48000800 	.word	0x48000800
 80012b4:	48000c00 	.word	0x48000c00
 80012b8:	48001000 	.word	0x48001000
 80012bc:	48001400 	.word	0x48001400
 80012c0:	48001800 	.word	0x48001800
 80012c4:	40010400 	.word	0x40010400

080012c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e001      	b.n	80012ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001314:	e002      	b.n	800131c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001334:	695a      	ldr	r2, [r3, #20]
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f90e 	bl	8000568 <HAL_GPIO_EXTI_Callback>
  }
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <HAL_PWREx_GetVoltageRange+0x18>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40007000 	.word	0x40007000

08001374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001382:	d130      	bne.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800138c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001390:	d038      	beq.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800139a:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2232      	movs	r2, #50	; 0x32
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	0c9b      	lsrs	r3, r3, #18
 80013b4:	3301      	adds	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b8:	e002      	b.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013cc:	d102      	bne.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f2      	bne.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d110      	bne.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e00f      	b.n	8001406 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f2:	d007      	beq.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013fc:	4a05      	ldr	r2, [pc, #20]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001402:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40007000 	.word	0x40007000
 8001418:	20000030 	.word	0x20000030
 800141c:	431bde83 	.word	0x431bde83

08001420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e3ca      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001432:	4b97      	ldr	r3, [pc, #604]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800143c:	4b94      	ldr	r3, [pc, #592]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80e4 	beq.w	800161c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <HAL_RCC_OscConfig+0x4a>
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	f040 808b 	bne.w	8001578 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b01      	cmp	r3, #1
 8001466:	f040 8087 	bne.w	8001578 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800146a:	4b89      	ldr	r3, [pc, #548]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x62>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e3a2      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1a      	ldr	r2, [r3, #32]
 8001486:	4b82      	ldr	r3, [pc, #520]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_RCC_OscConfig+0x7c>
 8001492:	4b7f      	ldr	r3, [pc, #508]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800149a:	e005      	b.n	80014a8 <HAL_RCC_OscConfig+0x88>
 800149c:	4b7c      	ldr	r3, [pc, #496]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800149e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d223      	bcs.n	80014f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fd55 	bl	8001f60 <RCC_SetFlashLatencyFromMSIRange>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e383      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c0:	4b73      	ldr	r3, [pc, #460]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a72      	ldr	r2, [pc, #456]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b70      	ldr	r3, [pc, #448]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	496d      	ldr	r1, [pc, #436]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014de:	4b6c      	ldr	r3, [pc, #432]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	4968      	ldr	r1, [pc, #416]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
 80014f2:	e025      	b.n	8001540 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f4:	4b66      	ldr	r3, [pc, #408]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a65      	ldr	r2, [pc, #404]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b63      	ldr	r3, [pc, #396]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4960      	ldr	r1, [pc, #384]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	495b      	ldr	r1, [pc, #364]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001522:	4313      	orrs	r3, r2
 8001524:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fd15 	bl	8001f60 <RCC_SetFlashLatencyFromMSIRange>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e343      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001540:	f000 fc4a 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b52      	ldr	r3, [pc, #328]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	4950      	ldr	r1, [pc, #320]	; (8001694 <HAL_RCC_OscConfig+0x274>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	4a4e      	ldr	r2, [pc, #312]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800155e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001560:	4b4e      	ldr	r3, [pc, #312]	; (800169c <HAL_RCC_OscConfig+0x27c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fb97 	bl	8000c98 <HAL_InitTick>
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d052      	beq.n	800161a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	e327      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d032      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001580:	4b43      	ldr	r3, [pc, #268]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a42      	ldr	r2, [pc, #264]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158c:	f7ff fbd4 	bl	8000d38 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001594:	f7ff fbd0 	bl	8000d38 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e310      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a6:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a36      	ldr	r2, [pc, #216]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4931      	ldr	r1, [pc, #196]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d0:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	492c      	ldr	r1, [pc, #176]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	e01a      	b.n	800161c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a29      	ldr	r2, [pc, #164]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fba1 	bl	8000d38 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fa:	f7ff fb9d 	bl	8000d38 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e2dd      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x1da>
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800161a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d074      	beq.n	8001712 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d005      	beq.n	800163a <HAL_RCC_OscConfig+0x21a>
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b0c      	cmp	r3, #12
 8001632:	d10e      	bne.n	8001652 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d10b      	bne.n	8001652 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d064      	beq.n	8001710 <HAL_RCC_OscConfig+0x2f0>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d160      	bne.n	8001710 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e2ba      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x24a>
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	e026      	b.n	80016b8 <HAL_RCC_OscConfig+0x298>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001672:	d115      	bne.n	80016a0 <HAL_RCC_OscConfig+0x280>
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a05      	ldr	r2, [pc, #20]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800167a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a02      	ldr	r2, [pc, #8]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x298>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	08004a74 	.word	0x08004a74
 8001698:	20000030 	.word	0x20000030
 800169c:	20000034 	.word	0x20000034
 80016a0:	4ba0      	ldr	r3, [pc, #640]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a9f      	ldr	r2, [pc, #636]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b9d      	ldr	r3, [pc, #628]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a9c      	ldr	r2, [pc, #624]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fb3a 	bl	8000d38 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fb36 	bl	8000d38 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e276      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	4b92      	ldr	r3, [pc, #584]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x2a8>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb26 	bl	8000d38 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fb22 	bl	8000d38 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e262      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2d0>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d060      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d005      	beq.n	8001730 <HAL_RCC_OscConfig+0x310>
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d119      	bne.n	800175e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d116      	bne.n	800175e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001730:	4b7c      	ldr	r3, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x328>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e23f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b76      	ldr	r3, [pc, #472]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	4973      	ldr	r1, [pc, #460]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175c:	e040      	b.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d023      	beq.n	80017ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001766:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6e      	ldr	r2, [pc, #440]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff fae1 	bl	8000d38 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff fadd 	bl	8000d38 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e21d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	4b65      	ldr	r3, [pc, #404]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	4b62      	ldr	r3, [pc, #392]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	061b      	lsls	r3, r3, #24
 80017a6:	495f      	ldr	r1, [pc, #380]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
 80017ac:	e018      	b.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a5c      	ldr	r2, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff fabd 	bl	8000d38 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fab9 	bl	8000d38 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1f9      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d03c      	beq.n	8001866 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01c      	beq.n	800182e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f4:	4b4b      	ldr	r3, [pc, #300]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fa:	4a4a      	ldr	r2, [pc, #296]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fa98 	bl	8000d38 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fa94 	bl	8000d38 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1d4      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ef      	beq.n	800180c <HAL_RCC_OscConfig+0x3ec>
 800182c:	e01b      	b.n	8001866 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001834:	4a3b      	ldr	r2, [pc, #236]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff fa7b 	bl	8000d38 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff fa77 	bl	8000d38 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1b7      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	4b32      	ldr	r3, [pc, #200]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800185a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ef      	bne.n	8001846 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80a6 	beq.w	80019c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10d      	bne.n	80018a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	4a26      	ldr	r2, [pc, #152]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800188a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	; 0x58
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189c:	2301      	movs	r3, #1
 800189e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <HAL_RCC_OscConfig+0x508>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d118      	bne.n	80018de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_RCC_OscConfig+0x508>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_RCC_OscConfig+0x508>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa3e 	bl	8000d38 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c0:	f7ff fa3a 	bl	8000d38 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e17a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_RCC_OscConfig+0x508>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d108      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4d8>
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80018e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f6:	e029      	b.n	800194c <HAL_RCC_OscConfig+0x52c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d115      	bne.n	800192c <HAL_RCC_OscConfig+0x50c>
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	4a03      	ldr	r2, [pc, #12]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001920:	e014      	b.n	800194c <HAL_RCC_OscConfig+0x52c>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40007000 	.word	0x40007000
 800192c:	4b9c      	ldr	r3, [pc, #624]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	4a9b      	ldr	r2, [pc, #620]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800193c:	4b98      	ldr	r3, [pc, #608]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 800193e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001942:	4a97      	ldr	r2, [pc, #604]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d016      	beq.n	8001982 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff f9f0 	bl	8000d38 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195a:	e00a      	b.n	8001972 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff f9ec 	bl	8000d38 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e12a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001972:	4b8b      	ldr	r3, [pc, #556]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ed      	beq.n	800195c <HAL_RCC_OscConfig+0x53c>
 8001980:	e015      	b.n	80019ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001982:	f7ff f9d9 	bl	8000d38 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff f9d5 	bl	8000d38 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	; 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e113      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a0:	4b7f      	ldr	r3, [pc, #508]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ed      	bne.n	800198a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4b7a      	ldr	r3, [pc, #488]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	4a79      	ldr	r2, [pc, #484]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80fe 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	f040 80d0 	bne.w	8001b74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019d4:	4b72      	ldr	r3, [pc, #456]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d130      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	3b01      	subs	r3, #1
 80019f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d127      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d11f      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a14:	2a07      	cmp	r2, #7
 8001a16:	bf14      	ite	ne
 8001a18:	2201      	movne	r2, #1
 8001a1a:	2200      	moveq	r2, #0
 8001a1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d113      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2c:	085b      	lsrs	r3, r3, #1
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d06e      	beq.n	8001b28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d069      	beq.n	8001b24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a5c:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0ad      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a4b      	ldr	r2, [pc, #300]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a78:	f7ff f95e 	bl	8000d38 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff f95a 	bl	8000d38 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e09a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a92:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9e:	4b40      	ldr	r3, [pc, #256]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <HAL_RCC_OscConfig+0x784>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aae:	3a01      	subs	r2, #1
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ab8:	0212      	lsls	r2, r2, #8
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ac0:	0852      	lsrs	r2, r2, #1
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	0552      	lsls	r2, r2, #21
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001acc:	0852      	lsrs	r2, r2, #1
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	0652      	lsls	r2, r2, #25
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ad8:	0912      	lsrs	r2, r2, #4
 8001ada:	0452      	lsls	r2, r2, #17
 8001adc:	430a      	orrs	r2, r1
 8001ade:	4930      	ldr	r1, [pc, #192]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ae4:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2d      	ldr	r2, [pc, #180]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4a2a      	ldr	r2, [pc, #168]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001afc:	f7ff f91c 	bl	8000d38 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff f918 	bl	8000d38 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e058      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b22:	e050      	b.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e04f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d148      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b4c:	f7ff f8f4 	bl	8000d38 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff f8f0 	bl	8000d38 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e030      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x734>
 8001b72:	e028      	b.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d023      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff f8d7 	bl	8000d38 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	e00c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff f8d3 	bl	8000d38 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d905      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e013      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_OscConfig+0x7b0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ec      	bne.n	8001b8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_RCC_OscConfig+0x7b0>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	4905      	ldr	r1, [pc, #20]	; (8001bd0 <HAL_RCC_OscConfig+0x7b0>)
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_RCC_OscConfig+0x7b4>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
 8001bc0:	e001      	b.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	feeefffc 	.word	0xfeeefffc

08001bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0e7      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b75      	ldr	r3, [pc, #468]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d910      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b72      	ldr	r3, [pc, #456]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0207 	bic.w	r2, r3, #7
 8001c02:	4970      	ldr	r1, [pc, #448]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b6e      	ldr	r3, [pc, #440]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0cf      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d010      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	4b66      	ldr	r3, [pc, #408]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d908      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b63      	ldr	r3, [pc, #396]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4960      	ldr	r1, [pc, #384]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d04c      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5e:	4b5a      	ldr	r3, [pc, #360]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d121      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0a6      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c76:	4b54      	ldr	r3, [pc, #336]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d115      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e09a      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c8e:	4b4e      	ldr	r3, [pc, #312]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e08e      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e086      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f023 0203 	bic.w	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4943      	ldr	r1, [pc, #268]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc0:	f7ff f83a 	bl	8000d38 <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc8:	f7ff f836 	bl	8000d38 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e06e      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 020c 	and.w	r2, r3, #12
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d1eb      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d010      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d208      	bcs.n	8001d1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	492b      	ldr	r1, [pc, #172]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1e:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d210      	bcs.n	8001d4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 0207 	bic.w	r2, r3, #7
 8001d34:	4923      	ldr	r1, [pc, #140]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3c:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e036      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4918      	ldr	r1, [pc, #96]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d009      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4910      	ldr	r1, [pc, #64]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d8c:	f000 f824 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	490b      	ldr	r1, [pc, #44]	; (8001dcc <HAL_RCC_ClockConfig+0x1f4>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f8>)
 8001daa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1fc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe ff71 	bl	8000c98 <HAL_InitTick>
 8001db6:	4603      	mov	r3, r0
 8001db8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dba:	7afb      	ldrb	r3, [r7, #11]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08004a74 	.word	0x08004a74
 8001dd0:	20000030 	.word	0x20000030
 8001dd4:	20000034 	.word	0x20000034

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df0:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x34>
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d121      	bne.n	8001e4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d11e      	bne.n	8001e4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e0c:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e18:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e005      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e34:	4a2b      	ldr	r2, [pc, #172]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10d      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	e004      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e5c:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_RCC_GetSysClockFreq+0x114>)
 8001e5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d134      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d003      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0xac>
 8001e7c:	e005      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e80:	617b      	str	r3, [r7, #20]
      break;
 8001e82:	e005      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_RCC_GetSysClockFreq+0x114>)
 8001e86:	617b      	str	r3, [r7, #20]
      break;
 8001e88:	e002      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	617b      	str	r3, [r7, #20]
      break;
 8001e8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	fb03 f202 	mul.w	r2, r3, r2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	0e5b      	lsrs	r3, r3, #25
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08004a8c 	.word	0x08004a8c
 8001ee8:	00f42400 	.word	0x00f42400
 8001eec:	007a1200 	.word	0x007a1200

08001ef0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000030 	.word	0x20000030

08001f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f0c:	f7ff fff0 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4904      	ldr	r1, [pc, #16]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08004a84 	.word	0x08004a84

08001f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f38:	f7ff ffda 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	0adb      	lsrs	r3, r3, #11
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4904      	ldr	r1, [pc, #16]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08004a84 	.word	0x08004a84

08001f60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f78:	f7ff f9ee 	bl	8001358 <HAL_PWREx_GetVoltageRange>
 8001f7c:	6178      	str	r0, [r7, #20]
 8001f7e:	e014      	b.n	8001faa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	4b25      	ldr	r3, [pc, #148]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	4a24      	ldr	r2, [pc, #144]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8c:	4b22      	ldr	r3, [pc, #136]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f98:	f7ff f9de 	bl	8001358 <HAL_PWREx_GetVoltageRange>
 8001f9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb0:	d10b      	bne.n	8001fca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b80      	cmp	r3, #128	; 0x80
 8001fb6:	d919      	bls.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2ba0      	cmp	r3, #160	; 0xa0
 8001fbc:	d902      	bls.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	e013      	b.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	e010      	b.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b80      	cmp	r3, #128	; 0x80
 8001fce:	d902      	bls.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e00a      	b.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b80      	cmp	r3, #128	; 0x80
 8001fda:	d102      	bne.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fdc:	2302      	movs	r3, #2
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	e004      	b.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b70      	cmp	r3, #112	; 0x70
 8001fe6:	d101      	bne.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fe8:	2301      	movs	r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 0207 	bic.w	r2, r3, #7
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	429a      	cmp	r2, r3
 8002008:	d001      	beq.n	800200e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	40022000 	.word	0x40022000

08002020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002028:	2300      	movs	r3, #0
 800202a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800202c:	2300      	movs	r3, #0
 800202e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002038:	2b00      	cmp	r3, #0
 800203a:	d041      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002040:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002044:	d02a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002046:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800204a:	d824      	bhi.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800204c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002050:	d008      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002056:	d81e      	bhi.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800205c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002060:	d010      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002062:	e018      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002064:	4b86      	ldr	r3, [pc, #536]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a85      	ldr	r2, [pc, #532]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002070:	e015      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3304      	adds	r3, #4
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fabb 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 800207e:	4603      	mov	r3, r0
 8002080:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002082:	e00c      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3320      	adds	r3, #32
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fba6 	bl	80027dc <RCCEx_PLLSAI2_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002094:	e003      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	74fb      	strb	r3, [r7, #19]
      break;
 800209a:	e000      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800209c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800209e:	7cfb      	ldrb	r3, [r7, #19]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020a4:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020b2:	4973      	ldr	r1, [pc, #460]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ba:	e001      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d041      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020d4:	d02a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020da:	d824      	bhi.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020e0:	d008      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020e6:	d81e      	bhi.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f0:	d010      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020f2:	e018      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020f4:	4b62      	ldr	r3, [pc, #392]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a61      	ldr	r2, [pc, #388]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002100:	e015      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3304      	adds	r3, #4
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fa73 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 800210e:	4603      	mov	r3, r0
 8002110:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002112:	e00c      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3320      	adds	r3, #32
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fb5e 	bl	80027dc <RCCEx_PLLSAI2_Config>
 8002120:	4603      	mov	r3, r0
 8002122:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002124:	e003      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	74fb      	strb	r3, [r7, #19]
      break;
 800212a:	e000      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800212c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002134:	4b52      	ldr	r3, [pc, #328]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002142:	494f      	ldr	r1, [pc, #316]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800214a:	e001      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80a0 	beq.w	800229e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002172:	2300      	movs	r3, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	4a40      	ldr	r2, [pc, #256]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002182:	6593      	str	r3, [r2, #88]	; 0x58
 8002184:	4b3e      	ldr	r3, [pc, #248]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002190:	2301      	movs	r3, #1
 8002192:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002194:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a3a      	ldr	r2, [pc, #232]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021a0:	f7fe fdca 	bl	8000d38 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021a6:	e009      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a8:	f7fe fdc6 	bl	8000d38 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d902      	bls.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	74fb      	strb	r3, [r7, #19]
        break;
 80021ba:	e005      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021bc:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ef      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d15c      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021ce:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01f      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d019      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021ec:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021f8:	4b21      	ldr	r3, [pc, #132]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	4a20      	ldr	r2, [pc, #128]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002218:	4a19      	ldr	r2, [pc, #100]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe fd85 	bl	8000d38 <HAL_GetTick>
 800222e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002230:	e00b      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe fd81 	bl	8000d38 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d902      	bls.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	74fb      	strb	r3, [r7, #19]
            break;
 8002248:	e006      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ec      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800226e:	4904      	ldr	r1, [pc, #16]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002276:	e009      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
 800227c:	e006      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800228c:	7c7b      	ldrb	r3, [r7, #17]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d105      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002292:	4b9e      	ldr	r3, [pc, #632]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	4a9d      	ldr	r2, [pc, #628]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022aa:	4b98      	ldr	r3, [pc, #608]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f023 0203 	bic.w	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	4994      	ldr	r1, [pc, #592]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022cc:	4b8f      	ldr	r3, [pc, #572]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f023 020c 	bic.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022da:	498c      	ldr	r1, [pc, #560]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ee:	4b87      	ldr	r3, [pc, #540]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	4983      	ldr	r1, [pc, #524]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002310:	4b7e      	ldr	r3, [pc, #504]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	497b      	ldr	r1, [pc, #492]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002332:	4b76      	ldr	r3, [pc, #472]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002340:	4972      	ldr	r1, [pc, #456]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002354:	4b6d      	ldr	r3, [pc, #436]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	496a      	ldr	r1, [pc, #424]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002376:	4b65      	ldr	r3, [pc, #404]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002384:	4961      	ldr	r1, [pc, #388]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002398:	4b5c      	ldr	r3, [pc, #368]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a6:	4959      	ldr	r1, [pc, #356]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ba:	4b54      	ldr	r3, [pc, #336]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c8:	4950      	ldr	r1, [pc, #320]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023dc:	4b4b      	ldr	r3, [pc, #300]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	4948      	ldr	r1, [pc, #288]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023fe:	4b43      	ldr	r3, [pc, #268]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	493f      	ldr	r1, [pc, #252]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d028      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002420:	4b3a      	ldr	r3, [pc, #232]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242e:	4937      	ldr	r1, [pc, #220]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800243e:	d106      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002440:	4b32      	ldr	r3, [pc, #200]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a31      	ldr	r2, [pc, #196]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800244a:	60d3      	str	r3, [r2, #12]
 800244c:	e011      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002456:	d10c      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	2101      	movs	r1, #1
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f8c8 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d028      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248c:	491f      	ldr	r1, [pc, #124]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800249c:	d106      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	4a1a      	ldr	r2, [pc, #104]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024a8:	60d3      	str	r3, [r2, #12]
 80024aa:	e011      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f899 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 80024c2:	4603      	mov	r3, r0
 80024c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d02b      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024fa:	d109      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a02      	ldr	r2, [pc, #8]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002506:	60d3      	str	r3, [r2, #12]
 8002508:	e014      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002518:	d10c      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3304      	adds	r3, #4
 800251e:	2101      	movs	r1, #1
 8002520:	4618      	mov	r0, r3
 8002522:	f000 f867 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 8002526:	4603      	mov	r3, r0
 8002528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002530:	7cfb      	ldrb	r3, [r7, #19]
 8002532:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d02f      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800254e:	4928      	ldr	r1, [pc, #160]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800255a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800255e:	d10d      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	2102      	movs	r1, #2
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f844 	bl	80025f4 <RCCEx_PLLSAI1_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d014      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	74bb      	strb	r3, [r7, #18]
 800257a:	e011      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3320      	adds	r3, #32
 800258a:	2102      	movs	r1, #2
 800258c:	4618      	mov	r0, r3
 800258e:	f000 f925 	bl	80027dc <RCCEx_PLLSAI2_Config>
 8002592:	4603      	mov	r3, r0
 8002594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800259c:	7cfb      	ldrb	r3, [r7, #19]
 800259e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ba:	490d      	ldr	r1, [pc, #52]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025de:	4904      	ldr	r1, [pc, #16]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000

080025f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002602:	4b75      	ldr	r3, [pc, #468]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800260e:	4b72      	ldr	r3, [pc, #456]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0203 	and.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d10d      	bne.n	800263a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
       ||
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002626:	4b6c      	ldr	r3, [pc, #432]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
       ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d047      	beq.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e044      	b.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d018      	beq.n	800267a <RCCEx_PLLSAI1_Config+0x86>
 8002648:	2b03      	cmp	r3, #3
 800264a:	d825      	bhi.n	8002698 <RCCEx_PLLSAI1_Config+0xa4>
 800264c:	2b01      	cmp	r3, #1
 800264e:	d002      	beq.n	8002656 <RCCEx_PLLSAI1_Config+0x62>
 8002650:	2b02      	cmp	r3, #2
 8002652:	d009      	beq.n	8002668 <RCCEx_PLLSAI1_Config+0x74>
 8002654:	e020      	b.n	8002698 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002656:	4b60      	ldr	r3, [pc, #384]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11d      	bne.n	800269e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002666:	e01a      	b.n	800269e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002668:	4b5b      	ldr	r3, [pc, #364]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002678:	e013      	b.n	80026a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800267a:	4b57      	ldr	r3, [pc, #348]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002686:	4b54      	ldr	r3, [pc, #336]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002696:	e006      	b.n	80026a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      break;
 800269c:	e004      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800269e:	bf00      	nop
 80026a0:	e002      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ae:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	430b      	orrs	r3, r1
 80026c4:	4944      	ldr	r1, [pc, #272]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d17d      	bne.n	80027cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026d0:	4b41      	ldr	r3, [pc, #260]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a40      	ldr	r2, [pc, #256]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe fb2c 	bl	8000d38 <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026e2:	e009      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026e4:	f7fe fb28 	bl	8000d38 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d902      	bls.n	80026f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	73fb      	strb	r3, [r7, #15]
        break;
 80026f6:	e005      	b.n	8002704 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026f8:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ef      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d160      	bne.n	80027cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d111      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002710:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6892      	ldr	r2, [r2, #8]
 8002720:	0211      	lsls	r1, r2, #8
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	0912      	lsrs	r2, r2, #4
 8002728:	0452      	lsls	r2, r2, #17
 800272a:	430a      	orrs	r2, r1
 800272c:	492a      	ldr	r1, [pc, #168]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	610b      	str	r3, [r1, #16]
 8002732:	e027      	b.n	8002784 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d112      	bne.n	8002760 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800273a:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002742:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6892      	ldr	r2, [r2, #8]
 800274a:	0211      	lsls	r1, r2, #8
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6912      	ldr	r2, [r2, #16]
 8002750:	0852      	lsrs	r2, r2, #1
 8002752:	3a01      	subs	r2, #1
 8002754:	0552      	lsls	r2, r2, #21
 8002756:	430a      	orrs	r2, r1
 8002758:	491f      	ldr	r1, [pc, #124]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	610b      	str	r3, [r1, #16]
 800275e:	e011      	b.n	8002784 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002768:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6892      	ldr	r2, [r2, #8]
 8002770:	0211      	lsls	r1, r2, #8
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6952      	ldr	r2, [r2, #20]
 8002776:	0852      	lsrs	r2, r2, #1
 8002778:	3a01      	subs	r2, #1
 800277a:	0652      	lsls	r2, r2, #25
 800277c:	430a      	orrs	r2, r1
 800277e:	4916      	ldr	r1, [pc, #88]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800278e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe fad2 	bl	8000d38 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002796:	e009      	b.n	80027ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002798:	f7fe face 	bl	8000d38 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d902      	bls.n	80027ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	73fb      	strb	r3, [r7, #15]
          break;
 80027aa:	e005      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ef      	beq.n	8002798 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	4904      	ldr	r1, [pc, #16]	; (80027d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000

080027dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ea:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d018      	beq.n	8002828 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027f6:	4b67      	ldr	r3, [pc, #412]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0203 	and.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d10d      	bne.n	8002822 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
       ||
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800280e:	4b61      	ldr	r3, [pc, #388]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
       ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d047      	beq.n	80028b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e044      	b.n	80028b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d018      	beq.n	8002862 <RCCEx_PLLSAI2_Config+0x86>
 8002830:	2b03      	cmp	r3, #3
 8002832:	d825      	bhi.n	8002880 <RCCEx_PLLSAI2_Config+0xa4>
 8002834:	2b01      	cmp	r3, #1
 8002836:	d002      	beq.n	800283e <RCCEx_PLLSAI2_Config+0x62>
 8002838:	2b02      	cmp	r3, #2
 800283a:	d009      	beq.n	8002850 <RCCEx_PLLSAI2_Config+0x74>
 800283c:	e020      	b.n	8002880 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800283e:	4b55      	ldr	r3, [pc, #340]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d11d      	bne.n	8002886 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284e:	e01a      	b.n	8002886 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002850:	4b50      	ldr	r3, [pc, #320]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002858:	2b00      	cmp	r3, #0
 800285a:	d116      	bne.n	800288a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002860:	e013      	b.n	800288a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002862:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800286e:	4b49      	ldr	r3, [pc, #292]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800287e:	e006      	b.n	800288e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e004      	b.n	8002890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002886:	bf00      	nop
 8002888:	e002      	b.n	8002890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800288e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002896:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6819      	ldr	r1, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	430b      	orrs	r3, r1
 80028ac:	4939      	ldr	r1, [pc, #228]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d167      	bne.n	8002988 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028b8:	4b36      	ldr	r3, [pc, #216]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a35      	ldr	r2, [pc, #212]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fe fa38 	bl	8000d38 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ca:	e009      	b.n	80028e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028cc:	f7fe fa34 	bl	8000d38 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d902      	bls.n	80028e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	73fb      	strb	r3, [r7, #15]
        break;
 80028de:	e005      	b.n	80028ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028e0:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1ef      	bne.n	80028cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d14a      	bne.n	8002988 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d111      	bne.n	800291c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028f8:	4b26      	ldr	r3, [pc, #152]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6892      	ldr	r2, [r2, #8]
 8002908:	0211      	lsls	r1, r2, #8
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68d2      	ldr	r2, [r2, #12]
 800290e:	0912      	lsrs	r2, r2, #4
 8002910:	0452      	lsls	r2, r2, #17
 8002912:	430a      	orrs	r2, r1
 8002914:	491f      	ldr	r1, [pc, #124]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002916:	4313      	orrs	r3, r2
 8002918:	614b      	str	r3, [r1, #20]
 800291a:	e011      	b.n	8002940 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002924:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6892      	ldr	r2, [r2, #8]
 800292c:	0211      	lsls	r1, r2, #8
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6912      	ldr	r2, [r2, #16]
 8002932:	0852      	lsrs	r2, r2, #1
 8002934:	3a01      	subs	r2, #1
 8002936:	0652      	lsls	r2, r2, #25
 8002938:	430a      	orrs	r2, r1
 800293a:	4916      	ldr	r1, [pc, #88]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800293c:	4313      	orrs	r3, r2
 800293e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a13      	ldr	r2, [pc, #76]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe f9f4 	bl	8000d38 <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002952:	e009      	b.n	8002968 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002954:	f7fe f9f0 	bl	8000d38 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	73fb      	strb	r3, [r7, #15]
          break;
 8002966:	e005      	b.n	8002974 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	4904      	ldr	r1, [pc, #16]	; (8002994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002984:	4313      	orrs	r3, r2
 8002986:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000

08002998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e049      	b.n	8002a3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fd ffee 	bl	80009a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	4619      	mov	r1, r3
 80029d6:	4610      	mov	r0, r2
 80029d8:	f000 fe88 	bl	80036ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d001      	beq.n	8002a60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e047      	b.n	8002af0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a23      	ldr	r2, [pc, #140]	; (8002afc <HAL_TIM_Base_Start+0xb4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01d      	beq.n	8002aae <HAL_TIM_Base_Start+0x66>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7a:	d018      	beq.n	8002aae <HAL_TIM_Base_Start+0x66>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <HAL_TIM_Base_Start+0xb8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_TIM_Base_Start+0x66>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <HAL_TIM_Base_Start+0xbc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00e      	beq.n	8002aae <HAL_TIM_Base_Start+0x66>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <HAL_TIM_Base_Start+0xc0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d009      	beq.n	8002aae <HAL_TIM_Base_Start+0x66>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <HAL_TIM_Base_Start+0xc4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d004      	beq.n	8002aae <HAL_TIM_Base_Start+0x66>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a19      	ldr	r2, [pc, #100]	; (8002b10 <HAL_TIM_Base_Start+0xc8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d115      	bne.n	8002ada <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_TIM_Base_Start+0xcc>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d015      	beq.n	8002aec <HAL_TIM_Base_Start+0xa4>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac6:	d011      	beq.n	8002aec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad8:	e008      	b.n	8002aec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e000      	b.n	8002aee <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40000800 	.word	0x40000800
 8002b08:	40000c00 	.word	0x40000c00
 8002b0c:	40013400 	.word	0x40013400
 8002b10:	40014000 	.word	0x40014000
 8002b14:	00010007 	.word	0x00010007

08002b18 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10f      	bne.n	8002b50 <HAL_TIM_Base_Stop+0x38>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6a1a      	ldr	r2, [r3, #32]
 8002b36:	f240 4344 	movw	r3, #1092	; 0x444
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d107      	bne.n	8002b50 <HAL_TIM_Base_Stop+0x38>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d001      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e04f      	b.n	8002c20 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <HAL_TIM_Base_Start_IT+0xc4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01d      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002baa:	d018      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00e      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d009      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <HAL_TIM_Base_Start_IT+0xd4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x76>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d115      	bne.n	8002c0a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <HAL_TIM_Base_Start_IT+0xdc>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d015      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0xb4>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf6:	d011      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c08:	e008      	b.n	8002c1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0201 	orr.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e000      	b.n	8002c1e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	40013400 	.word	0x40013400
 8002c40:	40014000 	.word	0x40014000
 8002c44:	00010007 	.word	0x00010007

08002c48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a1a      	ldr	r2, [r3, #32]
 8002c66:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10f      	bne.n	8002c90 <HAL_TIM_Base_Stop_IT+0x48>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6a1a      	ldr	r2, [r3, #32]
 8002c76:	f240 4344 	movw	r3, #1092	; 0x444
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d107      	bne.n	8002c90 <HAL_TIM_Base_Stop_IT+0x48>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e049      	b.n	8002d4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d106      	bne.n	8002cd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f841 	bl	8002d54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f000 fd01 	bl	80036ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_TIM_PWM_Start+0x24>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e03c      	b.n	8002e06 <HAL_TIM_PWM_Start+0x9e>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d109      	bne.n	8002da6 <HAL_TIM_PWM_Start+0x3e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	bf14      	ite	ne
 8002d9e:	2301      	movne	r3, #1
 8002da0:	2300      	moveq	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	e02f      	b.n	8002e06 <HAL_TIM_PWM_Start+0x9e>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d109      	bne.n	8002dc0 <HAL_TIM_PWM_Start+0x58>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e022      	b.n	8002e06 <HAL_TIM_PWM_Start+0x9e>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d109      	bne.n	8002dda <HAL_TIM_PWM_Start+0x72>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	e015      	b.n	8002e06 <HAL_TIM_PWM_Start+0x9e>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d109      	bne.n	8002df4 <HAL_TIM_PWM_Start+0x8c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e008      	b.n	8002e06 <HAL_TIM_PWM_Start+0x9e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e09c      	b.n	8002f48 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_PWM_Start+0xb6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e1c:	e023      	b.n	8002e66 <HAL_TIM_PWM_Start+0xfe>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_PWM_Start+0xc6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e2c:	e01b      	b.n	8002e66 <HAL_TIM_PWM_Start+0xfe>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d104      	bne.n	8002e3e <HAL_TIM_PWM_Start+0xd6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e3c:	e013      	b.n	8002e66 <HAL_TIM_PWM_Start+0xfe>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d104      	bne.n	8002e4e <HAL_TIM_PWM_Start+0xe6>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e4c:	e00b      	b.n	8002e66 <HAL_TIM_PWM_Start+0xfe>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d104      	bne.n	8002e5e <HAL_TIM_PWM_Start+0xf6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e5c:	e003      	b.n	8002e66 <HAL_TIM_PWM_Start+0xfe>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	6839      	ldr	r1, [r7, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 f846 	bl	8003f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a35      	ldr	r2, [pc, #212]	; (8002f50 <HAL_TIM_PWM_Start+0x1e8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x13e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a34      	ldr	r2, [pc, #208]	; (8002f54 <HAL_TIM_PWM_Start+0x1ec>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00e      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x13e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a32      	ldr	r2, [pc, #200]	; (8002f58 <HAL_TIM_PWM_Start+0x1f0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x13e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <HAL_TIM_PWM_Start+0x1f4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d004      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x13e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a2f      	ldr	r2, [pc, #188]	; (8002f60 <HAL_TIM_PWM_Start+0x1f8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_PWM_Start+0x142>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_TIM_PWM_Start+0x144>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a22      	ldr	r2, [pc, #136]	; (8002f50 <HAL_TIM_PWM_Start+0x1e8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01d      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x19e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed2:	d018      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x19e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <HAL_TIM_PWM_Start+0x1fc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x19e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <HAL_TIM_PWM_Start+0x200>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x19e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <HAL_TIM_PWM_Start+0x204>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x19e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <HAL_TIM_PWM_Start+0x1ec>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x19e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <HAL_TIM_PWM_Start+0x1f0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d115      	bne.n	8002f32 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <HAL_TIM_PWM_Start+0x208>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b06      	cmp	r3, #6
 8002f16:	d015      	beq.n	8002f44 <HAL_TIM_PWM_Start+0x1dc>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1e:	d011      	beq.n	8002f44 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f30:	e008      	b.n	8002f44 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e000      	b.n	8002f46 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40013400 	.word	0x40013400
 8002f58:	40014000 	.word	0x40014000
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00
 8002f70:	00010007 	.word	0x00010007

08002f74 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 ffba 	bl	8003f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3e      	ldr	r2, [pc, #248]	; (800308c <HAL_TIM_PWM_Stop+0x118>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_TIM_PWM_Stop+0x4a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <HAL_TIM_PWM_Stop+0x11c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00e      	beq.n	8002fbe <HAL_TIM_PWM_Stop+0x4a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <HAL_TIM_PWM_Stop+0x120>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d009      	beq.n	8002fbe <HAL_TIM_PWM_Stop+0x4a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a3a      	ldr	r2, [pc, #232]	; (8003098 <HAL_TIM_PWM_Stop+0x124>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_TIM_PWM_Stop+0x4a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a38      	ldr	r2, [pc, #224]	; (800309c <HAL_TIM_PWM_Stop+0x128>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_PWM_Stop+0x4e>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_TIM_PWM_Stop+0x50>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d017      	beq.n	8002ff8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6a1a      	ldr	r2, [r3, #32]
 8002fce:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_TIM_PWM_Stop+0x84>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6a1a      	ldr	r2, [r3, #32]
 8002fde:	f240 4344 	movw	r3, #1092	; 0x444
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_TIM_PWM_Stop+0x84>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ff6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6a1a      	ldr	r2, [r3, #32]
 8002ffe:	f241 1311 	movw	r3, #4369	; 0x1111
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10f      	bne.n	8003028 <HAL_TIM_PWM_Stop+0xb4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6a1a      	ldr	r2, [r3, #32]
 800300e:	f240 4344 	movw	r3, #1092	; 0x444
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <HAL_TIM_PWM_Stop+0xb4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <HAL_TIM_PWM_Stop+0xc4>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003036:	e023      	b.n	8003080 <HAL_TIM_PWM_Stop+0x10c>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b04      	cmp	r3, #4
 800303c:	d104      	bne.n	8003048 <HAL_TIM_PWM_Stop+0xd4>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003046:	e01b      	b.n	8003080 <HAL_TIM_PWM_Stop+0x10c>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b08      	cmp	r3, #8
 800304c:	d104      	bne.n	8003058 <HAL_TIM_PWM_Stop+0xe4>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003056:	e013      	b.n	8003080 <HAL_TIM_PWM_Stop+0x10c>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d104      	bne.n	8003068 <HAL_TIM_PWM_Stop+0xf4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003066:	e00b      	b.n	8003080 <HAL_TIM_PWM_Stop+0x10c>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b10      	cmp	r3, #16
 800306c:	d104      	bne.n	8003078 <HAL_TIM_PWM_Stop+0x104>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003076:	e003      	b.n	8003080 <HAL_TIM_PWM_Stop+0x10c>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40013400 	.word	0x40013400
 8003094:	40014000 	.word	0x40014000
 8003098:	40014400 	.word	0x40014400
 800309c:	40014800 	.word	0x40014800

080030a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d122      	bne.n	80030fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d11b      	bne.n	80030fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0202 	mvn.w	r2, #2
 80030cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fae3 	bl	80036ae <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fad5 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fae6 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b04      	cmp	r3, #4
 8003108:	d122      	bne.n	8003150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b04      	cmp	r3, #4
 8003116:	d11b      	bne.n	8003150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0204 	mvn.w	r2, #4
 8003120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fab9 	bl	80036ae <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 faab 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fabc 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b08      	cmp	r3, #8
 800315c:	d122      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b08      	cmp	r3, #8
 800316a:	d11b      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0208 	mvn.w	r2, #8
 8003174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2204      	movs	r2, #4
 800317a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fa8f 	bl	80036ae <HAL_TIM_IC_CaptureCallback>
 8003190:	e005      	b.n	800319e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fa81 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fa92 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d122      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d11b      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0210 	mvn.w	r2, #16
 80031c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2208      	movs	r2, #8
 80031ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa65 	bl	80036ae <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa57 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fa68 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	d10e      	bne.n	8003224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d107      	bne.n	8003224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0201 	mvn.w	r2, #1
 800321c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd f954 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	2b80      	cmp	r3, #128	; 0x80
 8003230:	d10e      	bne.n	8003250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	2b80      	cmp	r3, #128	; 0x80
 800323e:	d107      	bne.n	8003250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 ff10 	bl	8004070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325e:	d10e      	bne.n	800327e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b80      	cmp	r3, #128	; 0x80
 800326c:	d107      	bne.n	800327e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 ff03 	bl	8004084 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d10e      	bne.n	80032aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d107      	bne.n	80032aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fa16 	bl	80036d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d10e      	bne.n	80032d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d107      	bne.n	80032d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f06f 0220 	mvn.w	r2, #32
 80032ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fec3 	bl	800405c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e0ff      	b.n	80034fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b14      	cmp	r3, #20
 800330a:	f200 80f0 	bhi.w	80034ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800330e:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003369 	.word	0x08003369
 8003318:	080034ef 	.word	0x080034ef
 800331c:	080034ef 	.word	0x080034ef
 8003320:	080034ef 	.word	0x080034ef
 8003324:	080033a9 	.word	0x080033a9
 8003328:	080034ef 	.word	0x080034ef
 800332c:	080034ef 	.word	0x080034ef
 8003330:	080034ef 	.word	0x080034ef
 8003334:	080033eb 	.word	0x080033eb
 8003338:	080034ef 	.word	0x080034ef
 800333c:	080034ef 	.word	0x080034ef
 8003340:	080034ef 	.word	0x080034ef
 8003344:	0800342b 	.word	0x0800342b
 8003348:	080034ef 	.word	0x080034ef
 800334c:	080034ef 	.word	0x080034ef
 8003350:	080034ef 	.word	0x080034ef
 8003354:	0800346d 	.word	0x0800346d
 8003358:	080034ef 	.word	0x080034ef
 800335c:	080034ef 	.word	0x080034ef
 8003360:	080034ef 	.word	0x080034ef
 8003364:	080034ad 	.word	0x080034ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fa56 	bl	8003820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0208 	orr.w	r2, r2, #8
 8003382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0204 	bic.w	r2, r2, #4
 8003392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6999      	ldr	r1, [r3, #24]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	619a      	str	r2, [r3, #24]
      break;
 80033a6:	e0a5      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fac6 	bl	8003940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6999      	ldr	r1, [r3, #24]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	021a      	lsls	r2, r3, #8
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	619a      	str	r2, [r3, #24]
      break;
 80033e8:	e084      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fb2f 	bl	8003a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0208 	orr.w	r2, r2, #8
 8003404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0204 	bic.w	r2, r2, #4
 8003414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69d9      	ldr	r1, [r3, #28]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	61da      	str	r2, [r3, #28]
      break;
 8003428:	e064      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fb97 	bl	8003b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69d9      	ldr	r1, [r3, #28]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	021a      	lsls	r2, r3, #8
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	61da      	str	r2, [r3, #28]
      break;
 800346a:	e043      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fbe0 	bl	8003c38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0208 	orr.w	r2, r2, #8
 8003486:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0204 	bic.w	r2, r2, #4
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034aa:	e023      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fc24 	bl	8003d00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	021a      	lsls	r2, r3, #8
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034ec:	e002      	b.n	80034f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
      break;
 80034f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop

08003508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_TIM_ConfigClockSource+0x1c>
 8003520:	2302      	movs	r3, #2
 8003522:	e0b6      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x18a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800354e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003560:	d03e      	beq.n	80035e0 <HAL_TIM_ConfigClockSource+0xd8>
 8003562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003566:	f200 8087 	bhi.w	8003678 <HAL_TIM_ConfigClockSource+0x170>
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356e:	f000 8086 	beq.w	800367e <HAL_TIM_ConfigClockSource+0x176>
 8003572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003576:	d87f      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 8003578:	2b70      	cmp	r3, #112	; 0x70
 800357a:	d01a      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0xaa>
 800357c:	2b70      	cmp	r3, #112	; 0x70
 800357e:	d87b      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 8003580:	2b60      	cmp	r3, #96	; 0x60
 8003582:	d050      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x11e>
 8003584:	2b60      	cmp	r3, #96	; 0x60
 8003586:	d877      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 8003588:	2b50      	cmp	r3, #80	; 0x50
 800358a:	d03c      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0xfe>
 800358c:	2b50      	cmp	r3, #80	; 0x50
 800358e:	d873      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d058      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0x13e>
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d86f      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 8003598:	2b30      	cmp	r3, #48	; 0x30
 800359a:	d064      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15e>
 800359c:	2b30      	cmp	r3, #48	; 0x30
 800359e:	d86b      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d060      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15e>
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d867      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05c      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15e>
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d05a      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15e>
 80035b0:	e062      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6899      	ldr	r1, [r3, #8]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f000 fc7d 	bl	8003ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	609a      	str	r2, [r3, #8]
      break;
 80035de:	e04f      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6899      	ldr	r1, [r3, #8]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f000 fc66 	bl	8003ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003602:	609a      	str	r2, [r3, #8]
      break;
 8003604:	e03c      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	461a      	mov	r2, r3
 8003614:	f000 fbda 	bl	8003dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2150      	movs	r1, #80	; 0x50
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fc33 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003624:	e02c      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	461a      	mov	r2, r3
 8003634:	f000 fbf9 	bl	8003e2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2160      	movs	r1, #96	; 0x60
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fc23 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003644:	e01c      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6859      	ldr	r1, [r3, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	461a      	mov	r2, r3
 8003654:	f000 fbba 	bl	8003dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2140      	movs	r1, #64	; 0x40
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fc13 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003664:	e00c      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4619      	mov	r1, r3
 8003670:	4610      	mov	r0, r2
 8003672:	f000 fc0a 	bl	8003e8a <TIM_ITRx_SetConfig>
      break;
 8003676:	e003      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e000      	b.n	8003680 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800367e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a40      	ldr	r2, [pc, #256]	; (8003800 <TIM_Base_SetConfig+0x114>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d00f      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a3d      	ldr	r2, [pc, #244]	; (8003804 <TIM_Base_SetConfig+0x118>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a3c      	ldr	r2, [pc, #240]	; (8003808 <TIM_Base_SetConfig+0x11c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a3b      	ldr	r2, [pc, #236]	; (800380c <TIM_Base_SetConfig+0x120>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a3a      	ldr	r2, [pc, #232]	; (8003810 <TIM_Base_SetConfig+0x124>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d108      	bne.n	800373e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2f      	ldr	r2, [pc, #188]	; (8003800 <TIM_Base_SetConfig+0x114>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d01f      	beq.n	8003786 <TIM_Base_SetConfig+0x9a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374c:	d01b      	beq.n	8003786 <TIM_Base_SetConfig+0x9a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a2c      	ldr	r2, [pc, #176]	; (8003804 <TIM_Base_SetConfig+0x118>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d017      	beq.n	8003786 <TIM_Base_SetConfig+0x9a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2b      	ldr	r2, [pc, #172]	; (8003808 <TIM_Base_SetConfig+0x11c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <TIM_Base_SetConfig+0x9a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2a      	ldr	r2, [pc, #168]	; (800380c <TIM_Base_SetConfig+0x120>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00f      	beq.n	8003786 <TIM_Base_SetConfig+0x9a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a29      	ldr	r2, [pc, #164]	; (8003810 <TIM_Base_SetConfig+0x124>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00b      	beq.n	8003786 <TIM_Base_SetConfig+0x9a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a28      	ldr	r2, [pc, #160]	; (8003814 <TIM_Base_SetConfig+0x128>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d007      	beq.n	8003786 <TIM_Base_SetConfig+0x9a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a27      	ldr	r2, [pc, #156]	; (8003818 <TIM_Base_SetConfig+0x12c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_Base_SetConfig+0x9a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a26      	ldr	r2, [pc, #152]	; (800381c <TIM_Base_SetConfig+0x130>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d108      	bne.n	8003798 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a10      	ldr	r2, [pc, #64]	; (8003800 <TIM_Base_SetConfig+0x114>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00f      	beq.n	80037e4 <TIM_Base_SetConfig+0xf8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <TIM_Base_SetConfig+0x124>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00b      	beq.n	80037e4 <TIM_Base_SetConfig+0xf8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a11      	ldr	r2, [pc, #68]	; (8003814 <TIM_Base_SetConfig+0x128>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d007      	beq.n	80037e4 <TIM_Base_SetConfig+0xf8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a10      	ldr	r2, [pc, #64]	; (8003818 <TIM_Base_SetConfig+0x12c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_Base_SetConfig+0xf8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a0f      	ldr	r2, [pc, #60]	; (800381c <TIM_Base_SetConfig+0x130>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	615a      	str	r2, [r3, #20]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40000c00 	.word	0x40000c00
 8003810:	40013400 	.word	0x40013400
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800

08003820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f023 0201 	bic.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0303 	bic.w	r3, r3, #3
 800385a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f023 0302 	bic.w	r3, r3, #2
 800386c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a2c      	ldr	r2, [pc, #176]	; (800392c <TIM_OC1_SetConfig+0x10c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00f      	beq.n	80038a0 <TIM_OC1_SetConfig+0x80>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a2b      	ldr	r2, [pc, #172]	; (8003930 <TIM_OC1_SetConfig+0x110>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_OC1_SetConfig+0x80>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <TIM_OC1_SetConfig+0x114>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_OC1_SetConfig+0x80>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a29      	ldr	r2, [pc, #164]	; (8003938 <TIM_OC1_SetConfig+0x118>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_OC1_SetConfig+0x80>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a28      	ldr	r2, [pc, #160]	; (800393c <TIM_OC1_SetConfig+0x11c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10c      	bne.n	80038ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0308 	bic.w	r3, r3, #8
 80038a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1b      	ldr	r2, [pc, #108]	; (800392c <TIM_OC1_SetConfig+0x10c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00f      	beq.n	80038e2 <TIM_OC1_SetConfig+0xc2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <TIM_OC1_SetConfig+0x110>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_OC1_SetConfig+0xc2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a19      	ldr	r2, [pc, #100]	; (8003934 <TIM_OC1_SetConfig+0x114>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <TIM_OC1_SetConfig+0xc2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a18      	ldr	r2, [pc, #96]	; (8003938 <TIM_OC1_SetConfig+0x118>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_OC1_SetConfig+0xc2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a17      	ldr	r2, [pc, #92]	; (800393c <TIM_OC1_SetConfig+0x11c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d111      	bne.n	8003906 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	621a      	str	r2, [r3, #32]
}
 8003920:	bf00      	nop
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40013400 	.word	0x40013400
 8003934:	40014000 	.word	0x40014000
 8003938:	40014400 	.word	0x40014400
 800393c:	40014800 	.word	0x40014800

08003940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0210 	bic.w	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800396e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	021b      	lsls	r3, r3, #8
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 0320 	bic.w	r3, r3, #32
 800398e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a28      	ldr	r2, [pc, #160]	; (8003a40 <TIM_OC2_SetConfig+0x100>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d003      	beq.n	80039ac <TIM_OC2_SetConfig+0x6c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a27      	ldr	r2, [pc, #156]	; (8003a44 <TIM_OC2_SetConfig+0x104>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10d      	bne.n	80039c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <TIM_OC2_SetConfig+0x100>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00f      	beq.n	80039f0 <TIM_OC2_SetConfig+0xb0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <TIM_OC2_SetConfig+0x104>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <TIM_OC2_SetConfig+0xb0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <TIM_OC2_SetConfig+0x108>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d007      	beq.n	80039f0 <TIM_OC2_SetConfig+0xb0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a1a      	ldr	r2, [pc, #104]	; (8003a4c <TIM_OC2_SetConfig+0x10c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_OC2_SetConfig+0xb0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <TIM_OC2_SetConfig+0x110>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d113      	bne.n	8003a18 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	40013400 	.word	0x40013400
 8003a48:	40014000 	.word	0x40014000
 8003a4c:	40014400 	.word	0x40014400
 8003a50:	40014800 	.word	0x40014800

08003a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0303 	bic.w	r3, r3, #3
 8003a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a27      	ldr	r2, [pc, #156]	; (8003b50 <TIM_OC3_SetConfig+0xfc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_OC3_SetConfig+0x6a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a26      	ldr	r2, [pc, #152]	; (8003b54 <TIM_OC3_SetConfig+0x100>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10d      	bne.n	8003ada <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <TIM_OC3_SetConfig+0xfc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00f      	beq.n	8003b02 <TIM_OC3_SetConfig+0xae>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <TIM_OC3_SetConfig+0x100>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_OC3_SetConfig+0xae>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1a      	ldr	r2, [pc, #104]	; (8003b58 <TIM_OC3_SetConfig+0x104>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_OC3_SetConfig+0xae>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <TIM_OC3_SetConfig+0x108>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_OC3_SetConfig+0xae>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <TIM_OC3_SetConfig+0x10c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d113      	bne.n	8003b2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	621a      	str	r2, [r3, #32]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40013400 	.word	0x40013400
 8003b58:	40014000 	.word	0x40014000
 8003b5c:	40014400 	.word	0x40014400
 8003b60:	40014800 	.word	0x40014800

08003b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	031b      	lsls	r3, r3, #12
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <TIM_OC4_SetConfig+0xc0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00f      	beq.n	8003be8 <TIM_OC4_SetConfig+0x84>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <TIM_OC4_SetConfig+0xc4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00b      	beq.n	8003be8 <TIM_OC4_SetConfig+0x84>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <TIM_OC4_SetConfig+0xc8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <TIM_OC4_SetConfig+0x84>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <TIM_OC4_SetConfig+0xcc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_OC4_SetConfig+0x84>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <TIM_OC4_SetConfig+0xd0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d109      	bne.n	8003bfc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40013400 	.word	0x40013400
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40014400 	.word	0x40014400
 8003c34:	40014800 	.word	0x40014800

08003c38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	041b      	lsls	r3, r3, #16
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a17      	ldr	r2, [pc, #92]	; (8003cec <TIM_OC5_SetConfig+0xb4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00f      	beq.n	8003cb2 <TIM_OC5_SetConfig+0x7a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <TIM_OC5_SetConfig+0xb8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00b      	beq.n	8003cb2 <TIM_OC5_SetConfig+0x7a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <TIM_OC5_SetConfig+0xbc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_OC5_SetConfig+0x7a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <TIM_OC5_SetConfig+0xc0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_OC5_SetConfig+0x7a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <TIM_OC5_SetConfig+0xc4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d109      	bne.n	8003cc6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	621a      	str	r2, [r3, #32]
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40013400 	.word	0x40013400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40014800 	.word	0x40014800

08003d00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	051b      	lsls	r3, r3, #20
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <TIM_OC6_SetConfig+0xb8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00f      	beq.n	8003d7c <TIM_OC6_SetConfig+0x7c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <TIM_OC6_SetConfig+0xbc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <TIM_OC6_SetConfig+0x7c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <TIM_OC6_SetConfig+0xc0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d007      	beq.n	8003d7c <TIM_OC6_SetConfig+0x7c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a15      	ldr	r2, [pc, #84]	; (8003dc4 <TIM_OC6_SetConfig+0xc4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_OC6_SetConfig+0x7c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <TIM_OC6_SetConfig+0xc8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d109      	bne.n	8003d90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	029b      	lsls	r3, r3, #10
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	621a      	str	r2, [r3, #32]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40012c00 	.word	0x40012c00
 8003dbc:	40013400 	.word	0x40013400
 8003dc0:	40014000 	.word	0x40014000
 8003dc4:	40014400 	.word	0x40014400
 8003dc8:	40014800 	.word	0x40014800

08003dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0201 	bic.w	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 030a 	bic.w	r3, r3, #10
 8003e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b087      	sub	sp, #28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f023 0210 	bic.w	r2, r3, #16
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	031b      	lsls	r3, r3, #12
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f043 0307 	orr.w	r3, r3, #7
 8003eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	609a      	str	r2, [r3, #8]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	021a      	lsls	r2, r3, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	609a      	str	r2, [r3, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	2201      	movs	r2, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	401a      	ands	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1a      	ldr	r2, [r3, #32]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	fa01 f303 	lsl.w	r3, r1, r3
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e068      	b.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a2e      	ldr	r2, [pc, #184]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a2d      	ldr	r2, [pc, #180]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d108      	bne.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1e      	ldr	r2, [pc, #120]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01d      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd6:	d018      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1a      	ldr	r2, [pc, #104]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a13      	ldr	r2, [pc, #76]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a14      	ldr	r2, [pc, #80]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d10c      	bne.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	4313      	orrs	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40012c00 	.word	0x40012c00
 8004048:	40013400 	.word	0x40013400
 800404c:	40000400 	.word	0x40000400
 8004050:	40000800 	.word	0x40000800
 8004054:	40000c00 	.word	0x40000c00
 8004058:	40014000 	.word	0x40014000

0800405c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e040      	b.n	800412c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc fcea 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2224      	movs	r2, #36	; 0x24
 80040c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f82c 	bl	8004134 <UART_SetConfig>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e022      	b.n	800412c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fad8 	bl	80046a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fb5f 	bl	80047e8 <UART_CheckIdleState>
 800412a:	4603      	mov	r3, r0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004138:	b08a      	sub	sp, #40	; 0x28
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	431a      	orrs	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	431a      	orrs	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	4313      	orrs	r3, r2
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4ba4      	ldr	r3, [pc, #656]	; (80043f4 <UART_SetConfig+0x2c0>)
 8004164:	4013      	ands	r3, r2
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800416c:	430b      	orrs	r3, r1
 800416e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a99      	ldr	r2, [pc, #612]	; (80043f8 <UART_SetConfig+0x2c4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	4313      	orrs	r3, r2
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	430a      	orrs	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a90      	ldr	r2, [pc, #576]	; (80043fc <UART_SetConfig+0x2c8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d126      	bne.n	800420c <UART_SetConfig+0xd8>
 80041be:	4b90      	ldr	r3, [pc, #576]	; (8004400 <UART_SetConfig+0x2cc>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d81b      	bhi.n	8004204 <UART_SetConfig+0xd0>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <UART_SetConfig+0xa0>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	080041f5 	.word	0x080041f5
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041fd 	.word	0x080041fd
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ea:	e116      	b.n	800441a <UART_SetConfig+0x2e6>
 80041ec:	2302      	movs	r3, #2
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f2:	e112      	b.n	800441a <UART_SetConfig+0x2e6>
 80041f4:	2304      	movs	r3, #4
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fa:	e10e      	b.n	800441a <UART_SetConfig+0x2e6>
 80041fc:	2308      	movs	r3, #8
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e10a      	b.n	800441a <UART_SetConfig+0x2e6>
 8004204:	2310      	movs	r3, #16
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e106      	b.n	800441a <UART_SetConfig+0x2e6>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a7c      	ldr	r2, [pc, #496]	; (8004404 <UART_SetConfig+0x2d0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d138      	bne.n	8004288 <UART_SetConfig+0x154>
 8004216:	4b7a      	ldr	r3, [pc, #488]	; (8004400 <UART_SetConfig+0x2cc>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	2b0c      	cmp	r3, #12
 8004222:	d82d      	bhi.n	8004280 <UART_SetConfig+0x14c>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <UART_SetConfig+0xf8>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	08004261 	.word	0x08004261
 8004230:	08004281 	.word	0x08004281
 8004234:	08004281 	.word	0x08004281
 8004238:	08004281 	.word	0x08004281
 800423c:	08004271 	.word	0x08004271
 8004240:	08004281 	.word	0x08004281
 8004244:	08004281 	.word	0x08004281
 8004248:	08004281 	.word	0x08004281
 800424c:	08004269 	.word	0x08004269
 8004250:	08004281 	.word	0x08004281
 8004254:	08004281 	.word	0x08004281
 8004258:	08004281 	.word	0x08004281
 800425c:	08004279 	.word	0x08004279
 8004260:	2300      	movs	r3, #0
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004266:	e0d8      	b.n	800441a <UART_SetConfig+0x2e6>
 8004268:	2302      	movs	r3, #2
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426e:	e0d4      	b.n	800441a <UART_SetConfig+0x2e6>
 8004270:	2304      	movs	r3, #4
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004276:	e0d0      	b.n	800441a <UART_SetConfig+0x2e6>
 8004278:	2308      	movs	r3, #8
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427e:	e0cc      	b.n	800441a <UART_SetConfig+0x2e6>
 8004280:	2310      	movs	r3, #16
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e0c8      	b.n	800441a <UART_SetConfig+0x2e6>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a5e      	ldr	r2, [pc, #376]	; (8004408 <UART_SetConfig+0x2d4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d125      	bne.n	80042de <UART_SetConfig+0x1aa>
 8004292:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <UART_SetConfig+0x2cc>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d016      	beq.n	80042ce <UART_SetConfig+0x19a>
 80042a0:	2b30      	cmp	r3, #48	; 0x30
 80042a2:	d818      	bhi.n	80042d6 <UART_SetConfig+0x1a2>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d00a      	beq.n	80042be <UART_SetConfig+0x18a>
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d814      	bhi.n	80042d6 <UART_SetConfig+0x1a2>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <UART_SetConfig+0x182>
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d008      	beq.n	80042c6 <UART_SetConfig+0x192>
 80042b4:	e00f      	b.n	80042d6 <UART_SetConfig+0x1a2>
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042bc:	e0ad      	b.n	800441a <UART_SetConfig+0x2e6>
 80042be:	2302      	movs	r3, #2
 80042c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c4:	e0a9      	b.n	800441a <UART_SetConfig+0x2e6>
 80042c6:	2304      	movs	r3, #4
 80042c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042cc:	e0a5      	b.n	800441a <UART_SetConfig+0x2e6>
 80042ce:	2308      	movs	r3, #8
 80042d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d4:	e0a1      	b.n	800441a <UART_SetConfig+0x2e6>
 80042d6:	2310      	movs	r3, #16
 80042d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042dc:	e09d      	b.n	800441a <UART_SetConfig+0x2e6>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a4a      	ldr	r2, [pc, #296]	; (800440c <UART_SetConfig+0x2d8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d125      	bne.n	8004334 <UART_SetConfig+0x200>
 80042e8:	4b45      	ldr	r3, [pc, #276]	; (8004400 <UART_SetConfig+0x2cc>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042f2:	2bc0      	cmp	r3, #192	; 0xc0
 80042f4:	d016      	beq.n	8004324 <UART_SetConfig+0x1f0>
 80042f6:	2bc0      	cmp	r3, #192	; 0xc0
 80042f8:	d818      	bhi.n	800432c <UART_SetConfig+0x1f8>
 80042fa:	2b80      	cmp	r3, #128	; 0x80
 80042fc:	d00a      	beq.n	8004314 <UART_SetConfig+0x1e0>
 80042fe:	2b80      	cmp	r3, #128	; 0x80
 8004300:	d814      	bhi.n	800432c <UART_SetConfig+0x1f8>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <UART_SetConfig+0x1d8>
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d008      	beq.n	800431c <UART_SetConfig+0x1e8>
 800430a:	e00f      	b.n	800432c <UART_SetConfig+0x1f8>
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e082      	b.n	800441a <UART_SetConfig+0x2e6>
 8004314:	2302      	movs	r3, #2
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	e07e      	b.n	800441a <UART_SetConfig+0x2e6>
 800431c:	2304      	movs	r3, #4
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004322:	e07a      	b.n	800441a <UART_SetConfig+0x2e6>
 8004324:	2308      	movs	r3, #8
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432a:	e076      	b.n	800441a <UART_SetConfig+0x2e6>
 800432c:	2310      	movs	r3, #16
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e072      	b.n	800441a <UART_SetConfig+0x2e6>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a35      	ldr	r2, [pc, #212]	; (8004410 <UART_SetConfig+0x2dc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d12a      	bne.n	8004394 <UART_SetConfig+0x260>
 800433e:	4b30      	ldr	r3, [pc, #192]	; (8004400 <UART_SetConfig+0x2cc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434c:	d01a      	beq.n	8004384 <UART_SetConfig+0x250>
 800434e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004352:	d81b      	bhi.n	800438c <UART_SetConfig+0x258>
 8004354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004358:	d00c      	beq.n	8004374 <UART_SetConfig+0x240>
 800435a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435e:	d815      	bhi.n	800438c <UART_SetConfig+0x258>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <UART_SetConfig+0x238>
 8004364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004368:	d008      	beq.n	800437c <UART_SetConfig+0x248>
 800436a:	e00f      	b.n	800438c <UART_SetConfig+0x258>
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004372:	e052      	b.n	800441a <UART_SetConfig+0x2e6>
 8004374:	2302      	movs	r3, #2
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437a:	e04e      	b.n	800441a <UART_SetConfig+0x2e6>
 800437c:	2304      	movs	r3, #4
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e04a      	b.n	800441a <UART_SetConfig+0x2e6>
 8004384:	2308      	movs	r3, #8
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e046      	b.n	800441a <UART_SetConfig+0x2e6>
 800438c:	2310      	movs	r3, #16
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e042      	b.n	800441a <UART_SetConfig+0x2e6>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a17      	ldr	r2, [pc, #92]	; (80043f8 <UART_SetConfig+0x2c4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d13a      	bne.n	8004414 <UART_SetConfig+0x2e0>
 800439e:	4b18      	ldr	r3, [pc, #96]	; (8004400 <UART_SetConfig+0x2cc>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ac:	d01a      	beq.n	80043e4 <UART_SetConfig+0x2b0>
 80043ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043b2:	d81b      	bhi.n	80043ec <UART_SetConfig+0x2b8>
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b8:	d00c      	beq.n	80043d4 <UART_SetConfig+0x2a0>
 80043ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043be:	d815      	bhi.n	80043ec <UART_SetConfig+0x2b8>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <UART_SetConfig+0x298>
 80043c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c8:	d008      	beq.n	80043dc <UART_SetConfig+0x2a8>
 80043ca:	e00f      	b.n	80043ec <UART_SetConfig+0x2b8>
 80043cc:	2300      	movs	r3, #0
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d2:	e022      	b.n	800441a <UART_SetConfig+0x2e6>
 80043d4:	2302      	movs	r3, #2
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043da:	e01e      	b.n	800441a <UART_SetConfig+0x2e6>
 80043dc:	2304      	movs	r3, #4
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e2:	e01a      	b.n	800441a <UART_SetConfig+0x2e6>
 80043e4:	2308      	movs	r3, #8
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ea:	e016      	b.n	800441a <UART_SetConfig+0x2e6>
 80043ec:	2310      	movs	r3, #16
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f2:	e012      	b.n	800441a <UART_SetConfig+0x2e6>
 80043f4:	efff69f3 	.word	0xefff69f3
 80043f8:	40008000 	.word	0x40008000
 80043fc:	40013800 	.word	0x40013800
 8004400:	40021000 	.word	0x40021000
 8004404:	40004400 	.word	0x40004400
 8004408:	40004800 	.word	0x40004800
 800440c:	40004c00 	.word	0x40004c00
 8004410:	40005000 	.word	0x40005000
 8004414:	2310      	movs	r3, #16
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a9f      	ldr	r2, [pc, #636]	; (800469c <UART_SetConfig+0x568>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d17a      	bne.n	800451a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004428:	2b08      	cmp	r3, #8
 800442a:	d824      	bhi.n	8004476 <UART_SetConfig+0x342>
 800442c:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <UART_SetConfig+0x300>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	08004459 	.word	0x08004459
 8004438:	08004477 	.word	0x08004477
 800443c:	08004461 	.word	0x08004461
 8004440:	08004477 	.word	0x08004477
 8004444:	08004467 	.word	0x08004467
 8004448:	08004477 	.word	0x08004477
 800444c:	08004477 	.word	0x08004477
 8004450:	08004477 	.word	0x08004477
 8004454:	0800446f 	.word	0x0800446f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004458:	f7fd fd56 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 800445c:	61f8      	str	r0, [r7, #28]
        break;
 800445e:	e010      	b.n	8004482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004460:	4b8f      	ldr	r3, [pc, #572]	; (80046a0 <UART_SetConfig+0x56c>)
 8004462:	61fb      	str	r3, [r7, #28]
        break;
 8004464:	e00d      	b.n	8004482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004466:	f7fd fcb7 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 800446a:	61f8      	str	r0, [r7, #28]
        break;
 800446c:	e009      	b.n	8004482 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004472:	61fb      	str	r3, [r7, #28]
        break;
 8004474:	e005      	b.n	8004482 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004480:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80fb 	beq.w	8004680 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	4413      	add	r3, r2
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	429a      	cmp	r2, r3
 8004498:	d305      	bcc.n	80044a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d903      	bls.n	80044ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044ac:	e0e8      	b.n	8004680 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	2200      	movs	r2, #0
 80044b2:	461c      	mov	r4, r3
 80044b4:	4615      	mov	r5, r2
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	022b      	lsls	r3, r5, #8
 80044c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044c4:	0222      	lsls	r2, r4, #8
 80044c6:	68f9      	ldr	r1, [r7, #12]
 80044c8:	6849      	ldr	r1, [r1, #4]
 80044ca:	0849      	lsrs	r1, r1, #1
 80044cc:	2000      	movs	r0, #0
 80044ce:	4688      	mov	r8, r1
 80044d0:	4681      	mov	r9, r0
 80044d2:	eb12 0a08 	adds.w	sl, r2, r8
 80044d6:	eb43 0b09 	adc.w	fp, r3, r9
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e8:	4650      	mov	r0, sl
 80044ea:	4659      	mov	r1, fp
 80044ec:	f7fb fe6c 	bl	80001c8 <__aeabi_uldivmod>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4613      	mov	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044fe:	d308      	bcc.n	8004512 <UART_SetConfig+0x3de>
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004506:	d204      	bcs.n	8004512 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	60da      	str	r2, [r3, #12]
 8004510:	e0b6      	b.n	8004680 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004518:	e0b2      	b.n	8004680 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004522:	d15e      	bne.n	80045e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004528:	2b08      	cmp	r3, #8
 800452a:	d828      	bhi.n	800457e <UART_SetConfig+0x44a>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <UART_SetConfig+0x400>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004559 	.word	0x08004559
 8004538:	08004561 	.word	0x08004561
 800453c:	08004569 	.word	0x08004569
 8004540:	0800457f 	.word	0x0800457f
 8004544:	0800456f 	.word	0x0800456f
 8004548:	0800457f 	.word	0x0800457f
 800454c:	0800457f 	.word	0x0800457f
 8004550:	0800457f 	.word	0x0800457f
 8004554:	08004577 	.word	0x08004577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fd fcd6 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 800455c:	61f8      	str	r0, [r7, #28]
        break;
 800455e:	e014      	b.n	800458a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004560:	f7fd fce8 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8004564:	61f8      	str	r0, [r7, #28]
        break;
 8004566:	e010      	b.n	800458a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004568:	4b4d      	ldr	r3, [pc, #308]	; (80046a0 <UART_SetConfig+0x56c>)
 800456a:	61fb      	str	r3, [r7, #28]
        break;
 800456c:	e00d      	b.n	800458a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456e:	f7fd fc33 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8004572:	61f8      	str	r0, [r7, #28]
        break;
 8004574:	e009      	b.n	800458a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457a:	61fb      	str	r3, [r7, #28]
        break;
 800457c:	e005      	b.n	800458a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d077      	beq.n	8004680 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	005a      	lsls	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	441a      	add	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b0f      	cmp	r3, #15
 80045aa:	d916      	bls.n	80045da <UART_SetConfig+0x4a6>
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b2:	d212      	bcs.n	80045da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f023 030f 	bic.w	r3, r3, #15
 80045bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	8afb      	ldrh	r3, [r7, #22]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	8afa      	ldrh	r2, [r7, #22]
 80045d6:	60da      	str	r2, [r3, #12]
 80045d8:	e052      	b.n	8004680 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045e0:	e04e      	b.n	8004680 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d827      	bhi.n	800463a <UART_SetConfig+0x506>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0x4bc>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004615 	.word	0x08004615
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004625 	.word	0x08004625
 80045fc:	0800463b 	.word	0x0800463b
 8004600:	0800462b 	.word	0x0800462b
 8004604:	0800463b 	.word	0x0800463b
 8004608:	0800463b 	.word	0x0800463b
 800460c:	0800463b 	.word	0x0800463b
 8004610:	08004633 	.word	0x08004633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004614:	f7fd fc78 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8004618:	61f8      	str	r0, [r7, #28]
        break;
 800461a:	e014      	b.n	8004646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800461c:	f7fd fc8a 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8004620:	61f8      	str	r0, [r7, #28]
        break;
 8004622:	e010      	b.n	8004646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <UART_SetConfig+0x56c>)
 8004626:	61fb      	str	r3, [r7, #28]
        break;
 8004628:	e00d      	b.n	8004646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800462a:	f7fd fbd5 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 800462e:	61f8      	str	r0, [r7, #28]
        break;
 8004630:	e009      	b.n	8004646 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004636:	61fb      	str	r3, [r7, #28]
        break;
 8004638:	e005      	b.n	8004646 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004644:	bf00      	nop
    }

    if (pclk != 0U)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d019      	beq.n	8004680 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	085a      	lsrs	r2, r3, #1
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	441a      	add	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	fbb2 f3f3 	udiv	r3, r2, r3
 800465e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b0f      	cmp	r3, #15
 8004664:	d909      	bls.n	800467a <UART_SetConfig+0x546>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466c:	d205      	bcs.n	800467a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60da      	str	r2, [r3, #12]
 8004678:	e002      	b.n	8004680 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800468c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004690:	4618      	mov	r0, r3
 8004692:	3728      	adds	r7, #40	; 0x28
 8004694:	46bd      	mov	sp, r7
 8004696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800469a:	bf00      	nop
 800469c:	40008000 	.word	0x40008000
 80046a0:	00f42400 	.word	0x00f42400

080046a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01a      	beq.n	80047ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a2:	d10a      	bne.n	80047ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
  }
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047f8:	f7fc fa9e 	bl	8000d38 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b08      	cmp	r3, #8
 800480a:	d10e      	bne.n	800482a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800480c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f82d 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e023      	b.n	8004872 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b04      	cmp	r3, #4
 8004836:	d10e      	bne.n	8004856 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f817 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e00d      	b.n	8004872 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b09c      	sub	sp, #112	; 0x70
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	e0a5      	b.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	f000 80a1 	beq.w	80049d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fc fa4f 	bl	8000d38 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <UART_WaitOnFlagUntilTimeout+0x32>
 80048a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d13e      	bne.n	800492a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c0:	667b      	str	r3, [r7, #100]	; 0x64
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e6      	bne.n	80048ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	663b      	str	r3, [r7, #96]	; 0x60
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3308      	adds	r3, #8
 80048fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004900:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800490c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e067      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d04f      	beq.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004946:	d147      	bne.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004950:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004966:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004970:	637b      	str	r3, [r7, #52]	; 0x34
 8004972:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e6      	bne.n	8004952 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3308      	adds	r3, #8
 800498a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	613b      	str	r3, [r7, #16]
   return(result);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	66bb      	str	r3, [r7, #104]	; 0x68
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049a4:	623a      	str	r2, [r7, #32]
 80049a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	69f9      	ldr	r1, [r7, #28]
 80049aa:	6a3a      	ldr	r2, [r7, #32]
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e5      	bne.n	8004984 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e010      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69da      	ldr	r2, [r3, #28]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4013      	ands	r3, r2
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	f43f af4a 	beq.w	800488c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3770      	adds	r7, #112	; 0x70
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <__libc_init_array>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	4d0d      	ldr	r5, [pc, #52]	; (8004a3c <__libc_init_array+0x38>)
 8004a08:	4c0d      	ldr	r4, [pc, #52]	; (8004a40 <__libc_init_array+0x3c>)
 8004a0a:	1b64      	subs	r4, r4, r5
 8004a0c:	10a4      	asrs	r4, r4, #2
 8004a0e:	2600      	movs	r6, #0
 8004a10:	42a6      	cmp	r6, r4
 8004a12:	d109      	bne.n	8004a28 <__libc_init_array+0x24>
 8004a14:	4d0b      	ldr	r5, [pc, #44]	; (8004a44 <__libc_init_array+0x40>)
 8004a16:	4c0c      	ldr	r4, [pc, #48]	; (8004a48 <__libc_init_array+0x44>)
 8004a18:	f000 f820 	bl	8004a5c <_init>
 8004a1c:	1b64      	subs	r4, r4, r5
 8004a1e:	10a4      	asrs	r4, r4, #2
 8004a20:	2600      	movs	r6, #0
 8004a22:	42a6      	cmp	r6, r4
 8004a24:	d105      	bne.n	8004a32 <__libc_init_array+0x2e>
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2c:	4798      	blx	r3
 8004a2e:	3601      	adds	r6, #1
 8004a30:	e7ee      	b.n	8004a10 <__libc_init_array+0xc>
 8004a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a36:	4798      	blx	r3
 8004a38:	3601      	adds	r6, #1
 8004a3a:	e7f2      	b.n	8004a22 <__libc_init_array+0x1e>
 8004a3c:	08004ac4 	.word	0x08004ac4
 8004a40:	08004ac4 	.word	0x08004ac4
 8004a44:	08004ac4 	.word	0x08004ac4
 8004a48:	08004ac8 	.word	0x08004ac8

08004a4c <memset>:
 8004a4c:	4402      	add	r2, r0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d100      	bne.n	8004a56 <memset+0xa>
 8004a54:	4770      	bx	lr
 8004a56:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5a:	e7f9      	b.n	8004a50 <memset+0x4>

08004a5c <_init>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr

08004a68 <_fini>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	bf00      	nop
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr
