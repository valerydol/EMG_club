
PWM_task17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006454  08006454  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800645c  0800645c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000074  080064d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080064d8  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011425  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d3  00000000  00000000  000314c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000336a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  000345c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b0b  00000000  00000000  00035418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001138b  00000000  00000000  0005cf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5975  00000000  00000000  0006e2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163c23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a30  00000000  00000000  00163c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006170 	.word	0x08006170

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006170 	.word	0x08006170

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <commTask>:
uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
int cmdcount = 0;
//extern int currBrightness;

int commTask()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 0);
 800059a:	1db9      	adds	r1, r7, #6
 800059c:	2300      	movs	r3, #0
 800059e:	2201      	movs	r2, #1
 80005a0:	481d      	ldr	r0, [pc, #116]	; (8000618 <commTask+0x84>)
 80005a2:	f003 ff1d 	bl	80043e0 <HAL_UART_Receive>
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK) {
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <commTask+0x20>
		return 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e02d      	b.n	8000610 <commTask+0x7c>
	}

	if (ch != '\r' && ch != '\n')
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	2b0d      	cmp	r3, #13
 80005b8:	d01a      	beq.n	80005f0 <commTask+0x5c>
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	2b0a      	cmp	r3, #10
 80005be:	d017      	beq.n	80005f0 <commTask+0x5c>
	{
		HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);
 80005c0:	1db9      	adds	r1, r7, #6
 80005c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c6:	2201      	movs	r2, #1
 80005c8:	4813      	ldr	r0, [pc, #76]	; (8000618 <commTask+0x84>)
 80005ca:	f003 fe75 	bl	80042b8 <HAL_UART_Transmit>

		if (cmdcount >= MAX_BUFFER_LENGTH)
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <commTask+0x88>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b63      	cmp	r3, #99	; 0x63
 80005d4:	dd02      	ble.n	80005dc <commTask+0x48>
		{
			cmdcount = 0;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <commTask+0x88>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <commTask+0x88>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	490e      	ldr	r1, [pc, #56]	; (800061c <commTask+0x88>)
 80005e4:	600a      	str	r2, [r1, #0]
 80005e6:	79b9      	ldrb	r1, [r7, #6]
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <commTask+0x8c>)
 80005ea:	54d1      	strb	r1, [r2, r3]
		return 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	e00f      	b.n	8000610 <commTask+0x7c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 80005f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f4:	2202      	movs	r2, #2
 80005f6:	490b      	ldr	r1, [pc, #44]	; (8000624 <commTask+0x90>)
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <commTask+0x84>)
 80005fa:	f003 fe5d 	bl	80042b8 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <commTask+0x88>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <commTask+0x8c>)
 8000604:	2100      	movs	r1, #0
 8000606:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <commTask+0x88>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
	return 1;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000dc 	.word	0x200000dc
 800061c:	200001c8 	.word	0x200001c8
 8000620:	20000164 	.word	0x20000164
 8000624:	08006188 	.word	0x08006188

08000628 <handleCommand>:



void handleCommand()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
  char delim[2] = " ";
 800062e:	2320      	movs	r3, #32
 8000630:	80bb      	strh	r3, [r7, #4]
  char* res = strtok(cmdbuffer, delim);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	482f      	ldr	r0, [pc, #188]	; (80006f4 <handleCommand+0xcc>)
 8000638:	f004 fcb8 	bl	8004fac <strtok>
 800063c:	4603      	mov	r3, r0
 800063e:	60fb      	str	r3, [r7, #12]

  if(res == NULL)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d052      	beq.n	80006ec <handleCommand+0xc4>
  {
	  return;
  }

  while(res != NULL)
 8000646:	e04a      	b.n	80006de <handleCommand+0xb6>
  {
	  if (strcmp(res, "full") == 0)
 8000648:	492b      	ldr	r1, [pc, #172]	; (80006f8 <handleCommand+0xd0>)
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f7ff fdc0 	bl	80001d0 <strcmp>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d106      	bne.n	8000664 <handleCommand+0x3c>
	  {
		  isBrightness = 0;
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <handleCommand+0xd4>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
		  while(res != NULL)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d021      	beq.n	80006a6 <handleCommand+0x7e>
		  {
				 // stateOn();
				  return;
 8000662:	e044      	b.n	80006ee <handleCommand+0xc6>
		  }
	  }
	  else if (strcmp(res, "off") == 0)
 8000664:	4926      	ldr	r1, [pc, #152]	; (8000700 <handleCommand+0xd8>)
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f7ff fdb2 	bl	80001d0 <strcmp>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d103      	bne.n	800067a <handleCommand+0x52>
	  {
		  isBrightness = 0;
 8000672:	4b22      	ldr	r3, [pc, #136]	; (80006fc <handleCommand+0xd4>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
		 // stateOff();
		  return;
 8000678:	e039      	b.n	80006ee <handleCommand+0xc6>
	  }
	  else if (strcmp(res, "half") == 0)
 800067a:	4922      	ldr	r1, [pc, #136]	; (8000704 <handleCommand+0xdc>)
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f7ff fda7 	bl	80001d0 <strcmp>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d103      	bne.n	8000690 <handleCommand+0x68>
	  {
		  isBrightness = 0;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <handleCommand+0xd4>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		 // stateHalfBrightness();
		  return;
 800068e:	e02e      	b.n	80006ee <handleCommand+0xc6>
	  }

	  else if (strcmp(res, "blink") == 0)
 8000690:	491d      	ldr	r1, [pc, #116]	; (8000708 <handleCommand+0xe0>)
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f7ff fd9c 	bl	80001d0 <strcmp>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <handleCommand+0x7e>
	  {
		  isBrightness = 0;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <handleCommand+0xd4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
		  //stateBlink();
		  return;
 80006a4:	e023      	b.n	80006ee <handleCommand+0xc6>
	  }
	  if (strcmp(res, "set") == 0)
 80006a6:	4919      	ldr	r1, [pc, #100]	; (800070c <handleCommand+0xe4>)
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f7ff fd91 	bl	80001d0 <strcmp>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d114      	bne.n	80006de <handleCommand+0xb6>
	  {
		  isBrightness = 1;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <handleCommand+0xd4>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
		  while(res != NULL)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00e      	beq.n	80006de <handleCommand+0xb6>
		  {
			  res = strtok(NULL, delim);
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	2000      	movs	r0, #0
 80006c6:	f004 fc71 	bl	8004fac <strtok>
 80006ca:	4603      	mov	r3, r0
 80006cc:	60fb      	str	r3, [r7, #12]
			  int count = atoi(res);
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f004 fbbf 	bl	8004e52 <atoi>
 80006d4:	60b8      	str	r0, [r7, #8]
			  {
				  setBrightness(count);
 80006d6:	68b8      	ldr	r0, [r7, #8]
 80006d8:	f000 fb7e 	bl	8000dd8 <setBrightness>
				  return;
 80006dc:	e007      	b.n	80006ee <handleCommand+0xc6>
  while(res != NULL)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1b1      	bne.n	8000648 <handleCommand+0x20>
			  }
		  }
	  }
  }

  printf("Invalid command\r\n");
 80006e4:	480a      	ldr	r0, [pc, #40]	; (8000710 <handleCommand+0xe8>)
 80006e6:	f004 fc59 	bl	8004f9c <puts>
 80006ea:	e000      	b.n	80006ee <handleCommand+0xc6>
	  return;
 80006ec:	bf00      	nop

}
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000164 	.word	0x20000164
 80006f8:	0800618c 	.word	0x0800618c
 80006fc:	20000160 	.word	0x20000160
 8000700:	08006194 	.word	0x08006194
 8000704:	08006198 	.word	0x08006198
 8000708:	080061a0 	.word	0x080061a0
 800070c:	080061a8 	.word	0x080061a8
 8000710:	080061ac 	.word	0x080061ac

08000714 <HAL_TIM_PeriodElapsedCallback>:

// Period
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2140      	movs	r1, #64	; 0x40
 8000720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000724:	f000 feee 	bl	8001504 <HAL_GPIO_WritePin>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <HAL_TIM_PWM_PulseFinishedCallback>:


// duty cycle
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	; 0x40
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f000 fee0 	bl	8001504 <HAL_GPIO_WritePin>

}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fba0 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f81a 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 f90e 	bl	8000978 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800075c:	f000 f8dc 	bl	8000918 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000760:	f000 f866 	bl	8000830 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); // turn on interrupts
 8000764:	201e      	movs	r0, #30
 8000766:	f000 fd08 	bl	800117a <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim4);// start interrupts  HAL_TIM_PeriodElapsedCallback
 800076a:	4807      	ldr	r0, [pc, #28]	; (8000788 <main+0x3c>)
 800076c:	f002 fa5a 	bl	8002c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);//start interrupts HAL_TIM_PWM_PulseFinishedCallback
 8000770:	2100      	movs	r1, #0
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <main+0x3c>)
 8000774:	f002 fb28 	bl	8002dc8 <HAL_TIM_PWM_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(commTask())
 8000778:	f7ff ff0c 	bl	8000594 <commTask>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0fa      	beq.n	8000778 <main+0x2c>
	  {
		  handleCommand();
 8000782:	f7ff ff51 	bl	8000628 <handleCommand>
	  if(commTask())
 8000786:	e7f7      	b.n	8000778 <main+0x2c>
 8000788:	20000090 	.word	0x20000090

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b096      	sub	sp, #88	; 0x58
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2244      	movs	r2, #68	; 0x44
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f004 fb88 	bl	8004eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007b2:	f000 fecd 	bl	8001550 <HAL_PWREx_ControlVoltageScaling>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007bc:	f000 f954 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2310      	movs	r3, #16
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d2:	2302      	movs	r3, #2
 80007d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007da:	230a      	movs	r3, #10
 80007dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007de:	2307      	movs	r3, #7
 80007e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 ff04 	bl	80015fc <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007fa:	f000 f935 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	2104      	movs	r1, #4
 8000816:	4618      	mov	r0, r3
 8000818:	f001 facc 	bl	8001db4 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000822:	f000 f921 	bl	8000a68 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3758      	adds	r7, #88	; 0x58
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
 800085e:	615a      	str	r2, [r3, #20]
 8000860:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <MX_TIM4_Init+0xe0>)
 8000864:	4a2b      	ldr	r2, [pc, #172]	; (8000914 <MX_TIM4_Init+0xe4>)
 8000866:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_TIM4_Init+0xe0>)
 800086a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800086e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <MX_TIM4_Init+0xe0>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_TIM4_Init+0xe0>)
 8000878:	2264      	movs	r2, #100	; 0x64
 800087a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_TIM4_Init+0xe0>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_TIM4_Init+0xe0>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000888:	4821      	ldr	r0, [pc, #132]	; (8000910 <MX_TIM4_Init+0xe0>)
 800088a:	f002 f973 	bl	8002b74 <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000894:	f000 f8e8 	bl	8000a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800089e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a2:	4619      	mov	r1, r3
 80008a4:	481a      	ldr	r0, [pc, #104]	; (8000910 <MX_TIM4_Init+0xe0>)
 80008a6:	f002 fefb 	bl	80036a0 <HAL_TIM_ConfigClockSource>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80008b0:	f000 f8da 	bl	8000a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008b4:	4816      	ldr	r0, [pc, #88]	; (8000910 <MX_TIM4_Init+0xe0>)
 80008b6:	f002 fa25 	bl	8002d04 <HAL_TIM_PWM_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80008c0:	f000 f8d2 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	480f      	ldr	r0, [pc, #60]	; (8000910 <MX_TIM4_Init+0xe0>)
 80008d4:	f003 fbfc 	bl	80040d0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80008de:	f000 f8c3 	bl	8000a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e2:	2360      	movs	r3, #96	; 0x60
 80008e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 80008e6:	231e      	movs	r3, #30
 80008e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_TIM4_Init+0xe0>)
 80008fa:	f002 fdbd 	bl	8003478 <HAL_TIM_PWM_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000904:	f000 f8b0 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3738      	adds	r7, #56	; 0x38
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000090 	.word	0x20000090
 8000914:	40000800 	.word	0x40000800

08000918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_USART2_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800095c:	f003 fc5e 	bl	800421c <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 f87f 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000dc 	.word	0x200000dc
 8000974:	40004400 	.word	0x40004400

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <MX_GPIO_Init+0xc4>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a2a      	ldr	r2, [pc, #168]	; (8000a3c <MX_GPIO_Init+0xc4>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <MX_GPIO_Init+0xc4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <MX_GPIO_Init+0xc4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <MX_GPIO_Init+0xc4>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <MX_GPIO_Init+0xc4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_GPIO_Init+0xc4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <MX_GPIO_Init+0xc4>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_GPIO_Init+0xc4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_GPIO_Init+0xc4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <MX_GPIO_Init+0xc4>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_GPIO_Init+0xc4>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2160      	movs	r1, #96	; 0x60
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f000 fd85 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480b      	ldr	r0, [pc, #44]	; (8000a40 <MX_GPIO_Init+0xc8>)
 8000a12:	f000 fbcd 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Red_LED_Pin;
 8000a16:	2360      	movs	r3, #96	; 0x60
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f000 fbbe 	bl	80011b0 <HAL_GPIO_Init>

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	48000800 	.word	0x48000800

08000a44 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a4c:	1d39      	adds	r1, r7, #4
 8000a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a52:	2201      	movs	r2, #1
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <__io_putchar+0x20>)
 8000a56:	f003 fc2f 	bl	80042b8 <HAL_UART_Transmit>

  return ch;
 8000a5a:	687b      	ldr	r3, [r7, #4]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000dc 	.word	0x200000dc

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	; 0x60
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_TIM_Base_MspInit+0x44>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d113      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	201e      	movs	r0, #30
 8000aec:	f000 fb29 	bl	8001142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000af0:	201e      	movs	r0, #30
 8000af2:	f000 fb42 	bl	800117a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40000800 	.word	0x40000800
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0ac      	sub	sp, #176	; 0xb0
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2288      	movs	r2, #136	; 0x88
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f004 f9c1 	bl	8004eb0 <memset>
  if(huart->Instance==USART2)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <HAL_UART_MspInit+0xb0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d13b      	bne.n	8000bb0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fb59 	bl	80021fc <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b50:	f7ff ff8a 	bl	8000a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b58:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_UART_MspInit+0xb4>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b84:	230c      	movs	r3, #12
 8000b86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f000 fb00 	bl	80011b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	37b0      	adds	r7, #176	; 0xb0
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 f99e 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <TIM4_IRQHandler+0x10>)
 8000c1a:	f002 fb0d 	bl	8003238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000090 	.word	0x20000090

08000c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
	return 1;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_kill>:

int _kill(int pid, int sig)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c42:	f004 f90b 	bl	8004e5c <__errno>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2216      	movs	r2, #22
 8000c4a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_exit>:

void _exit (int status)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ffe7 	bl	8000c38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c6a:	e7fe      	b.n	8000c6a <_exit+0x12>

08000c6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e00a      	b.n	8000c94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	4601      	mov	r1, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf0      	blt.n	8000c7e <_read+0x12>
	}

return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e009      	b.n	8000ccc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff febf 	bl	8000a44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf1      	blt.n	8000cb8 <_write+0x12>
	}
	return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_close>:

int _close(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d06:	605a      	str	r2, [r3, #4]
	return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_isatty>:

int _isatty(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f004 f870 	bl	8004e5c <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20018000 	.word	0x20018000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	200001cc 	.word	0x200001cc
 8000db0:	200001e8 	.word	0x200001e8

08000db4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <setBrightness>:

int currBrightness = 10;


void setBrightness(int brightness)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	currBrightness = brightness;
 8000de0:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <setBrightness+0x60>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
	if (currBrightness == 0)
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <setBrightness+0x60>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10e      	bne.n	8000e0c <setBrightness+0x34>
	{
		//stateOff();
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2140      	movs	r1, #64	; 0x40
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f000 fb85 	bl	8001504 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <setBrightness+0x64>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_1);
 8000e02:	2100      	movs	r1, #0
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <setBrightness+0x64>)
 8000e06:	f002 f933 	bl	8003070 <HAL_TIM_PWM_Stop_IT>
		return;
 8000e0a:	e012      	b.n	8000e32 <setBrightness+0x5a>
	}
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <setBrightness+0x64>)
 8000e10:	f001 ffda 	bl	8002dc8 <HAL_TIM_PWM_Start_IT>

//	__HAL_TIM_SET_COUNTER(&htim4, 0);// clock counter = 0
//	__HAL_TIM_SET_AUTORELOAD(&htim6, 10);// set new clock period

	int dutyCycle = 10*brightness;
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
	if(dutyCycle > 100)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b64      	cmp	r3, #100	; 0x64
 8000e24:	dd01      	ble.n	8000e2a <setBrightness+0x52>
	{
		dutyCycle = 100;
 8000e26:	2364      	movs	r3, #100	; 0x64
 8000e28:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, dutyCycle);
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <setBrightness+0x64>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
}
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000004 	.word	0x20000004
 8000e3c:	20000090 	.word	0x20000090

08000e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e44:	f7ff ffb6 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <LoopForever+0xe>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	; (8000e8c <LoopForever+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f003 fffb 	bl	8004e68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e72:	f7ff fc6b 	bl	800074c <main>

08000e76 <LoopForever>:

LoopForever:
    b LoopForever
 8000e76:	e7fe      	b.n	8000e76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e84:	08006464 	.word	0x08006464
  ldr r2, =_sbss
 8000e88:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e8c:	200001e4 	.word	0x200001e4

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_Init+0x3c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <HAL_Init+0x3c>)
 8000ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eaa:	2003      	movs	r0, #3
 8000eac:	f000 f93e 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f000 f80f 	bl	8000ed4 <HAL_InitTick>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	e001      	b.n	8000ec6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec2:	f7ff fdd7 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_InitTick+0x6c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d023      	beq.n	8000f30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_InitTick+0x70>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_InitTick+0x6c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f949 	bl	8001196 <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10f      	bne.n	8000f2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d809      	bhi.n	8000f24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f913 	bl	8001142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_InitTick+0x74>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e007      	b.n	8000f34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e004      	b.n	8000f34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e001      	b.n	8000f34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000000c 	.word	0x2000000c
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	200001d0 	.word	0x200001d0

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200001d0 	.word	0x200001d0

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4907      	ldr	r1, [pc, #28]	; (8001028 <__NVIC_EnableIRQ+0x38>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff29 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff3e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff31 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa2 	bl	80010e8 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	e17f      	b.n	80014c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8171 	beq.w	80014ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d005      	beq.n	80011f0 <HAL_GPIO_Init+0x40>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d130      	bne.n	8001252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001226:	2201      	movs	r2, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	f003 0201 	and.w	r2, r3, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b03      	cmp	r3, #3
 800125c:	d118      	bne.n	8001290 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001264:	2201      	movs	r2, #1
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	f003 0201 	and.w	r2, r3, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b03      	cmp	r3, #3
 800129a:	d017      	beq.n	80012cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80ac 	beq.w	80014ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <HAL_GPIO_Init+0x330>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	4a5e      	ldr	r2, [pc, #376]	; (80014e0 <HAL_GPIO_Init+0x330>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6613      	str	r3, [r2, #96]	; 0x60
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <HAL_GPIO_Init+0x330>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800137a:	4a5a      	ldr	r2, [pc, #360]	; (80014e4 <HAL_GPIO_Init+0x334>)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013a4:	d025      	beq.n	80013f2 <HAL_GPIO_Init+0x242>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x338>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01f      	beq.n	80013ee <HAL_GPIO_Init+0x23e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <HAL_GPIO_Init+0x33c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <HAL_GPIO_Init+0x23a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4d      	ldr	r2, [pc, #308]	; (80014f0 <HAL_GPIO_Init+0x340>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x236>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4c      	ldr	r2, [pc, #304]	; (80014f4 <HAL_GPIO_Init+0x344>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_GPIO_Init+0x232>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_GPIO_Init+0x348>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x22e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <HAL_GPIO_Init+0x34c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d101      	bne.n	80013da <HAL_GPIO_Init+0x22a>
 80013d6:	2306      	movs	r3, #6
 80013d8:	e00c      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013da:	2307      	movs	r3, #7
 80013dc:	e00a      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013de:	2305      	movs	r3, #5
 80013e0:	e008      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e004      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_GPIO_Init+0x244>
 80013f2:	2300      	movs	r3, #0
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	f002 0203 	and.w	r2, r2, #3
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	4093      	lsls	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001404:	4937      	ldr	r1, [pc, #220]	; (80014e4 <HAL_GPIO_Init+0x334>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001436:	4a32      	ldr	r2, [pc, #200]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_GPIO_Init+0x350>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001460:	4a27      	ldr	r2, [pc, #156]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800148a:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_GPIO_Init+0x350>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_GPIO_Init+0x350>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014b4:	4a12      	ldr	r2, [pc, #72]	; (8001500 <HAL_GPIO_Init+0x350>)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f ae78 	bne.w	80011c0 <HAL_GPIO_Init+0x10>
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	48001000 	.word	0x48001000
 80014f8:	48001400 	.word	0x48001400
 80014fc:	48001800 	.word	0x48001800
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001520:	e002      	b.n	8001528 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_PWREx_GetVoltageRange+0x18>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000

08001550 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800155e:	d130      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156c:	d038      	beq.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2232      	movs	r2, #50	; 0x32
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	3301      	adds	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001594:	e002      	b.n	800159c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3b01      	subs	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a8:	d102      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f2      	bne.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015bc:	d110      	bne.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e00f      	b.n	80015e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ce:	d007      	beq.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40007000 	.word	0x40007000
 80015f4:	20000000 	.word	0x20000000
 80015f8:	431bde83 	.word	0x431bde83

080015fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e3ca      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160e:	4b97      	ldr	r3, [pc, #604]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001618:	4b94      	ldr	r3, [pc, #592]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80e4 	beq.w	80017f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <HAL_RCC_OscConfig+0x4a>
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b0c      	cmp	r3, #12
 800163a:	f040 808b 	bne.w	8001754 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b01      	cmp	r3, #1
 8001642:	f040 8087 	bne.w	8001754 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001646:	4b89      	ldr	r3, [pc, #548]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x62>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e3a2      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1a      	ldr	r2, [r3, #32]
 8001662:	4b82      	ldr	r3, [pc, #520]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <HAL_RCC_OscConfig+0x7c>
 800166e:	4b7f      	ldr	r3, [pc, #508]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001676:	e005      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
 8001678:	4b7c      	ldr	r3, [pc, #496]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001684:	4293      	cmp	r3, r2
 8001686:	d223      	bcs.n	80016d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fd55 	bl	800213c <RCC_SetFlashLatencyFromMSIRange>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e383      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169c:	4b73      	ldr	r3, [pc, #460]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a72      	ldr	r2, [pc, #456]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b70      	ldr	r3, [pc, #448]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	496d      	ldr	r1, [pc, #436]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ba:	4b6c      	ldr	r3, [pc, #432]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	4968      	ldr	r1, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
 80016ce:	e025      	b.n	800171c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d0:	4b66      	ldr	r3, [pc, #408]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a65      	ldr	r2, [pc, #404]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b63      	ldr	r3, [pc, #396]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4960      	ldr	r1, [pc, #384]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ee:	4b5f      	ldr	r3, [pc, #380]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	495b      	ldr	r1, [pc, #364]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d109      	bne.n	800171c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fd15 	bl	800213c <RCC_SetFlashLatencyFromMSIRange>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e343      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800171c:	f000 fc4a 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001720:	4602      	mov	r2, r0
 8001722:	4b52      	ldr	r3, [pc, #328]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	4950      	ldr	r1, [pc, #320]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 800172e:	5ccb      	ldrb	r3, [r1, r3]
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_RCC_OscConfig+0x278>)
 800173a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800173c:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <HAL_RCC_OscConfig+0x27c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fbc7 	bl	8000ed4 <HAL_InitTick>
 8001746:	4603      	mov	r3, r0
 8001748:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d052      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	e327      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d032      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800175c:	4b43      	ldr	r3, [pc, #268]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a42      	ldr	r2, [pc, #264]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001768:	f7ff fc04 	bl	8000f74 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001770:	f7ff fc00 	bl	8000f74 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e310      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001782:	4b3a      	ldr	r3, [pc, #232]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178e:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a36      	ldr	r2, [pc, #216]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4931      	ldr	r1, [pc, #196]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ac:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	492c      	ldr	r1, [pc, #176]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e01a      	b.n	80017f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a29      	ldr	r2, [pc, #164]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fbd1 	bl	8000f74 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d6:	f7ff fbcd 	bl	8000f74 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e2dd      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017e8:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x1da>
 80017f4:	e000      	b.n	80017f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d074      	beq.n	80018ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b08      	cmp	r3, #8
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x21a>
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b0c      	cmp	r3, #12
 800180e:	d10e      	bne.n	800182e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d10b      	bne.n	800182e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d064      	beq.n	80018ec <HAL_RCC_OscConfig+0x2f0>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d160      	bne.n	80018ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e2ba      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x24a>
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0b      	ldr	r2, [pc, #44]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800183e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e026      	b.n	8001894 <HAL_RCC_OscConfig+0x298>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800184e:	d115      	bne.n	800187c <HAL_RCC_OscConfig+0x280>
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a05      	ldr	r2, [pc, #20]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a02      	ldr	r2, [pc, #8]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e014      	b.n	8001894 <HAL_RCC_OscConfig+0x298>
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	080061c0 	.word	0x080061c0
 8001874:	20000000 	.word	0x20000000
 8001878:	20000008 	.word	0x20000008
 800187c:	4ba0      	ldr	r3, [pc, #640]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a9f      	ldr	r2, [pc, #636]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b9d      	ldr	r3, [pc, #628]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a9c      	ldr	r2, [pc, #624]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fb6a 	bl	8000f74 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fb66 	bl	8000f74 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e276      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b6:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x2a8>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fb56 	bl	8000f74 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fb52 	bl	8000f74 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e262      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018de:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x2d0>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d060      	beq.n	80019bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x310>
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d119      	bne.n	800193a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d116      	bne.n	800193a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800190c:	4b7c      	ldr	r3, [pc, #496]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_OscConfig+0x328>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e23f      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	4973      	ldr	r1, [pc, #460]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001938:	e040      	b.n	80019bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d023      	beq.n	800198a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001942:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6e      	ldr	r2, [pc, #440]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff fb11 	bl	8000f74 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001956:	f7ff fb0d 	bl	8000f74 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e21d      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001968:	4b65      	ldr	r3, [pc, #404]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	495f      	ldr	r1, [pc, #380]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
 8001988:	e018      	b.n	80019bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198a:	4b5d      	ldr	r3, [pc, #372]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a5c      	ldr	r2, [pc, #368]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff faed 	bl	8000f74 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff fae9 	bl	8000f74 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1f9      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d03c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d0:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d6:	4a4a      	ldr	r2, [pc, #296]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e0:	f7ff fac8 	bl	8000f74 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e8:	f7ff fac4 	bl	8000f74 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1d4      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019fa:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ef      	beq.n	80019e8 <HAL_RCC_OscConfig+0x3ec>
 8001a08:	e01b      	b.n	8001a42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a10:	4a3b      	ldr	r2, [pc, #236]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7ff faab 	bl	8000f74 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a22:	f7ff faa7 	bl	8000f74 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e1b7      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ef      	bne.n	8001a22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80a6 	beq.w	8001b9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a54:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10d      	bne.n	8001a7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d118      	bne.n	8001aba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a94:	f7ff fa6e 	bl	8000f74 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9c:	f7ff fa6a 	bl	8000f74 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e17a      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4d8>
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad2:	e029      	b.n	8001b28 <HAL_RCC_OscConfig+0x52c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d115      	bne.n	8001b08 <HAL_RCC_OscConfig+0x50c>
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	4a03      	ldr	r2, [pc, #12]	; (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afc:	e014      	b.n	8001b28 <HAL_RCC_OscConfig+0x52c>
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40007000 	.word	0x40007000
 8001b08:	4b9c      	ldr	r3, [pc, #624]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	4a9b      	ldr	r2, [pc, #620]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b18:	4b98      	ldr	r3, [pc, #608]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a97      	ldr	r2, [pc, #604]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d016      	beq.n	8001b5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff fa20 	bl	8000f74 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff fa1c 	bl	8000f74 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e12a      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4e:	4b8b      	ldr	r3, [pc, #556]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ed      	beq.n	8001b38 <HAL_RCC_OscConfig+0x53c>
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fa09 	bl	8000f74 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7ff fa05 	bl	8000f74 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e113      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b7c:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ed      	bne.n	8001b66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8a:	7ffb      	ldrb	r3, [r7, #31]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b90:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	4a79      	ldr	r2, [pc, #484]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80fe 	beq.w	8001da2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	f040 80d0 	bne.w	8001d50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bb0:	4b72      	ldr	r3, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d130      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d127      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d11f      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bf0:	2a07      	cmp	r2, #7
 8001bf2:	bf14      	ite	ne
 8001bf4:	2201      	movne	r2, #1
 8001bf6:	2200      	moveq	r2, #0
 8001bf8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d113      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d109      	bne.n	8001c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d06e      	beq.n	8001d04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	d069      	beq.n	8001d00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0ad      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a4b      	ldr	r2, [pc, #300]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c54:	f7ff f98e 	bl	8000f74 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f98a 	bl	8000f74 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e09a      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6e:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7a:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	4b40      	ldr	r3, [pc, #256]	; (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c8a:	3a01      	subs	r2, #1
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c94:	0212      	lsls	r2, r2, #8
 8001c96:	4311      	orrs	r1, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c9c:	0852      	lsrs	r2, r2, #1
 8001c9e:	3a01      	subs	r2, #1
 8001ca0:	0552      	lsls	r2, r2, #21
 8001ca2:	4311      	orrs	r1, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ca8:	0852      	lsrs	r2, r2, #1
 8001caa:	3a01      	subs	r2, #1
 8001cac:	0652      	lsls	r2, r2, #25
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cb4:	0912      	lsrs	r2, r2, #4
 8001cb6:	0452      	lsls	r2, r2, #17
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	4930      	ldr	r1, [pc, #192]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a2d      	ldr	r2, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a2a      	ldr	r2, [pc, #168]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cd8:	f7ff f94c 	bl	8000f74 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f948 	bl	8000f74 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e058      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cfe:	e050      	b.n	8001da2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e04f      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d148      	bne.n	8001da2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d28:	f7ff f924 	bl	8000f74 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff f920 	bl	8000f74 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e030      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x734>
 8001d4e:	e028      	b.n	8001da2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2b0c      	cmp	r3, #12
 8001d54:	d023      	beq.n	8001d9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_RCC_OscConfig+0x780>)
 8001d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7ff f907 	bl	8000f74 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d68:	e00c      	b.n	8001d84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff f903 	bl	8000f74 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d905      	bls.n	8001d84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e013      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_RCC_OscConfig+0x7b0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1ec      	bne.n	8001d6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_OscConfig+0x7b0>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	4905      	ldr	r1, [pc, #20]	; (8001dac <HAL_RCC_OscConfig+0x7b0>)
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_RCC_OscConfig+0x7b4>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60cb      	str	r3, [r1, #12]
 8001d9c:	e001      	b.n	8001da2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	feeefffc 	.word	0xfeeefffc

08001db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0e7      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d910      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4970      	ldr	r1, [pc, #448]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0cf      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d010      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d908      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4960      	ldr	r1, [pc, #384]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d04c      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	4b5a      	ldr	r3, [pc, #360]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d121      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0a6      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e52:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d115      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e09a      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6a:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e08e      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e086      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f023 0203 	bic.w	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4943      	ldr	r1, [pc, #268]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e9c:	f7ff f86a 	bl	8000f74 <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff f866 	bl	8000f74 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e06e      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 020c 	and.w	r2, r3, #12
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d1eb      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d208      	bcs.n	8001efa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	492b      	ldr	r1, [pc, #172]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d210      	bcs.n	8001f2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 0207 	bic.w	r2, r3, #7
 8001f10:	4923      	ldr	r1, [pc, #140]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e036      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4918      	ldr	r1, [pc, #96]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4910      	ldr	r1, [pc, #64]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f68:	f000 f824 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	490b      	ldr	r1, [pc, #44]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f4>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1f8>)
 8001f86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1fc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe ffa1 	bl	8000ed4 <HAL_InitTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f96:	7afb      	ldrb	r3, [r7, #11]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	080061c0 	.word	0x080061c0
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d121      	bne.n	8002026 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d11e      	bne.n	8002026 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fe8:	4b34      	ldr	r3, [pc, #208]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ff4:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	e005      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002010:	4a2b      	ldr	r2, [pc, #172]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002018:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10d      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002024:	e00a      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b04      	cmp	r3, #4
 800202a:	d102      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	e004      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b08      	cmp	r3, #8
 8002036:	d101      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800203a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d134      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d003      	beq.n	800205a <HAL_RCC_GetSysClockFreq+0xa6>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d003      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0xac>
 8002058:	e005      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800205c:	617b      	str	r3, [r7, #20]
      break;
 800205e:	e005      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002062:	617b      	str	r3, [r7, #20]
      break;
 8002064:	e002      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	617b      	str	r3, [r7, #20]
      break;
 800206a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	3301      	adds	r3, #1
 8002078:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	fb03 f202 	mul.w	r2, r3, r2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	0e5b      	lsrs	r3, r3, #25
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	3301      	adds	r3, #1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020ac:	69bb      	ldr	r3, [r7, #24]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	080061d8 	.word	0x080061d8
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	007a1200 	.word	0x007a1200

080020cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000000 	.word	0x20000000

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020e8:	f7ff fff0 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4904      	ldr	r1, [pc, #16]	; (800210c <HAL_RCC_GetPCLK1Freq+0x28>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	080061d0 	.word	0x080061d0

08002110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002114:	f7ff ffda 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0adb      	lsrs	r3, r3, #11
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	4904      	ldr	r1, [pc, #16]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	080061d0 	.word	0x080061d0

0800213c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002154:	f7ff f9ee 	bl	8001534 <HAL_PWREx_GetVoltageRange>
 8002158:	6178      	str	r0, [r7, #20]
 800215a:	e014      	b.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002166:	6593      	str	r3, [r2, #88]	; 0x58
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002174:	f7ff f9de 	bl	8001534 <HAL_PWREx_GetVoltageRange>
 8002178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002184:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800218c:	d10b      	bne.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d919      	bls.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2ba0      	cmp	r3, #160	; 0xa0
 8002198:	d902      	bls.n	80021a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800219a:	2302      	movs	r3, #2
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e013      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021a0:	2301      	movs	r3, #1
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e010      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b80      	cmp	r3, #128	; 0x80
 80021aa:	d902      	bls.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021ac:	2303      	movs	r3, #3
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e00a      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b80      	cmp	r3, #128	; 0x80
 80021b6:	d102      	bne.n	80021be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021b8:	2302      	movs	r3, #2
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e004      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b70      	cmp	r3, #112	; 0x70
 80021c2:	d101      	bne.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021c4:	2301      	movs	r3, #1
 80021c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 0207 	bic.w	r2, r3, #7
 80021d0:	4909      	ldr	r1, [pc, #36]	; (80021f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d001      	beq.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40022000 	.word	0x40022000

080021fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002204:	2300      	movs	r3, #0
 8002206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002208:	2300      	movs	r3, #0
 800220a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002214:	2b00      	cmp	r3, #0
 8002216:	d041      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800221c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002220:	d02a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002222:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002226:	d824      	bhi.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800222c:	d008      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800222e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002232:	d81e      	bhi.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800223c:	d010      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800223e:	e018      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002240:	4b86      	ldr	r3, [pc, #536]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a85      	ldr	r2, [pc, #532]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800224c:	e015      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fabb 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 800225a:	4603      	mov	r3, r0
 800225c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800225e:	e00c      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3320      	adds	r3, #32
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fba6 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002270:	e003      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	74fb      	strb	r3, [r7, #19]
      break;
 8002276:	e000      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002280:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800228e:	4973      	ldr	r1, [pc, #460]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002296:	e001      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d041      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022b0:	d02a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022b6:	d824      	bhi.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022bc:	d008      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022c2:	d81e      	bhi.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d010      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022ce:	e018      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022d0:	4b62      	ldr	r3, [pc, #392]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a61      	ldr	r2, [pc, #388]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022dc:	e015      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fa73 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 80022ea:	4603      	mov	r3, r0
 80022ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ee:	e00c      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3320      	adds	r3, #32
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fb5e 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002300:	e003      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	74fb      	strb	r3, [r7, #19]
      break;
 8002306:	e000      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10b      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002310:	4b52      	ldr	r3, [pc, #328]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800231e:	494f      	ldr	r1, [pc, #316]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002326:	e001      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a0 	beq.w	800247a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002354:	4b41      	ldr	r3, [pc, #260]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	4a40      	ldr	r2, [pc, #256]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235e:	6593      	str	r3, [r2, #88]	; 0x58
 8002360:	4b3e      	ldr	r3, [pc, #248]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236c:	2301      	movs	r3, #1
 800236e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3a      	ldr	r2, [pc, #232]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800237c:	f7fe fdfa 	bl	8000f74 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002382:	e009      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002384:	f7fe fdf6 	bl	8000f74 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d902      	bls.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	74fb      	strb	r3, [r7, #19]
        break;
 8002396:	e005      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002398:	4b31      	ldr	r3, [pc, #196]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ef      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d15c      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023aa:	4b2c      	ldr	r3, [pc, #176]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01f      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d019      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	4a20      	ldr	r2, [pc, #128]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	4a1c      	ldr	r2, [pc, #112]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023f4:	4a19      	ldr	r2, [pc, #100]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fdb5 	bl	8000f74 <HAL_GetTick>
 800240a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240c:	e00b      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7fe fdb1 	bl	8000f74 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
            break;
 8002424:	e006      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ec      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244a:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002452:	e009      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	74bb      	strb	r3, [r7, #18]
 8002458:	e006      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002468:	7c7b      	ldrb	r3, [r7, #17]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246e:	4b9e      	ldr	r3, [pc, #632]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	4a9d      	ldr	r2, [pc, #628]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002478:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002486:	4b98      	ldr	r3, [pc, #608]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f023 0203 	bic.w	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	4994      	ldr	r1, [pc, #592]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024a8:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 020c 	bic.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	498c      	ldr	r1, [pc, #560]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ca:	4b87      	ldr	r3, [pc, #540]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	4983      	ldr	r1, [pc, #524]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024ec:	4b7e      	ldr	r3, [pc, #504]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	497b      	ldr	r1, [pc, #492]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800250e:	4b76      	ldr	r3, [pc, #472]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251c:	4972      	ldr	r1, [pc, #456]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002530:	4b6d      	ldr	r3, [pc, #436]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	496a      	ldr	r1, [pc, #424]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002552:	4b65      	ldr	r3, [pc, #404]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	4961      	ldr	r1, [pc, #388]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002574:	4b5c      	ldr	r3, [pc, #368]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002582:	4959      	ldr	r1, [pc, #356]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002596:	4b54      	ldr	r3, [pc, #336]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a4:	4950      	ldr	r1, [pc, #320]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	4948      	ldr	r1, [pc, #288]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025da:	4b43      	ldr	r3, [pc, #268]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	493f      	ldr	r1, [pc, #252]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d028      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025fc:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800260a:	4937      	ldr	r1, [pc, #220]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261a:	d106      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261c:	4b32      	ldr	r3, [pc, #200]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002626:	60d3      	str	r3, [r2, #12]
 8002628:	e011      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800262e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002632:	d10c      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	2101      	movs	r1, #1
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f8c8 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800264a:	7cfb      	ldrb	r3, [r7, #19]
 800264c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d028      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	491f      	ldr	r1, [pc, #124]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002678:	d106      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002684:	60d3      	str	r3, [r2, #12]
 8002686:	e011      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002690:	d10c      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3304      	adds	r3, #4
 8002696:	2101      	movs	r1, #1
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f899 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 800269e:	4603      	mov	r3, r0
 80026a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d02b      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c6:	4908      	ldr	r1, [pc, #32]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d6:	d109      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a02      	ldr	r2, [pc, #8]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e2:	60d3      	str	r3, [r2, #12]
 80026e4:	e014      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f867 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d02f      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800272a:	4928      	ldr	r1, [pc, #160]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800273a:	d10d      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	2102      	movs	r1, #2
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f844 	bl	80027d0 <RCCEx_PLLSAI1_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d014      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	74bb      	strb	r3, [r7, #18]
 8002756:	e011      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800275c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002760:	d10c      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3320      	adds	r3, #32
 8002766:	2102      	movs	r1, #2
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f925 	bl	80029b8 <RCCEx_PLLSAI2_Config>
 800276e:	4603      	mov	r3, r0
 8002770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002796:	490d      	ldr	r1, [pc, #52]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ba:	4904      	ldr	r1, [pc, #16]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000

080027d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027de:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d018      	beq.n	800281c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027ea:	4b72      	ldr	r3, [pc, #456]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0203 	and.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d10d      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
       ||
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002802:	4b6c      	ldr	r3, [pc, #432]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
       ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d047      	beq.n	80028a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	e044      	b.n	80028a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d018      	beq.n	8002856 <RCCEx_PLLSAI1_Config+0x86>
 8002824:	2b03      	cmp	r3, #3
 8002826:	d825      	bhi.n	8002874 <RCCEx_PLLSAI1_Config+0xa4>
 8002828:	2b01      	cmp	r3, #1
 800282a:	d002      	beq.n	8002832 <RCCEx_PLLSAI1_Config+0x62>
 800282c:	2b02      	cmp	r3, #2
 800282e:	d009      	beq.n	8002844 <RCCEx_PLLSAI1_Config+0x74>
 8002830:	e020      	b.n	8002874 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d11d      	bne.n	800287a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002842:	e01a      	b.n	800287a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002844:	4b5b      	ldr	r3, [pc, #364]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d116      	bne.n	800287e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002854:	e013      	b.n	800287e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002856:	4b57      	ldr	r3, [pc, #348]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002862:	4b54      	ldr	r3, [pc, #336]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002872:	e006      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
      break;
 8002878:	e004      	b.n	8002884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800287a:	bf00      	nop
 800287c:	e002      	b.n	8002884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002882:	bf00      	nop
    }

    if(status == HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10d      	bne.n	80028a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800288a:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	430b      	orrs	r3, r1
 80028a0:	4944      	ldr	r1, [pc, #272]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d17d      	bne.n	80029a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028ac:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a40      	ldr	r2, [pc, #256]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7fe fb5c 	bl	8000f74 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028be:	e009      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c0:	f7fe fb58 	bl	8000f74 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d902      	bls.n	80028d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	73fb      	strb	r3, [r7, #15]
        break;
 80028d2:	e005      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028d4:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ef      	bne.n	80028c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d160      	bne.n	80029a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ec:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6892      	ldr	r2, [r2, #8]
 80028fc:	0211      	lsls	r1, r2, #8
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	0912      	lsrs	r2, r2, #4
 8002904:	0452      	lsls	r2, r2, #17
 8002906:	430a      	orrs	r2, r1
 8002908:	492a      	ldr	r1, [pc, #168]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	610b      	str	r3, [r1, #16]
 800290e:	e027      	b.n	8002960 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d112      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002916:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800291e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6892      	ldr	r2, [r2, #8]
 8002926:	0211      	lsls	r1, r2, #8
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6912      	ldr	r2, [r2, #16]
 800292c:	0852      	lsrs	r2, r2, #1
 800292e:	3a01      	subs	r2, #1
 8002930:	0552      	lsls	r2, r2, #21
 8002932:	430a      	orrs	r2, r1
 8002934:	491f      	ldr	r1, [pc, #124]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	610b      	str	r3, [r1, #16]
 800293a:	e011      	b.n	8002960 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002944:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6892      	ldr	r2, [r2, #8]
 800294c:	0211      	lsls	r1, r2, #8
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6952      	ldr	r2, [r2, #20]
 8002952:	0852      	lsrs	r2, r2, #1
 8002954:	3a01      	subs	r2, #1
 8002956:	0652      	lsls	r2, r2, #25
 8002958:	430a      	orrs	r2, r1
 800295a:	4916      	ldr	r1, [pc, #88]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800296a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7fe fb02 	bl	8000f74 <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002972:	e009      	b.n	8002988 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002974:	f7fe fafe 	bl	8000f74 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d902      	bls.n	8002988 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	73fb      	strb	r3, [r7, #15]
          break;
 8002986:	e005      	b.n	8002994 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ef      	beq.n	8002974 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	4904      	ldr	r1, [pc, #16]	; (80029b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000

080029b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029c6:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d018      	beq.n	8002a04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029d2:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0203 	and.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d10d      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
       ||
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029ea:	4b61      	ldr	r3, [pc, #388]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
       ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d047      	beq.n	8002a8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	e044      	b.n	8002a8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d018      	beq.n	8002a3e <RCCEx_PLLSAI2_Config+0x86>
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d825      	bhi.n	8002a5c <RCCEx_PLLSAI2_Config+0xa4>
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d002      	beq.n	8002a1a <RCCEx_PLLSAI2_Config+0x62>
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d009      	beq.n	8002a2c <RCCEx_PLLSAI2_Config+0x74>
 8002a18:	e020      	b.n	8002a5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a1a:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11d      	bne.n	8002a62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2a:	e01a      	b.n	8002a62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a2c:	4b50      	ldr	r3, [pc, #320]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d116      	bne.n	8002a66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3c:	e013      	b.n	8002a66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a3e:	4b4c      	ldr	r3, [pc, #304]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a4a:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a5a:	e006      	b.n	8002a6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a60:	e004      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a62:	bf00      	nop
 8002a64:	e002      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10d      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a72:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	430b      	orrs	r3, r1
 8002a88:	4939      	ldr	r1, [pc, #228]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d167      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a94:	4b36      	ldr	r3, [pc, #216]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a35      	ldr	r2, [pc, #212]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fa68 	bl	8000f74 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aa6:	e009      	b.n	8002abc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aa8:	f7fe fa64 	bl	8000f74 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8002aba:	e005      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002abc:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ef      	bne.n	8002aa8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d14a      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d111      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ad4:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6892      	ldr	r2, [r2, #8]
 8002ae4:	0211      	lsls	r1, r2, #8
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	0912      	lsrs	r2, r2, #4
 8002aec:	0452      	lsls	r2, r2, #17
 8002aee:	430a      	orrs	r2, r1
 8002af0:	491f      	ldr	r1, [pc, #124]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	614b      	str	r3, [r1, #20]
 8002af6:	e011      	b.n	8002b1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002af8:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6892      	ldr	r2, [r2, #8]
 8002b08:	0211      	lsls	r1, r2, #8
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6912      	ldr	r2, [r2, #16]
 8002b0e:	0852      	lsrs	r2, r2, #1
 8002b10:	3a01      	subs	r2, #1
 8002b12:	0652      	lsls	r2, r2, #25
 8002b14:	430a      	orrs	r2, r1
 8002b16:	4916      	ldr	r1, [pc, #88]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe fa24 	bl	8000f74 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b2e:	e009      	b.n	8002b44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b30:	f7fe fa20 	bl	8000f74 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	73fb      	strb	r3, [r7, #15]
          break;
 8002b42:	e005      	b.n	8002b50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ef      	beq.n	8002b30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	4904      	ldr	r1, [pc, #16]	; (8002b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e049      	b.n	8002c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fd ff8e 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f000 fe5c 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d001      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e04f      	b.n	8002cdc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a23      	ldr	r2, [pc, #140]	; (8002ce8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01d      	beq.n	8002c9a <HAL_TIM_Base_Start_IT+0x76>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c66:	d018      	beq.n	8002c9a <HAL_TIM_Base_Start_IT+0x76>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <HAL_TIM_Base_Start_IT+0xc8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <HAL_TIM_Base_Start_IT+0x76>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00e      	beq.n	8002c9a <HAL_TIM_Base_Start_IT+0x76>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d009      	beq.n	8002c9a <HAL_TIM_Base_Start_IT+0x76>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d004      	beq.n	8002c9a <HAL_TIM_Base_Start_IT+0x76>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <HAL_TIM_Base_Start_IT+0xd8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d115      	bne.n	8002cc6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d015      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0xb4>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb2:	d011      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	e008      	b.n	8002cd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e000      	b.n	8002cda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	40000800 	.word	0x40000800
 8002cf4:	40000c00 	.word	0x40000c00
 8002cf8:	40013400 	.word	0x40013400
 8002cfc:	40014000 	.word	0x40014000
 8002d00:	00010007 	.word	0x00010007

08002d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e049      	b.n	8002daa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f841 	bl	8002db2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 fd94 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_TIM_PWM_Start_IT+0x28>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	e03c      	b.n	8002e6a <HAL_TIM_PWM_Start_IT+0xa2>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d109      	bne.n	8002e0a <HAL_TIM_PWM_Start_IT+0x42>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	bf14      	ite	ne
 8002e02:	2301      	movne	r3, #1
 8002e04:	2300      	moveq	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	e02f      	b.n	8002e6a <HAL_TIM_PWM_Start_IT+0xa2>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d109      	bne.n	8002e24 <HAL_TIM_PWM_Start_IT+0x5c>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e022      	b.n	8002e6a <HAL_TIM_PWM_Start_IT+0xa2>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d109      	bne.n	8002e3e <HAL_TIM_PWM_Start_IT+0x76>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	bf14      	ite	ne
 8002e36:	2301      	movne	r3, #1
 8002e38:	2300      	moveq	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	e015      	b.n	8002e6a <HAL_TIM_PWM_Start_IT+0xa2>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d109      	bne.n	8002e58 <HAL_TIM_PWM_Start_IT+0x90>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e008      	b.n	8002e6a <HAL_TIM_PWM_Start_IT+0xa2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e0e7      	b.n	8003042 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d104      	bne.n	8002e82 <HAL_TIM_PWM_Start_IT+0xba>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e80:	e023      	b.n	8002eca <HAL_TIM_PWM_Start_IT+0x102>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d104      	bne.n	8002e92 <HAL_TIM_PWM_Start_IT+0xca>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e90:	e01b      	b.n	8002eca <HAL_TIM_PWM_Start_IT+0x102>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d104      	bne.n	8002ea2 <HAL_TIM_PWM_Start_IT+0xda>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea0:	e013      	b.n	8002eca <HAL_TIM_PWM_Start_IT+0x102>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d104      	bne.n	8002eb2 <HAL_TIM_PWM_Start_IT+0xea>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eb0:	e00b      	b.n	8002eca <HAL_TIM_PWM_Start_IT+0x102>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d104      	bne.n	8002ec2 <HAL_TIM_PWM_Start_IT+0xfa>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec0:	e003      	b.n	8002eca <HAL_TIM_PWM_Start_IT+0x102>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d841      	bhi.n	8002f54 <HAL_TIM_PWM_Start_IT+0x18c>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <HAL_TIM_PWM_Start_IT+0x110>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002f0d 	.word	0x08002f0d
 8002edc:	08002f55 	.word	0x08002f55
 8002ee0:	08002f55 	.word	0x08002f55
 8002ee4:	08002f55 	.word	0x08002f55
 8002ee8:	08002f1f 	.word	0x08002f1f
 8002eec:	08002f55 	.word	0x08002f55
 8002ef0:	08002f55 	.word	0x08002f55
 8002ef4:	08002f55 	.word	0x08002f55
 8002ef8:	08002f31 	.word	0x08002f31
 8002efc:	08002f55 	.word	0x08002f55
 8002f00:	08002f55 	.word	0x08002f55
 8002f04:	08002f55 	.word	0x08002f55
 8002f08:	08002f43 	.word	0x08002f43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0202 	orr.w	r2, r2, #2
 8002f1a:	60da      	str	r2, [r3, #12]
      break;
 8002f1c:	e01d      	b.n	8002f5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0204 	orr.w	r2, r2, #4
 8002f2c:	60da      	str	r2, [r3, #12]
      break;
 8002f2e:	e014      	b.n	8002f5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0208 	orr.w	r2, r2, #8
 8002f3e:	60da      	str	r2, [r3, #12]
      break;
 8002f40:	e00b      	b.n	8002f5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0210 	orr.w	r2, r2, #16
 8002f50:	60da      	str	r2, [r3, #12]
      break;
 8002f52:	e002      	b.n	8002f5a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
      break;
 8002f58:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d16f      	bne.n	8003040 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2201      	movs	r2, #1
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f001 f88b 	bl	8004084 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a36      	ldr	r2, [pc, #216]	; (800304c <HAL_TIM_PWM_Start_IT+0x284>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a34      	ldr	r2, [pc, #208]	; (8003050 <HAL_TIM_PWM_Start_IT+0x288>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00e      	beq.n	8002fa0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a33      	ldr	r2, [pc, #204]	; (8003054 <HAL_TIM_PWM_Start_IT+0x28c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a31      	ldr	r2, [pc, #196]	; (8003058 <HAL_TIM_PWM_Start_IT+0x290>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a30      	ldr	r2, [pc, #192]	; (800305c <HAL_TIM_PWM_Start_IT+0x294>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIM_PWM_Start_IT+0x1dc>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_TIM_PWM_Start_IT+0x1de>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a23      	ldr	r2, [pc, #140]	; (800304c <HAL_TIM_PWM_Start_IT+0x284>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d01d      	beq.n	8003000 <HAL_TIM_PWM_Start_IT+0x238>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fcc:	d018      	beq.n	8003000 <HAL_TIM_PWM_Start_IT+0x238>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a23      	ldr	r2, [pc, #140]	; (8003060 <HAL_TIM_PWM_Start_IT+0x298>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d013      	beq.n	8003000 <HAL_TIM_PWM_Start_IT+0x238>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a21      	ldr	r2, [pc, #132]	; (8003064 <HAL_TIM_PWM_Start_IT+0x29c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00e      	beq.n	8003000 <HAL_TIM_PWM_Start_IT+0x238>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a20      	ldr	r2, [pc, #128]	; (8003068 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_TIM_PWM_Start_IT+0x238>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_TIM_PWM_Start_IT+0x288>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_TIM_PWM_Start_IT+0x238>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a16      	ldr	r2, [pc, #88]	; (8003054 <HAL_TIM_PWM_Start_IT+0x28c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d115      	bne.n	800302c <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_TIM_PWM_Start_IT+0x2a4>)
 8003008:	4013      	ands	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b06      	cmp	r3, #6
 8003010:	d015      	beq.n	800303e <HAL_TIM_PWM_Start_IT+0x276>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003018:	d011      	beq.n	800303e <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302a:	e008      	b.n	800303e <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e000      	b.n	8003040 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800303e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40012c00 	.word	0x40012c00
 8003050:	40013400 	.word	0x40013400
 8003054:	40014000 	.word	0x40014000
 8003058:	40014400 	.word	0x40014400
 800305c:	40014800 	.word	0x40014800
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800
 8003068:	40000c00 	.word	0x40000c00
 800306c:	00010007 	.word	0x00010007

08003070 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b0c      	cmp	r3, #12
 8003082:	d841      	bhi.n	8003108 <HAL_TIM_PWM_Stop_IT+0x98>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	080030c1 	.word	0x080030c1
 8003090:	08003109 	.word	0x08003109
 8003094:	08003109 	.word	0x08003109
 8003098:	08003109 	.word	0x08003109
 800309c:	080030d3 	.word	0x080030d3
 80030a0:	08003109 	.word	0x08003109
 80030a4:	08003109 	.word	0x08003109
 80030a8:	08003109 	.word	0x08003109
 80030ac:	080030e5 	.word	0x080030e5
 80030b0:	08003109 	.word	0x08003109
 80030b4:	08003109 	.word	0x08003109
 80030b8:	08003109 	.word	0x08003109
 80030bc:	080030f7 	.word	0x080030f7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0202 	bic.w	r2, r2, #2
 80030ce:	60da      	str	r2, [r3, #12]
      break;
 80030d0:	e01d      	b.n	800310e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0204 	bic.w	r2, r2, #4
 80030e0:	60da      	str	r2, [r3, #12]
      break;
 80030e2:	e014      	b.n	800310e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0208 	bic.w	r2, r2, #8
 80030f2:	60da      	str	r2, [r3, #12]
      break;
 80030f4:	e00b      	b.n	800310e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0210 	bic.w	r2, r2, #16
 8003104:	60da      	str	r2, [r3, #12]
      break;
 8003106:	e002      	b.n	800310e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      break;
 800310c:	bf00      	nop
  }

  if (status == HAL_OK)
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f040 8081 	bne.w	8003218 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2200      	movs	r2, #0
 800311c:	6839      	ldr	r1, [r7, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 ffb0 	bl	8004084 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a3e      	ldr	r2, [pc, #248]	; (8003224 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_TIM_PWM_Stop_IT+0xe6>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a3d      	ldr	r2, [pc, #244]	; (8003228 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00e      	beq.n	8003156 <HAL_TIM_PWM_Stop_IT+0xe6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a3b      	ldr	r2, [pc, #236]	; (800322c <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_TIM_PWM_Stop_IT+0xe6>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a3a      	ldr	r2, [pc, #232]	; (8003230 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_TIM_PWM_Stop_IT+0xe6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a38      	ldr	r2, [pc, #224]	; (8003234 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_TIM_PWM_Stop_IT+0xea>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_TIM_PWM_Stop_IT+0xec>
 800315a:	2300      	movs	r3, #0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d017      	beq.n	8003190 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a1a      	ldr	r2, [r3, #32]
 8003166:	f241 1311 	movw	r3, #4369	; 0x1111
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10f      	bne.n	8003190 <HAL_TIM_PWM_Stop_IT+0x120>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6a1a      	ldr	r2, [r3, #32]
 8003176:	f240 4344 	movw	r3, #1092	; 0x444
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_TIM_PWM_Stop_IT+0x120>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	f241 1311 	movw	r3, #4369	; 0x1111
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10f      	bne.n	80031c0 <HAL_TIM_PWM_Stop_IT+0x150>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	f240 4344 	movw	r3, #1092	; 0x444
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_PWM_Stop_IT+0x150>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d104      	bne.n	80031d0 <HAL_TIM_PWM_Stop_IT+0x160>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ce:	e023      	b.n	8003218 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d104      	bne.n	80031e0 <HAL_TIM_PWM_Stop_IT+0x170>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031de:	e01b      	b.n	8003218 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d104      	bne.n	80031f0 <HAL_TIM_PWM_Stop_IT+0x180>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ee:	e013      	b.n	8003218 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d104      	bne.n	8003200 <HAL_TIM_PWM_Stop_IT+0x190>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031fe:	e00b      	b.n	8003218 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b10      	cmp	r3, #16
 8003204:	d104      	bne.n	8003210 <HAL_TIM_PWM_Stop_IT+0x1a0>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320e:	e003      	b.n	8003218 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40013400 	.word	0x40013400
 800322c:	40014000 	.word	0x40014000
 8003230:	40014400 	.word	0x40014400
 8003234:	40014800 	.word	0x40014800

08003238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d122      	bne.n	8003294 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b02      	cmp	r3, #2
 800325a:	d11b      	bne.n	8003294 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0202 	mvn.w	r2, #2
 8003264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fae3 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fad5 	bl	8003832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7fd fa51 	bl	8000730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d122      	bne.n	80032e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d11b      	bne.n	80032e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0204 	mvn.w	r2, #4
 80032b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2202      	movs	r2, #2
 80032be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fab9 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 faab 	bl	8003832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fd fa27 	bl	8000730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d122      	bne.n	800333c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b08      	cmp	r3, #8
 8003302:	d11b      	bne.n	800333c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0208 	mvn.w	r2, #8
 800330c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2204      	movs	r2, #4
 8003312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fa8f 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fa81 	bl	8003832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fd f9fd 	bl	8000730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b10      	cmp	r3, #16
 8003348:	d122      	bne.n	8003390 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b10      	cmp	r3, #16
 8003356:	d11b      	bne.n	8003390 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0210 	mvn.w	r2, #16
 8003360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2208      	movs	r2, #8
 8003366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fa65 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 800337c:	e005      	b.n	800338a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fa57 	bl	8003832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7fd f9d3 	bl	8000730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d10e      	bne.n	80033bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d107      	bne.n	80033bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0201 	mvn.w	r2, #1
 80033b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fd f9ac 	bl	8000714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c6:	2b80      	cmp	r3, #128	; 0x80
 80033c8:	d10e      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b80      	cmp	r3, #128	; 0x80
 80033d6:	d107      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 ff06 	bl	80041f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f6:	d10e      	bne.n	8003416 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b80      	cmp	r3, #128	; 0x80
 8003404:	d107      	bne.n	8003416 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800340e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fef9 	bl	8004208 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b40      	cmp	r3, #64	; 0x40
 8003422:	d10e      	bne.n	8003442 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d107      	bne.n	8003442 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800343a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fa0c 	bl	800385a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b20      	cmp	r3, #32
 800344e:	d10e      	bne.n	800346e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b20      	cmp	r3, #32
 800345c:	d107      	bne.n	800346e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f06f 0220 	mvn.w	r2, #32
 8003466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 feb9 	bl	80041e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003492:	2302      	movs	r3, #2
 8003494:	e0ff      	b.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b14      	cmp	r3, #20
 80034a2:	f200 80f0 	bhi.w	8003686 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034a6:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	08003501 	.word	0x08003501
 80034b0:	08003687 	.word	0x08003687
 80034b4:	08003687 	.word	0x08003687
 80034b8:	08003687 	.word	0x08003687
 80034bc:	08003541 	.word	0x08003541
 80034c0:	08003687 	.word	0x08003687
 80034c4:	08003687 	.word	0x08003687
 80034c8:	08003687 	.word	0x08003687
 80034cc:	08003583 	.word	0x08003583
 80034d0:	08003687 	.word	0x08003687
 80034d4:	08003687 	.word	0x08003687
 80034d8:	08003687 	.word	0x08003687
 80034dc:	080035c3 	.word	0x080035c3
 80034e0:	08003687 	.word	0x08003687
 80034e4:	08003687 	.word	0x08003687
 80034e8:	08003687 	.word	0x08003687
 80034ec:	08003605 	.word	0x08003605
 80034f0:	08003687 	.word	0x08003687
 80034f4:	08003687 	.word	0x08003687
 80034f8:	08003687 	.word	0x08003687
 80034fc:	08003645 	.word	0x08003645
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fa4c 	bl	80039a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0208 	orr.w	r2, r2, #8
 800351a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0204 	bic.w	r2, r2, #4
 800352a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6999      	ldr	r1, [r3, #24]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	619a      	str	r2, [r3, #24]
      break;
 800353e:	e0a5      	b.n	800368c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fabc 	bl	8003ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6999      	ldr	r1, [r3, #24]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	021a      	lsls	r2, r3, #8
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	619a      	str	r2, [r3, #24]
      break;
 8003580:	e084      	b.n	800368c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fb25 	bl	8003bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0208 	orr.w	r2, r2, #8
 800359c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0204 	bic.w	r2, r2, #4
 80035ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69d9      	ldr	r1, [r3, #28]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	61da      	str	r2, [r3, #28]
      break;
 80035c0:	e064      	b.n	800368c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fb8d 	bl	8003ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69d9      	ldr	r1, [r3, #28]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	021a      	lsls	r2, r3, #8
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	61da      	str	r2, [r3, #28]
      break;
 8003602:	e043      	b.n	800368c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fbd6 	bl	8003dbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0208 	orr.w	r2, r2, #8
 800361e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003642:	e023      	b.n	800368c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fc1a 	bl	8003e84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800365e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	021a      	lsls	r2, r3, #8
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003684:	e002      	b.n	800368c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
      break;
 800368a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003694:	7dfb      	ldrb	r3, [r7, #23]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop

080036a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_TIM_ConfigClockSource+0x1c>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e0b6      	b.n	800382a <HAL_TIM_ConfigClockSource+0x18a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f8:	d03e      	beq.n	8003778 <HAL_TIM_ConfigClockSource+0xd8>
 80036fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fe:	f200 8087 	bhi.w	8003810 <HAL_TIM_ConfigClockSource+0x170>
 8003702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003706:	f000 8086 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x176>
 800370a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370e:	d87f      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x170>
 8003710:	2b70      	cmp	r3, #112	; 0x70
 8003712:	d01a      	beq.n	800374a <HAL_TIM_ConfigClockSource+0xaa>
 8003714:	2b70      	cmp	r3, #112	; 0x70
 8003716:	d87b      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x170>
 8003718:	2b60      	cmp	r3, #96	; 0x60
 800371a:	d050      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x11e>
 800371c:	2b60      	cmp	r3, #96	; 0x60
 800371e:	d877      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x170>
 8003720:	2b50      	cmp	r3, #80	; 0x50
 8003722:	d03c      	beq.n	800379e <HAL_TIM_ConfigClockSource+0xfe>
 8003724:	2b50      	cmp	r3, #80	; 0x50
 8003726:	d873      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x170>
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d058      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x13e>
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d86f      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x170>
 8003730:	2b30      	cmp	r3, #48	; 0x30
 8003732:	d064      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15e>
 8003734:	2b30      	cmp	r3, #48	; 0x30
 8003736:	d86b      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x170>
 8003738:	2b20      	cmp	r3, #32
 800373a:	d060      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15e>
 800373c:	2b20      	cmp	r3, #32
 800373e:	d867      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x170>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d05c      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15e>
 8003744:	2b10      	cmp	r3, #16
 8003746:	d05a      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15e>
 8003748:	e062      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6899      	ldr	r1, [r3, #8]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f000 fc73 	bl	8004044 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800376c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	609a      	str	r2, [r3, #8]
      break;
 8003776:	e04f      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6899      	ldr	r1, [r3, #8]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f000 fc5c 	bl	8004044 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800379a:	609a      	str	r2, [r3, #8]
      break;
 800379c:	e03c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f000 fbd0 	bl	8003f50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2150      	movs	r1, #80	; 0x50
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fc29 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 80037bc:	e02c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f000 fbef 	bl	8003fae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2160      	movs	r1, #96	; 0x60
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fc19 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 80037dc:	e01c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 fbb0 	bl	8003f50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2140      	movs	r1, #64	; 0x40
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fc09 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 80037fc:	e00c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f000 fc00 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 800380e:	e003      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      break;
 8003814:	e000      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a40      	ldr	r2, [pc, #256]	; (8003984 <TIM_Base_SetConfig+0x114>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d013      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d00f      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3d      	ldr	r2, [pc, #244]	; (8003988 <TIM_Base_SetConfig+0x118>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3c      	ldr	r2, [pc, #240]	; (800398c <TIM_Base_SetConfig+0x11c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3b      	ldr	r2, [pc, #236]	; (8003990 <TIM_Base_SetConfig+0x120>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3a      	ldr	r2, [pc, #232]	; (8003994 <TIM_Base_SetConfig+0x124>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d108      	bne.n	80038c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <TIM_Base_SetConfig+0x114>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01f      	beq.n	800390a <TIM_Base_SetConfig+0x9a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d01b      	beq.n	800390a <TIM_Base_SetConfig+0x9a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2c      	ldr	r2, [pc, #176]	; (8003988 <TIM_Base_SetConfig+0x118>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d017      	beq.n	800390a <TIM_Base_SetConfig+0x9a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2b      	ldr	r2, [pc, #172]	; (800398c <TIM_Base_SetConfig+0x11c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <TIM_Base_SetConfig+0x9a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <TIM_Base_SetConfig+0x120>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00f      	beq.n	800390a <TIM_Base_SetConfig+0x9a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <TIM_Base_SetConfig+0x124>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <TIM_Base_SetConfig+0x9a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a28      	ldr	r2, [pc, #160]	; (8003998 <TIM_Base_SetConfig+0x128>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <TIM_Base_SetConfig+0x9a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <TIM_Base_SetConfig+0x12c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_Base_SetConfig+0x9a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <TIM_Base_SetConfig+0x130>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d108      	bne.n	800391c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a10      	ldr	r2, [pc, #64]	; (8003984 <TIM_Base_SetConfig+0x114>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00f      	beq.n	8003968 <TIM_Base_SetConfig+0xf8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <TIM_Base_SetConfig+0x124>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00b      	beq.n	8003968 <TIM_Base_SetConfig+0xf8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a11      	ldr	r2, [pc, #68]	; (8003998 <TIM_Base_SetConfig+0x128>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d007      	beq.n	8003968 <TIM_Base_SetConfig+0xf8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a10      	ldr	r2, [pc, #64]	; (800399c <TIM_Base_SetConfig+0x12c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_Base_SetConfig+0xf8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0f      	ldr	r2, [pc, #60]	; (80039a0 <TIM_Base_SetConfig+0x130>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d103      	bne.n	8003970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	615a      	str	r2, [r3, #20]
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40013400 	.word	0x40013400
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800

080039a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0201 	bic.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f023 0302 	bic.w	r3, r3, #2
 80039f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a2c      	ldr	r2, [pc, #176]	; (8003ab0 <TIM_OC1_SetConfig+0x10c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00f      	beq.n	8003a24 <TIM_OC1_SetConfig+0x80>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a2b      	ldr	r2, [pc, #172]	; (8003ab4 <TIM_OC1_SetConfig+0x110>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00b      	beq.n	8003a24 <TIM_OC1_SetConfig+0x80>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <TIM_OC1_SetConfig+0x114>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <TIM_OC1_SetConfig+0x80>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a29      	ldr	r2, [pc, #164]	; (8003abc <TIM_OC1_SetConfig+0x118>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_OC1_SetConfig+0x80>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a28      	ldr	r2, [pc, #160]	; (8003ac0 <TIM_OC1_SetConfig+0x11c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10c      	bne.n	8003a3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0308 	bic.w	r3, r3, #8
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <TIM_OC1_SetConfig+0x10c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00f      	beq.n	8003a66 <TIM_OC1_SetConfig+0xc2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <TIM_OC1_SetConfig+0x110>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_OC1_SetConfig+0xc2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a19      	ldr	r2, [pc, #100]	; (8003ab8 <TIM_OC1_SetConfig+0x114>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <TIM_OC1_SetConfig+0xc2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a18      	ldr	r2, [pc, #96]	; (8003abc <TIM_OC1_SetConfig+0x118>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_OC1_SetConfig+0xc2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <TIM_OC1_SetConfig+0x11c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d111      	bne.n	8003a8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	621a      	str	r2, [r3, #32]
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40013400 	.word	0x40013400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0210 	bic.w	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0320 	bic.w	r3, r3, #32
 8003b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a28      	ldr	r2, [pc, #160]	; (8003bc4 <TIM_OC2_SetConfig+0x100>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC2_SetConfig+0x6c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <TIM_OC2_SetConfig+0x104>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10d      	bne.n	8003b4c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <TIM_OC2_SetConfig+0x100>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00f      	beq.n	8003b74 <TIM_OC2_SetConfig+0xb0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <TIM_OC2_SetConfig+0x104>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <TIM_OC2_SetConfig+0xb0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <TIM_OC2_SetConfig+0x108>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <TIM_OC2_SetConfig+0xb0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <TIM_OC2_SetConfig+0x10c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_OC2_SetConfig+0xb0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <TIM_OC2_SetConfig+0x110>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d113      	bne.n	8003b9c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40013400 	.word	0x40013400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800

08003bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <TIM_OC3_SetConfig+0xfc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_OC3_SetConfig+0x6a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <TIM_OC3_SetConfig+0x100>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d10d      	bne.n	8003c5e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <TIM_OC3_SetConfig+0xfc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00f      	beq.n	8003c86 <TIM_OC3_SetConfig+0xae>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1b      	ldr	r2, [pc, #108]	; (8003cd8 <TIM_OC3_SetConfig+0x100>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_OC3_SetConfig+0xae>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <TIM_OC3_SetConfig+0x104>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <TIM_OC3_SetConfig+0xae>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <TIM_OC3_SetConfig+0x108>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_OC3_SetConfig+0xae>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <TIM_OC3_SetConfig+0x10c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d113      	bne.n	8003cae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	621a      	str	r2, [r3, #32]
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40013400 	.word	0x40013400
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800

08003ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	031b      	lsls	r3, r3, #12
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <TIM_OC4_SetConfig+0xc0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00f      	beq.n	8003d6c <TIM_OC4_SetConfig+0x84>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a17      	ldr	r2, [pc, #92]	; (8003dac <TIM_OC4_SetConfig+0xc4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00b      	beq.n	8003d6c <TIM_OC4_SetConfig+0x84>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a16      	ldr	r2, [pc, #88]	; (8003db0 <TIM_OC4_SetConfig+0xc8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d007      	beq.n	8003d6c <TIM_OC4_SetConfig+0x84>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <TIM_OC4_SetConfig+0xcc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_OC4_SetConfig+0x84>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <TIM_OC4_SetConfig+0xd0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d109      	bne.n	8003d80 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	019b      	lsls	r3, r3, #6
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40012c00 	.word	0x40012c00
 8003dac:	40013400 	.word	0x40013400
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40014400 	.word	0x40014400
 8003db8:	40014800 	.word	0x40014800

08003dbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	041b      	lsls	r3, r3, #16
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <TIM_OC5_SetConfig+0xb4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00f      	beq.n	8003e36 <TIM_OC5_SetConfig+0x7a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <TIM_OC5_SetConfig+0xb8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00b      	beq.n	8003e36 <TIM_OC5_SetConfig+0x7a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <TIM_OC5_SetConfig+0xbc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d007      	beq.n	8003e36 <TIM_OC5_SetConfig+0x7a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <TIM_OC5_SetConfig+0xc0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_OC5_SetConfig+0x7a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <TIM_OC5_SetConfig+0xc4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d109      	bne.n	8003e4a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40013400 	.word	0x40013400
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800

08003e84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	051b      	lsls	r3, r3, #20
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a18      	ldr	r2, [pc, #96]	; (8003f3c <TIM_OC6_SetConfig+0xb8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00f      	beq.n	8003f00 <TIM_OC6_SetConfig+0x7c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a17      	ldr	r2, [pc, #92]	; (8003f40 <TIM_OC6_SetConfig+0xbc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00b      	beq.n	8003f00 <TIM_OC6_SetConfig+0x7c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <TIM_OC6_SetConfig+0xc0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d007      	beq.n	8003f00 <TIM_OC6_SetConfig+0x7c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <TIM_OC6_SetConfig+0xc4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_OC6_SetConfig+0x7c>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <TIM_OC6_SetConfig+0xc8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d109      	bne.n	8003f14 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	029b      	lsls	r3, r3, #10
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40013400 	.word	0x40013400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800

08003f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f023 030a 	bic.w	r3, r3, #10
 8003f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f023 0210 	bic.w	r2, r3, #16
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	031b      	lsls	r3, r3, #12
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	f043 0307 	orr.w	r3, r3, #7
 8004030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	021a      	lsls	r2, r3, #8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	431a      	orrs	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4313      	orrs	r3, r2
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2201      	movs	r2, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1a      	ldr	r2, [r3, #32]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	401a      	ands	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a1a      	ldr	r2, [r3, #32]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	431a      	orrs	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e068      	b.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a2e      	ldr	r2, [pc, #184]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2d      	ldr	r2, [pc, #180]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d108      	bne.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004122:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01d      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415a:	d018      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d013      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1a      	ldr	r2, [pc, #104]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00e      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a18      	ldr	r2, [pc, #96]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d009      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a13      	ldr	r2, [pc, #76]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d10c      	bne.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4313      	orrs	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40013400 	.word	0x40013400
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40000c00 	.word	0x40000c00
 80041dc:	40014000 	.word	0x40014000

080041e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e040      	b.n	80042b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fc fc62 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f992 	bl	8004584 <UART_SetConfig>
 8004260:	4603      	mov	r3, r0
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e022      	b.n	80042b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fc3e 	bl	8004af4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004296:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fcc5 	bl	8004c38 <UART_CheckIdleState>
 80042ae:	4603      	mov	r3, r0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	f040 8082 	bne.w	80043d6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_UART_Transmit+0x26>
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e07a      	b.n	80043d8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_UART_Transmit+0x38>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e073      	b.n	80043d8 <HAL_UART_Transmit+0x120>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2221      	movs	r2, #33	; 0x21
 8004304:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004306:	f7fc fe35 	bl	8000f74 <HAL_GetTick>
 800430a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004324:	d108      	bne.n	8004338 <HAL_UART_Transmit+0x80>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d104      	bne.n	8004338 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	e003      	b.n	8004340 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004348:	e02d      	b.n	80043a6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2200      	movs	r2, #0
 8004352:	2180      	movs	r1, #128	; 0x80
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 fcb8 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e039      	b.n	80043d8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10b      	bne.n	8004382 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	881a      	ldrh	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004376:	b292      	uxth	r2, r2
 8004378:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	3302      	adds	r3, #2
 800437e:	61bb      	str	r3, [r7, #24]
 8004380:	e008      	b.n	8004394 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	781a      	ldrb	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	b292      	uxth	r2, r2
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3301      	adds	r3, #1
 8004392:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1cb      	bne.n	800434a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2140      	movs	r1, #64	; 0x40
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fc84 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e005      	b.n	80043d8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	f040 80bf 	bne.w	8004578 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_UART_Receive+0x26>
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e0b7      	b.n	800457a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_UART_Receive+0x38>
 8004414:	2302      	movs	r3, #2
 8004416:	e0b0      	b.n	800457a <HAL_UART_Receive+0x19a>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2222      	movs	r2, #34	; 0x22
 800442c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004434:	f7fc fd9e 	bl	8000f74 <HAL_GetTick>
 8004438:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	88fa      	ldrh	r2, [r7, #6]
 8004446:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004452:	d10e      	bne.n	8004472 <HAL_UART_Receive+0x92>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <HAL_UART_Receive+0x88>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004462:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004466:	e02d      	b.n	80044c4 <HAL_UART_Receive+0xe4>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	22ff      	movs	r2, #255	; 0xff
 800446c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004470:	e028      	b.n	80044c4 <HAL_UART_Receive+0xe4>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10d      	bne.n	8004496 <HAL_UART_Receive+0xb6>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d104      	bne.n	800448c <HAL_UART_Receive+0xac>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	22ff      	movs	r2, #255	; 0xff
 8004486:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800448a:	e01b      	b.n	80044c4 <HAL_UART_Receive+0xe4>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	227f      	movs	r2, #127	; 0x7f
 8004490:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004494:	e016      	b.n	80044c4 <HAL_UART_Receive+0xe4>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800449e:	d10d      	bne.n	80044bc <HAL_UART_Receive+0xdc>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d104      	bne.n	80044b2 <HAL_UART_Receive+0xd2>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	227f      	movs	r2, #127	; 0x7f
 80044ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044b0:	e008      	b.n	80044c4 <HAL_UART_Receive+0xe4>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	223f      	movs	r2, #63	; 0x3f
 80044b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ba:	e003      	b.n	80044c4 <HAL_UART_Receive+0xe4>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044ca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d4:	d108      	bne.n	80044e8 <HAL_UART_Receive+0x108>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e003      	b.n	80044f0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80044f8:	e033      	b.n	8004562 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2200      	movs	r2, #0
 8004502:	2120      	movs	r1, #32
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fbe0 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e032      	b.n	800457a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10c      	bne.n	8004534 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004520:	b29a      	uxth	r2, r3
 8004522:	8a7b      	ldrh	r3, [r7, #18]
 8004524:	4013      	ands	r3, r2
 8004526:	b29a      	uxth	r2, r3
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	3302      	adds	r3, #2
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	e00d      	b.n	8004550 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800453a:	b29b      	uxth	r3, r3
 800453c:	b2da      	uxtb	r2, r3
 800453e:	8a7b      	ldrh	r3, [r7, #18]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	4013      	ands	r3, r2
 8004544:	b2da      	uxtb	r2, r3
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3301      	adds	r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1c5      	bne.n	80044fa <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	e000      	b.n	800457a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004578:	2302      	movs	r3, #2
  }
}
 800457a:	4618      	mov	r0, r3
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004588:	b08a      	sub	sp, #40	; 0x28
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4ba4      	ldr	r3, [pc, #656]	; (8004844 <UART_SetConfig+0x2c0>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045bc:	430b      	orrs	r3, r1
 80045be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a99      	ldr	r2, [pc, #612]	; (8004848 <UART_SetConfig+0x2c4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ec:	4313      	orrs	r3, r2
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004600:	430a      	orrs	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a90      	ldr	r2, [pc, #576]	; (800484c <UART_SetConfig+0x2c8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d126      	bne.n	800465c <UART_SetConfig+0xd8>
 800460e:	4b90      	ldr	r3, [pc, #576]	; (8004850 <UART_SetConfig+0x2cc>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b03      	cmp	r3, #3
 800461a:	d81b      	bhi.n	8004654 <UART_SetConfig+0xd0>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <UART_SetConfig+0xa0>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004635 	.word	0x08004635
 8004628:	08004645 	.word	0x08004645
 800462c:	0800463d 	.word	0x0800463d
 8004630:	0800464d 	.word	0x0800464d
 8004634:	2301      	movs	r3, #1
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e116      	b.n	800486a <UART_SetConfig+0x2e6>
 800463c:	2302      	movs	r3, #2
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e112      	b.n	800486a <UART_SetConfig+0x2e6>
 8004644:	2304      	movs	r3, #4
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e10e      	b.n	800486a <UART_SetConfig+0x2e6>
 800464c:	2308      	movs	r3, #8
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e10a      	b.n	800486a <UART_SetConfig+0x2e6>
 8004654:	2310      	movs	r3, #16
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e106      	b.n	800486a <UART_SetConfig+0x2e6>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a7c      	ldr	r2, [pc, #496]	; (8004854 <UART_SetConfig+0x2d0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d138      	bne.n	80046d8 <UART_SetConfig+0x154>
 8004666:	4b7a      	ldr	r3, [pc, #488]	; (8004850 <UART_SetConfig+0x2cc>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d82d      	bhi.n	80046d0 <UART_SetConfig+0x14c>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <UART_SetConfig+0xf8>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	080046b1 	.word	0x080046b1
 8004680:	080046d1 	.word	0x080046d1
 8004684:	080046d1 	.word	0x080046d1
 8004688:	080046d1 	.word	0x080046d1
 800468c:	080046c1 	.word	0x080046c1
 8004690:	080046d1 	.word	0x080046d1
 8004694:	080046d1 	.word	0x080046d1
 8004698:	080046d1 	.word	0x080046d1
 800469c:	080046b9 	.word	0x080046b9
 80046a0:	080046d1 	.word	0x080046d1
 80046a4:	080046d1 	.word	0x080046d1
 80046a8:	080046d1 	.word	0x080046d1
 80046ac:	080046c9 	.word	0x080046c9
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b6:	e0d8      	b.n	800486a <UART_SetConfig+0x2e6>
 80046b8:	2302      	movs	r3, #2
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046be:	e0d4      	b.n	800486a <UART_SetConfig+0x2e6>
 80046c0:	2304      	movs	r3, #4
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c6:	e0d0      	b.n	800486a <UART_SetConfig+0x2e6>
 80046c8:	2308      	movs	r3, #8
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e0cc      	b.n	800486a <UART_SetConfig+0x2e6>
 80046d0:	2310      	movs	r3, #16
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e0c8      	b.n	800486a <UART_SetConfig+0x2e6>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a5e      	ldr	r2, [pc, #376]	; (8004858 <UART_SetConfig+0x2d4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d125      	bne.n	800472e <UART_SetConfig+0x1aa>
 80046e2:	4b5b      	ldr	r3, [pc, #364]	; (8004850 <UART_SetConfig+0x2cc>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046ec:	2b30      	cmp	r3, #48	; 0x30
 80046ee:	d016      	beq.n	800471e <UART_SetConfig+0x19a>
 80046f0:	2b30      	cmp	r3, #48	; 0x30
 80046f2:	d818      	bhi.n	8004726 <UART_SetConfig+0x1a2>
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d00a      	beq.n	800470e <UART_SetConfig+0x18a>
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d814      	bhi.n	8004726 <UART_SetConfig+0x1a2>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <UART_SetConfig+0x182>
 8004700:	2b10      	cmp	r3, #16
 8004702:	d008      	beq.n	8004716 <UART_SetConfig+0x192>
 8004704:	e00f      	b.n	8004726 <UART_SetConfig+0x1a2>
 8004706:	2300      	movs	r3, #0
 8004708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470c:	e0ad      	b.n	800486a <UART_SetConfig+0x2e6>
 800470e:	2302      	movs	r3, #2
 8004710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004714:	e0a9      	b.n	800486a <UART_SetConfig+0x2e6>
 8004716:	2304      	movs	r3, #4
 8004718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471c:	e0a5      	b.n	800486a <UART_SetConfig+0x2e6>
 800471e:	2308      	movs	r3, #8
 8004720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004724:	e0a1      	b.n	800486a <UART_SetConfig+0x2e6>
 8004726:	2310      	movs	r3, #16
 8004728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472c:	e09d      	b.n	800486a <UART_SetConfig+0x2e6>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a4a      	ldr	r2, [pc, #296]	; (800485c <UART_SetConfig+0x2d8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d125      	bne.n	8004784 <UART_SetConfig+0x200>
 8004738:	4b45      	ldr	r3, [pc, #276]	; (8004850 <UART_SetConfig+0x2cc>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004742:	2bc0      	cmp	r3, #192	; 0xc0
 8004744:	d016      	beq.n	8004774 <UART_SetConfig+0x1f0>
 8004746:	2bc0      	cmp	r3, #192	; 0xc0
 8004748:	d818      	bhi.n	800477c <UART_SetConfig+0x1f8>
 800474a:	2b80      	cmp	r3, #128	; 0x80
 800474c:	d00a      	beq.n	8004764 <UART_SetConfig+0x1e0>
 800474e:	2b80      	cmp	r3, #128	; 0x80
 8004750:	d814      	bhi.n	800477c <UART_SetConfig+0x1f8>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <UART_SetConfig+0x1d8>
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	d008      	beq.n	800476c <UART_SetConfig+0x1e8>
 800475a:	e00f      	b.n	800477c <UART_SetConfig+0x1f8>
 800475c:	2300      	movs	r3, #0
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004762:	e082      	b.n	800486a <UART_SetConfig+0x2e6>
 8004764:	2302      	movs	r3, #2
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476a:	e07e      	b.n	800486a <UART_SetConfig+0x2e6>
 800476c:	2304      	movs	r3, #4
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004772:	e07a      	b.n	800486a <UART_SetConfig+0x2e6>
 8004774:	2308      	movs	r3, #8
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477a:	e076      	b.n	800486a <UART_SetConfig+0x2e6>
 800477c:	2310      	movs	r3, #16
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004782:	e072      	b.n	800486a <UART_SetConfig+0x2e6>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a35      	ldr	r2, [pc, #212]	; (8004860 <UART_SetConfig+0x2dc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d12a      	bne.n	80047e4 <UART_SetConfig+0x260>
 800478e:	4b30      	ldr	r3, [pc, #192]	; (8004850 <UART_SetConfig+0x2cc>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800479c:	d01a      	beq.n	80047d4 <UART_SetConfig+0x250>
 800479e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047a2:	d81b      	bhi.n	80047dc <UART_SetConfig+0x258>
 80047a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a8:	d00c      	beq.n	80047c4 <UART_SetConfig+0x240>
 80047aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ae:	d815      	bhi.n	80047dc <UART_SetConfig+0x258>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <UART_SetConfig+0x238>
 80047b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b8:	d008      	beq.n	80047cc <UART_SetConfig+0x248>
 80047ba:	e00f      	b.n	80047dc <UART_SetConfig+0x258>
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c2:	e052      	b.n	800486a <UART_SetConfig+0x2e6>
 80047c4:	2302      	movs	r3, #2
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ca:	e04e      	b.n	800486a <UART_SetConfig+0x2e6>
 80047cc:	2304      	movs	r3, #4
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d2:	e04a      	b.n	800486a <UART_SetConfig+0x2e6>
 80047d4:	2308      	movs	r3, #8
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047da:	e046      	b.n	800486a <UART_SetConfig+0x2e6>
 80047dc:	2310      	movs	r3, #16
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e2:	e042      	b.n	800486a <UART_SetConfig+0x2e6>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a17      	ldr	r2, [pc, #92]	; (8004848 <UART_SetConfig+0x2c4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d13a      	bne.n	8004864 <UART_SetConfig+0x2e0>
 80047ee:	4b18      	ldr	r3, [pc, #96]	; (8004850 <UART_SetConfig+0x2cc>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047fc:	d01a      	beq.n	8004834 <UART_SetConfig+0x2b0>
 80047fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004802:	d81b      	bhi.n	800483c <UART_SetConfig+0x2b8>
 8004804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004808:	d00c      	beq.n	8004824 <UART_SetConfig+0x2a0>
 800480a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480e:	d815      	bhi.n	800483c <UART_SetConfig+0x2b8>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <UART_SetConfig+0x298>
 8004814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004818:	d008      	beq.n	800482c <UART_SetConfig+0x2a8>
 800481a:	e00f      	b.n	800483c <UART_SetConfig+0x2b8>
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004822:	e022      	b.n	800486a <UART_SetConfig+0x2e6>
 8004824:	2302      	movs	r3, #2
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482a:	e01e      	b.n	800486a <UART_SetConfig+0x2e6>
 800482c:	2304      	movs	r3, #4
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e01a      	b.n	800486a <UART_SetConfig+0x2e6>
 8004834:	2308      	movs	r3, #8
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e016      	b.n	800486a <UART_SetConfig+0x2e6>
 800483c:	2310      	movs	r3, #16
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e012      	b.n	800486a <UART_SetConfig+0x2e6>
 8004844:	efff69f3 	.word	0xefff69f3
 8004848:	40008000 	.word	0x40008000
 800484c:	40013800 	.word	0x40013800
 8004850:	40021000 	.word	0x40021000
 8004854:	40004400 	.word	0x40004400
 8004858:	40004800 	.word	0x40004800
 800485c:	40004c00 	.word	0x40004c00
 8004860:	40005000 	.word	0x40005000
 8004864:	2310      	movs	r3, #16
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a9f      	ldr	r2, [pc, #636]	; (8004aec <UART_SetConfig+0x568>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d17a      	bne.n	800496a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004878:	2b08      	cmp	r3, #8
 800487a:	d824      	bhi.n	80048c6 <UART_SetConfig+0x342>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <UART_SetConfig+0x300>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	080048a9 	.word	0x080048a9
 8004888:	080048c7 	.word	0x080048c7
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048c7 	.word	0x080048c7
 8004894:	080048b7 	.word	0x080048b7
 8004898:	080048c7 	.word	0x080048c7
 800489c:	080048c7 	.word	0x080048c7
 80048a0:	080048c7 	.word	0x080048c7
 80048a4:	080048bf 	.word	0x080048bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7fd fc1c 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80048ac:	61f8      	str	r0, [r7, #28]
        break;
 80048ae:	e010      	b.n	80048d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b0:	4b8f      	ldr	r3, [pc, #572]	; (8004af0 <UART_SetConfig+0x56c>)
 80048b2:	61fb      	str	r3, [r7, #28]
        break;
 80048b4:	e00d      	b.n	80048d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b6:	f7fd fb7d 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 80048ba:	61f8      	str	r0, [r7, #28]
        break;
 80048bc:	e009      	b.n	80048d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c2:	61fb      	str	r3, [r7, #28]
        break;
 80048c4:	e005      	b.n	80048d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 80fb 	beq.w	8004ad0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4413      	add	r3, r2
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d305      	bcc.n	80048f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d903      	bls.n	80048fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048fc:	e0e8      	b.n	8004ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2200      	movs	r2, #0
 8004902:	461c      	mov	r4, r3
 8004904:	4615      	mov	r5, r2
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	022b      	lsls	r3, r5, #8
 8004910:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004914:	0222      	lsls	r2, r4, #8
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	6849      	ldr	r1, [r1, #4]
 800491a:	0849      	lsrs	r1, r1, #1
 800491c:	2000      	movs	r0, #0
 800491e:	4688      	mov	r8, r1
 8004920:	4681      	mov	r9, r0
 8004922:	eb12 0a08 	adds.w	sl, r2, r8
 8004926:	eb43 0b09 	adc.w	fp, r3, r9
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004938:	4650      	mov	r0, sl
 800493a:	4659      	mov	r1, fp
 800493c:	f7fb fca8 	bl	8000290 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4613      	mov	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800494e:	d308      	bcc.n	8004962 <UART_SetConfig+0x3de>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004956:	d204      	bcs.n	8004962 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	60da      	str	r2, [r3, #12]
 8004960:	e0b6      	b.n	8004ad0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004968:	e0b2      	b.n	8004ad0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004972:	d15e      	bne.n	8004a32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004978:	2b08      	cmp	r3, #8
 800497a:	d828      	bhi.n	80049ce <UART_SetConfig+0x44a>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x400>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049b9 	.word	0x080049b9
 8004990:	080049cf 	.word	0x080049cf
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049cf 	.word	0x080049cf
 800499c:	080049cf 	.word	0x080049cf
 80049a0:	080049cf 	.word	0x080049cf
 80049a4:	080049c7 	.word	0x080049c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fd fb9c 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80049ac:	61f8      	str	r0, [r7, #28]
        break;
 80049ae:	e014      	b.n	80049da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7fd fbae 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 80049b4:	61f8      	str	r0, [r7, #28]
        break;
 80049b6:	e010      	b.n	80049da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b8:	4b4d      	ldr	r3, [pc, #308]	; (8004af0 <UART_SetConfig+0x56c>)
 80049ba:	61fb      	str	r3, [r7, #28]
        break;
 80049bc:	e00d      	b.n	80049da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049be:	f7fd faf9 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 80049c2:	61f8      	str	r0, [r7, #28]
        break;
 80049c4:	e009      	b.n	80049da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ca:	61fb      	str	r3, [r7, #28]
        break;
 80049cc:	e005      	b.n	80049da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d077      	beq.n	8004ad0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	005a      	lsls	r2, r3, #1
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	441a      	add	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b0f      	cmp	r3, #15
 80049fa:	d916      	bls.n	8004a2a <UART_SetConfig+0x4a6>
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a02:	d212      	bcs.n	8004a2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f023 030f 	bic.w	r3, r3, #15
 8004a0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	8afb      	ldrh	r3, [r7, #22]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	8afa      	ldrh	r2, [r7, #22]
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	e052      	b.n	8004ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a30:	e04e      	b.n	8004ad0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d827      	bhi.n	8004a8a <UART_SetConfig+0x506>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <UART_SetConfig+0x4bc>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a75 	.word	0x08004a75
 8004a4c:	08004a8b 	.word	0x08004a8b
 8004a50:	08004a7b 	.word	0x08004a7b
 8004a54:	08004a8b 	.word	0x08004a8b
 8004a58:	08004a8b 	.word	0x08004a8b
 8004a5c:	08004a8b 	.word	0x08004a8b
 8004a60:	08004a83 	.word	0x08004a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7fd fb3e 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8004a68:	61f8      	str	r0, [r7, #28]
        break;
 8004a6a:	e014      	b.n	8004a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a6c:	f7fd fb50 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 8004a70:	61f8      	str	r0, [r7, #28]
        break;
 8004a72:	e010      	b.n	8004a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a74:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <UART_SetConfig+0x56c>)
 8004a76:	61fb      	str	r3, [r7, #28]
        break;
 8004a78:	e00d      	b.n	8004a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7a:	f7fd fa9b 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8004a7e:	61f8      	str	r0, [r7, #28]
        break;
 8004a80:	e009      	b.n	8004a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a86:	61fb      	str	r3, [r7, #28]
        break;
 8004a88:	e005      	b.n	8004a96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a94:	bf00      	nop
    }

    if (pclk != 0U)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d019      	beq.n	8004ad0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	085a      	lsrs	r2, r3, #1
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	d909      	bls.n	8004aca <UART_SetConfig+0x546>
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abc:	d205      	bcs.n	8004aca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
 8004ac8:	e002      	b.n	8004ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004adc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3728      	adds	r7, #40	; 0x28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aea:	bf00      	nop
 8004aec:	40008000 	.word	0x40008000
 8004af0:	00f42400 	.word	0x00f42400

08004af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01a      	beq.n	8004c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf2:	d10a      	bne.n	8004c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	605a      	str	r2, [r3, #4]
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c48:	f7fc f994 	bl	8000f74 <HAL_GetTick>
 8004c4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d10e      	bne.n	8004c7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f82d 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e023      	b.n	8004cc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d10e      	bne.n	8004ca6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f817 	bl	8004cca <UART_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e00d      	b.n	8004cc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b09c      	sub	sp, #112	; 0x70
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cda:	e0a5      	b.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	f000 80a1 	beq.w	8004e28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce6:	f7fc f945 	bl	8000f74 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d302      	bcc.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x32>
 8004cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d13e      	bne.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d10:	667b      	str	r3, [r7, #100]	; 0x64
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e6      	bne.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	663b      	str	r3, [r7, #96]	; 0x60
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e5      	bne.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e067      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d04f      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d96:	d147      	bne.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004db6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e6      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3308      	adds	r3, #8
 8004dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	613b      	str	r3, [r7, #16]
   return(result);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3308      	adds	r3, #8
 8004df2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004df4:	623a      	str	r2, [r7, #32]
 8004df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	69f9      	ldr	r1, [r7, #28]
 8004dfa:	6a3a      	ldr	r2, [r7, #32]
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e5      	bne.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e010      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	f43f af4a 	beq.w	8004cdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3770      	adds	r7, #112	; 0x70
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <atoi>:
 8004e52:	220a      	movs	r2, #10
 8004e54:	2100      	movs	r1, #0
 8004e56:	f000 b987 	b.w	8005168 <strtol>
	...

08004e5c <__errno>:
 8004e5c:	4b01      	ldr	r3, [pc, #4]	; (8004e64 <__errno+0x8>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000010 	.word	0x20000010

08004e68 <__libc_init_array>:
 8004e68:	b570      	push	{r4, r5, r6, lr}
 8004e6a:	4d0d      	ldr	r5, [pc, #52]	; (8004ea0 <__libc_init_array+0x38>)
 8004e6c:	4c0d      	ldr	r4, [pc, #52]	; (8004ea4 <__libc_init_array+0x3c>)
 8004e6e:	1b64      	subs	r4, r4, r5
 8004e70:	10a4      	asrs	r4, r4, #2
 8004e72:	2600      	movs	r6, #0
 8004e74:	42a6      	cmp	r6, r4
 8004e76:	d109      	bne.n	8004e8c <__libc_init_array+0x24>
 8004e78:	4d0b      	ldr	r5, [pc, #44]	; (8004ea8 <__libc_init_array+0x40>)
 8004e7a:	4c0c      	ldr	r4, [pc, #48]	; (8004eac <__libc_init_array+0x44>)
 8004e7c:	f001 f978 	bl	8006170 <_init>
 8004e80:	1b64      	subs	r4, r4, r5
 8004e82:	10a4      	asrs	r4, r4, #2
 8004e84:	2600      	movs	r6, #0
 8004e86:	42a6      	cmp	r6, r4
 8004e88:	d105      	bne.n	8004e96 <__libc_init_array+0x2e>
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e90:	4798      	blx	r3
 8004e92:	3601      	adds	r6, #1
 8004e94:	e7ee      	b.n	8004e74 <__libc_init_array+0xc>
 8004e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e9a:	4798      	blx	r3
 8004e9c:	3601      	adds	r6, #1
 8004e9e:	e7f2      	b.n	8004e86 <__libc_init_array+0x1e>
 8004ea0:	0800645c 	.word	0x0800645c
 8004ea4:	0800645c 	.word	0x0800645c
 8004ea8:	0800645c 	.word	0x0800645c
 8004eac:	08006460 	.word	0x08006460

08004eb0 <memset>:
 8004eb0:	4402      	add	r2, r0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d100      	bne.n	8004eba <memset+0xa>
 8004eb8:	4770      	bx	lr
 8004eba:	f803 1b01 	strb.w	r1, [r3], #1
 8004ebe:	e7f9      	b.n	8004eb4 <memset+0x4>

08004ec0 <_puts_r>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	460e      	mov	r6, r1
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	b118      	cbz	r0, 8004ed0 <_puts_r+0x10>
 8004ec8:	6983      	ldr	r3, [r0, #24]
 8004eca:	b90b      	cbnz	r3, 8004ed0 <_puts_r+0x10>
 8004ecc:	f000 fb4e 	bl	800556c <__sinit>
 8004ed0:	69ab      	ldr	r3, [r5, #24]
 8004ed2:	68ac      	ldr	r4, [r5, #8]
 8004ed4:	b913      	cbnz	r3, 8004edc <_puts_r+0x1c>
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f000 fb48 	bl	800556c <__sinit>
 8004edc:	4b2c      	ldr	r3, [pc, #176]	; (8004f90 <_puts_r+0xd0>)
 8004ede:	429c      	cmp	r4, r3
 8004ee0:	d120      	bne.n	8004f24 <_puts_r+0x64>
 8004ee2:	686c      	ldr	r4, [r5, #4]
 8004ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ee6:	07db      	lsls	r3, r3, #31
 8004ee8:	d405      	bmi.n	8004ef6 <_puts_r+0x36>
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	0598      	lsls	r0, r3, #22
 8004eee:	d402      	bmi.n	8004ef6 <_puts_r+0x36>
 8004ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ef2:	f000 fbeb 	bl	80056cc <__retarget_lock_acquire_recursive>
 8004ef6:	89a3      	ldrh	r3, [r4, #12]
 8004ef8:	0719      	lsls	r1, r3, #28
 8004efa:	d51d      	bpl.n	8004f38 <_puts_r+0x78>
 8004efc:	6923      	ldr	r3, [r4, #16]
 8004efe:	b1db      	cbz	r3, 8004f38 <_puts_r+0x78>
 8004f00:	3e01      	subs	r6, #1
 8004f02:	68a3      	ldr	r3, [r4, #8]
 8004f04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	60a3      	str	r3, [r4, #8]
 8004f0c:	bb39      	cbnz	r1, 8004f5e <_puts_r+0x9e>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da38      	bge.n	8004f84 <_puts_r+0xc4>
 8004f12:	4622      	mov	r2, r4
 8004f14:	210a      	movs	r1, #10
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 f930 	bl	800517c <__swbuf_r>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d011      	beq.n	8004f44 <_puts_r+0x84>
 8004f20:	250a      	movs	r5, #10
 8004f22:	e011      	b.n	8004f48 <_puts_r+0x88>
 8004f24:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <_puts_r+0xd4>)
 8004f26:	429c      	cmp	r4, r3
 8004f28:	d101      	bne.n	8004f2e <_puts_r+0x6e>
 8004f2a:	68ac      	ldr	r4, [r5, #8]
 8004f2c:	e7da      	b.n	8004ee4 <_puts_r+0x24>
 8004f2e:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <_puts_r+0xd8>)
 8004f30:	429c      	cmp	r4, r3
 8004f32:	bf08      	it	eq
 8004f34:	68ec      	ldreq	r4, [r5, #12]
 8004f36:	e7d5      	b.n	8004ee4 <_puts_r+0x24>
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f000 f970 	bl	8005220 <__swsetup_r>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d0dd      	beq.n	8004f00 <_puts_r+0x40>
 8004f44:	f04f 35ff 	mov.w	r5, #4294967295
 8004f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f4a:	07da      	lsls	r2, r3, #31
 8004f4c:	d405      	bmi.n	8004f5a <_puts_r+0x9a>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	059b      	lsls	r3, r3, #22
 8004f52:	d402      	bmi.n	8004f5a <_puts_r+0x9a>
 8004f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f56:	f000 fbba 	bl	80056ce <__retarget_lock_release_recursive>
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	bd70      	pop	{r4, r5, r6, pc}
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	da04      	bge.n	8004f6c <_puts_r+0xac>
 8004f62:	69a2      	ldr	r2, [r4, #24]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	dc06      	bgt.n	8004f76 <_puts_r+0xb6>
 8004f68:	290a      	cmp	r1, #10
 8004f6a:	d004      	beq.n	8004f76 <_puts_r+0xb6>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	6022      	str	r2, [r4, #0]
 8004f72:	7019      	strb	r1, [r3, #0]
 8004f74:	e7c5      	b.n	8004f02 <_puts_r+0x42>
 8004f76:	4622      	mov	r2, r4
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f000 f8ff 	bl	800517c <__swbuf_r>
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d1bf      	bne.n	8004f02 <_puts_r+0x42>
 8004f82:	e7df      	b.n	8004f44 <_puts_r+0x84>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	250a      	movs	r5, #10
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	6022      	str	r2, [r4, #0]
 8004f8c:	701d      	strb	r5, [r3, #0]
 8004f8e:	e7db      	b.n	8004f48 <_puts_r+0x88>
 8004f90:	080063e0 	.word	0x080063e0
 8004f94:	08006400 	.word	0x08006400
 8004f98:	080063c0 	.word	0x080063c0

08004f9c <puts>:
 8004f9c:	4b02      	ldr	r3, [pc, #8]	; (8004fa8 <puts+0xc>)
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	f7ff bf8d 	b.w	8004ec0 <_puts_r>
 8004fa6:	bf00      	nop
 8004fa8:	20000010 	.word	0x20000010

08004fac <strtok>:
 8004fac:	4b16      	ldr	r3, [pc, #88]	; (8005008 <strtok+0x5c>)
 8004fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fb0:	681e      	ldr	r6, [r3, #0]
 8004fb2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	b9fc      	cbnz	r4, 8004ff8 <strtok+0x4c>
 8004fb8:	2050      	movs	r0, #80	; 0x50
 8004fba:	9101      	str	r1, [sp, #4]
 8004fbc:	f000 fbee 	bl	800579c <malloc>
 8004fc0:	9901      	ldr	r1, [sp, #4]
 8004fc2:	65b0      	str	r0, [r6, #88]	; 0x58
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	b920      	cbnz	r0, 8004fd2 <strtok+0x26>
 8004fc8:	4b10      	ldr	r3, [pc, #64]	; (800500c <strtok+0x60>)
 8004fca:	4811      	ldr	r0, [pc, #68]	; (8005010 <strtok+0x64>)
 8004fcc:	2157      	movs	r1, #87	; 0x57
 8004fce:	f000 f995 	bl	80052fc <__assert_func>
 8004fd2:	e9c0 4400 	strd	r4, r4, [r0]
 8004fd6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004fda:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004fde:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004fe2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004fe6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004fea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004fee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004ff2:	6184      	str	r4, [r0, #24]
 8004ff4:	7704      	strb	r4, [r0, #28]
 8004ff6:	6244      	str	r4, [r0, #36]	; 0x24
 8004ff8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	b002      	add	sp, #8
 8005000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005004:	f000 b806 	b.w	8005014 <__strtok_r>
 8005008:	20000010 	.word	0x20000010
 800500c:	0800620c 	.word	0x0800620c
 8005010:	08006223 	.word	0x08006223

08005014 <__strtok_r>:
 8005014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005016:	b908      	cbnz	r0, 800501c <__strtok_r+0x8>
 8005018:	6810      	ldr	r0, [r2, #0]
 800501a:	b188      	cbz	r0, 8005040 <__strtok_r+0x2c>
 800501c:	4604      	mov	r4, r0
 800501e:	4620      	mov	r0, r4
 8005020:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005024:	460f      	mov	r7, r1
 8005026:	f817 6b01 	ldrb.w	r6, [r7], #1
 800502a:	b91e      	cbnz	r6, 8005034 <__strtok_r+0x20>
 800502c:	b965      	cbnz	r5, 8005048 <__strtok_r+0x34>
 800502e:	6015      	str	r5, [r2, #0]
 8005030:	4628      	mov	r0, r5
 8005032:	e005      	b.n	8005040 <__strtok_r+0x2c>
 8005034:	42b5      	cmp	r5, r6
 8005036:	d1f6      	bne.n	8005026 <__strtok_r+0x12>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f0      	bne.n	800501e <__strtok_r+0xa>
 800503c:	6014      	str	r4, [r2, #0]
 800503e:	7003      	strb	r3, [r0, #0]
 8005040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005042:	461c      	mov	r4, r3
 8005044:	e00c      	b.n	8005060 <__strtok_r+0x4c>
 8005046:	b915      	cbnz	r5, 800504e <__strtok_r+0x3a>
 8005048:	f814 3b01 	ldrb.w	r3, [r4], #1
 800504c:	460e      	mov	r6, r1
 800504e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005052:	42ab      	cmp	r3, r5
 8005054:	d1f7      	bne.n	8005046 <__strtok_r+0x32>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f3      	beq.n	8005042 <__strtok_r+0x2e>
 800505a:	2300      	movs	r3, #0
 800505c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005060:	6014      	str	r4, [r2, #0]
 8005062:	e7ed      	b.n	8005040 <__strtok_r+0x2c>

08005064 <_strtol_l.constprop.0>:
 8005064:	2b01      	cmp	r3, #1
 8005066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506a:	d001      	beq.n	8005070 <_strtol_l.constprop.0+0xc>
 800506c:	2b24      	cmp	r3, #36	; 0x24
 800506e:	d906      	bls.n	800507e <_strtol_l.constprop.0+0x1a>
 8005070:	f7ff fef4 	bl	8004e5c <__errno>
 8005074:	2316      	movs	r3, #22
 8005076:	6003      	str	r3, [r0, #0]
 8005078:	2000      	movs	r0, #0
 800507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005164 <_strtol_l.constprop.0+0x100>
 8005082:	460d      	mov	r5, r1
 8005084:	462e      	mov	r6, r5
 8005086:	f815 4b01 	ldrb.w	r4, [r5], #1
 800508a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800508e:	f017 0708 	ands.w	r7, r7, #8
 8005092:	d1f7      	bne.n	8005084 <_strtol_l.constprop.0+0x20>
 8005094:	2c2d      	cmp	r4, #45	; 0x2d
 8005096:	d132      	bne.n	80050fe <_strtol_l.constprop.0+0x9a>
 8005098:	782c      	ldrb	r4, [r5, #0]
 800509a:	2701      	movs	r7, #1
 800509c:	1cb5      	adds	r5, r6, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d05b      	beq.n	800515a <_strtol_l.constprop.0+0xf6>
 80050a2:	2b10      	cmp	r3, #16
 80050a4:	d109      	bne.n	80050ba <_strtol_l.constprop.0+0x56>
 80050a6:	2c30      	cmp	r4, #48	; 0x30
 80050a8:	d107      	bne.n	80050ba <_strtol_l.constprop.0+0x56>
 80050aa:	782c      	ldrb	r4, [r5, #0]
 80050ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80050b0:	2c58      	cmp	r4, #88	; 0x58
 80050b2:	d14d      	bne.n	8005150 <_strtol_l.constprop.0+0xec>
 80050b4:	786c      	ldrb	r4, [r5, #1]
 80050b6:	2310      	movs	r3, #16
 80050b8:	3502      	adds	r5, #2
 80050ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80050be:	f108 38ff 	add.w	r8, r8, #4294967295
 80050c2:	f04f 0c00 	mov.w	ip, #0
 80050c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80050ca:	4666      	mov	r6, ip
 80050cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80050d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80050d4:	f1be 0f09 	cmp.w	lr, #9
 80050d8:	d816      	bhi.n	8005108 <_strtol_l.constprop.0+0xa4>
 80050da:	4674      	mov	r4, lr
 80050dc:	42a3      	cmp	r3, r4
 80050de:	dd24      	ble.n	800512a <_strtol_l.constprop.0+0xc6>
 80050e0:	f1bc 0f00 	cmp.w	ip, #0
 80050e4:	db1e      	blt.n	8005124 <_strtol_l.constprop.0+0xc0>
 80050e6:	45b1      	cmp	r9, r6
 80050e8:	d31c      	bcc.n	8005124 <_strtol_l.constprop.0+0xc0>
 80050ea:	d101      	bne.n	80050f0 <_strtol_l.constprop.0+0x8c>
 80050ec:	45a2      	cmp	sl, r4
 80050ee:	db19      	blt.n	8005124 <_strtol_l.constprop.0+0xc0>
 80050f0:	fb06 4603 	mla	r6, r6, r3, r4
 80050f4:	f04f 0c01 	mov.w	ip, #1
 80050f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050fc:	e7e8      	b.n	80050d0 <_strtol_l.constprop.0+0x6c>
 80050fe:	2c2b      	cmp	r4, #43	; 0x2b
 8005100:	bf04      	itt	eq
 8005102:	782c      	ldrbeq	r4, [r5, #0]
 8005104:	1cb5      	addeq	r5, r6, #2
 8005106:	e7ca      	b.n	800509e <_strtol_l.constprop.0+0x3a>
 8005108:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800510c:	f1be 0f19 	cmp.w	lr, #25
 8005110:	d801      	bhi.n	8005116 <_strtol_l.constprop.0+0xb2>
 8005112:	3c37      	subs	r4, #55	; 0x37
 8005114:	e7e2      	b.n	80050dc <_strtol_l.constprop.0+0x78>
 8005116:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800511a:	f1be 0f19 	cmp.w	lr, #25
 800511e:	d804      	bhi.n	800512a <_strtol_l.constprop.0+0xc6>
 8005120:	3c57      	subs	r4, #87	; 0x57
 8005122:	e7db      	b.n	80050dc <_strtol_l.constprop.0+0x78>
 8005124:	f04f 3cff 	mov.w	ip, #4294967295
 8005128:	e7e6      	b.n	80050f8 <_strtol_l.constprop.0+0x94>
 800512a:	f1bc 0f00 	cmp.w	ip, #0
 800512e:	da05      	bge.n	800513c <_strtol_l.constprop.0+0xd8>
 8005130:	2322      	movs	r3, #34	; 0x22
 8005132:	6003      	str	r3, [r0, #0]
 8005134:	4646      	mov	r6, r8
 8005136:	b942      	cbnz	r2, 800514a <_strtol_l.constprop.0+0xe6>
 8005138:	4630      	mov	r0, r6
 800513a:	e79e      	b.n	800507a <_strtol_l.constprop.0+0x16>
 800513c:	b107      	cbz	r7, 8005140 <_strtol_l.constprop.0+0xdc>
 800513e:	4276      	negs	r6, r6
 8005140:	2a00      	cmp	r2, #0
 8005142:	d0f9      	beq.n	8005138 <_strtol_l.constprop.0+0xd4>
 8005144:	f1bc 0f00 	cmp.w	ip, #0
 8005148:	d000      	beq.n	800514c <_strtol_l.constprop.0+0xe8>
 800514a:	1e69      	subs	r1, r5, #1
 800514c:	6011      	str	r1, [r2, #0]
 800514e:	e7f3      	b.n	8005138 <_strtol_l.constprop.0+0xd4>
 8005150:	2430      	movs	r4, #48	; 0x30
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1b1      	bne.n	80050ba <_strtol_l.constprop.0+0x56>
 8005156:	2308      	movs	r3, #8
 8005158:	e7af      	b.n	80050ba <_strtol_l.constprop.0+0x56>
 800515a:	2c30      	cmp	r4, #48	; 0x30
 800515c:	d0a5      	beq.n	80050aa <_strtol_l.constprop.0+0x46>
 800515e:	230a      	movs	r3, #10
 8005160:	e7ab      	b.n	80050ba <_strtol_l.constprop.0+0x56>
 8005162:	bf00      	nop
 8005164:	080062bd 	.word	0x080062bd

08005168 <strtol>:
 8005168:	4613      	mov	r3, r2
 800516a:	460a      	mov	r2, r1
 800516c:	4601      	mov	r1, r0
 800516e:	4802      	ldr	r0, [pc, #8]	; (8005178 <strtol+0x10>)
 8005170:	6800      	ldr	r0, [r0, #0]
 8005172:	f7ff bf77 	b.w	8005064 <_strtol_l.constprop.0>
 8005176:	bf00      	nop
 8005178:	20000010 	.word	0x20000010

0800517c <__swbuf_r>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	460e      	mov	r6, r1
 8005180:	4614      	mov	r4, r2
 8005182:	4605      	mov	r5, r0
 8005184:	b118      	cbz	r0, 800518e <__swbuf_r+0x12>
 8005186:	6983      	ldr	r3, [r0, #24]
 8005188:	b90b      	cbnz	r3, 800518e <__swbuf_r+0x12>
 800518a:	f000 f9ef 	bl	800556c <__sinit>
 800518e:	4b21      	ldr	r3, [pc, #132]	; (8005214 <__swbuf_r+0x98>)
 8005190:	429c      	cmp	r4, r3
 8005192:	d12b      	bne.n	80051ec <__swbuf_r+0x70>
 8005194:	686c      	ldr	r4, [r5, #4]
 8005196:	69a3      	ldr	r3, [r4, #24]
 8005198:	60a3      	str	r3, [r4, #8]
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	071a      	lsls	r2, r3, #28
 800519e:	d52f      	bpl.n	8005200 <__swbuf_r+0x84>
 80051a0:	6923      	ldr	r3, [r4, #16]
 80051a2:	b36b      	cbz	r3, 8005200 <__swbuf_r+0x84>
 80051a4:	6923      	ldr	r3, [r4, #16]
 80051a6:	6820      	ldr	r0, [r4, #0]
 80051a8:	1ac0      	subs	r0, r0, r3
 80051aa:	6963      	ldr	r3, [r4, #20]
 80051ac:	b2f6      	uxtb	r6, r6
 80051ae:	4283      	cmp	r3, r0
 80051b0:	4637      	mov	r7, r6
 80051b2:	dc04      	bgt.n	80051be <__swbuf_r+0x42>
 80051b4:	4621      	mov	r1, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	f000 f944 	bl	8005444 <_fflush_r>
 80051bc:	bb30      	cbnz	r0, 800520c <__swbuf_r+0x90>
 80051be:	68a3      	ldr	r3, [r4, #8]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	60a3      	str	r3, [r4, #8]
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	6022      	str	r2, [r4, #0]
 80051ca:	701e      	strb	r6, [r3, #0]
 80051cc:	6963      	ldr	r3, [r4, #20]
 80051ce:	3001      	adds	r0, #1
 80051d0:	4283      	cmp	r3, r0
 80051d2:	d004      	beq.n	80051de <__swbuf_r+0x62>
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	07db      	lsls	r3, r3, #31
 80051d8:	d506      	bpl.n	80051e8 <__swbuf_r+0x6c>
 80051da:	2e0a      	cmp	r6, #10
 80051dc:	d104      	bne.n	80051e8 <__swbuf_r+0x6c>
 80051de:	4621      	mov	r1, r4
 80051e0:	4628      	mov	r0, r5
 80051e2:	f000 f92f 	bl	8005444 <_fflush_r>
 80051e6:	b988      	cbnz	r0, 800520c <__swbuf_r+0x90>
 80051e8:	4638      	mov	r0, r7
 80051ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ec:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <__swbuf_r+0x9c>)
 80051ee:	429c      	cmp	r4, r3
 80051f0:	d101      	bne.n	80051f6 <__swbuf_r+0x7a>
 80051f2:	68ac      	ldr	r4, [r5, #8]
 80051f4:	e7cf      	b.n	8005196 <__swbuf_r+0x1a>
 80051f6:	4b09      	ldr	r3, [pc, #36]	; (800521c <__swbuf_r+0xa0>)
 80051f8:	429c      	cmp	r4, r3
 80051fa:	bf08      	it	eq
 80051fc:	68ec      	ldreq	r4, [r5, #12]
 80051fe:	e7ca      	b.n	8005196 <__swbuf_r+0x1a>
 8005200:	4621      	mov	r1, r4
 8005202:	4628      	mov	r0, r5
 8005204:	f000 f80c 	bl	8005220 <__swsetup_r>
 8005208:	2800      	cmp	r0, #0
 800520a:	d0cb      	beq.n	80051a4 <__swbuf_r+0x28>
 800520c:	f04f 37ff 	mov.w	r7, #4294967295
 8005210:	e7ea      	b.n	80051e8 <__swbuf_r+0x6c>
 8005212:	bf00      	nop
 8005214:	080063e0 	.word	0x080063e0
 8005218:	08006400 	.word	0x08006400
 800521c:	080063c0 	.word	0x080063c0

08005220 <__swsetup_r>:
 8005220:	4b32      	ldr	r3, [pc, #200]	; (80052ec <__swsetup_r+0xcc>)
 8005222:	b570      	push	{r4, r5, r6, lr}
 8005224:	681d      	ldr	r5, [r3, #0]
 8005226:	4606      	mov	r6, r0
 8005228:	460c      	mov	r4, r1
 800522a:	b125      	cbz	r5, 8005236 <__swsetup_r+0x16>
 800522c:	69ab      	ldr	r3, [r5, #24]
 800522e:	b913      	cbnz	r3, 8005236 <__swsetup_r+0x16>
 8005230:	4628      	mov	r0, r5
 8005232:	f000 f99b 	bl	800556c <__sinit>
 8005236:	4b2e      	ldr	r3, [pc, #184]	; (80052f0 <__swsetup_r+0xd0>)
 8005238:	429c      	cmp	r4, r3
 800523a:	d10f      	bne.n	800525c <__swsetup_r+0x3c>
 800523c:	686c      	ldr	r4, [r5, #4]
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005244:	0719      	lsls	r1, r3, #28
 8005246:	d42c      	bmi.n	80052a2 <__swsetup_r+0x82>
 8005248:	06dd      	lsls	r5, r3, #27
 800524a:	d411      	bmi.n	8005270 <__swsetup_r+0x50>
 800524c:	2309      	movs	r3, #9
 800524e:	6033      	str	r3, [r6, #0]
 8005250:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005254:	81a3      	strh	r3, [r4, #12]
 8005256:	f04f 30ff 	mov.w	r0, #4294967295
 800525a:	e03e      	b.n	80052da <__swsetup_r+0xba>
 800525c:	4b25      	ldr	r3, [pc, #148]	; (80052f4 <__swsetup_r+0xd4>)
 800525e:	429c      	cmp	r4, r3
 8005260:	d101      	bne.n	8005266 <__swsetup_r+0x46>
 8005262:	68ac      	ldr	r4, [r5, #8]
 8005264:	e7eb      	b.n	800523e <__swsetup_r+0x1e>
 8005266:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <__swsetup_r+0xd8>)
 8005268:	429c      	cmp	r4, r3
 800526a:	bf08      	it	eq
 800526c:	68ec      	ldreq	r4, [r5, #12]
 800526e:	e7e6      	b.n	800523e <__swsetup_r+0x1e>
 8005270:	0758      	lsls	r0, r3, #29
 8005272:	d512      	bpl.n	800529a <__swsetup_r+0x7a>
 8005274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005276:	b141      	cbz	r1, 800528a <__swsetup_r+0x6a>
 8005278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800527c:	4299      	cmp	r1, r3
 800527e:	d002      	beq.n	8005286 <__swsetup_r+0x66>
 8005280:	4630      	mov	r0, r6
 8005282:	f000 fa93 	bl	80057ac <_free_r>
 8005286:	2300      	movs	r3, #0
 8005288:	6363      	str	r3, [r4, #52]	; 0x34
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005290:	81a3      	strh	r3, [r4, #12]
 8005292:	2300      	movs	r3, #0
 8005294:	6063      	str	r3, [r4, #4]
 8005296:	6923      	ldr	r3, [r4, #16]
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	f043 0308 	orr.w	r3, r3, #8
 80052a0:	81a3      	strh	r3, [r4, #12]
 80052a2:	6923      	ldr	r3, [r4, #16]
 80052a4:	b94b      	cbnz	r3, 80052ba <__swsetup_r+0x9a>
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b0:	d003      	beq.n	80052ba <__swsetup_r+0x9a>
 80052b2:	4621      	mov	r1, r4
 80052b4:	4630      	mov	r0, r6
 80052b6:	f000 fa31 	bl	800571c <__smakebuf_r>
 80052ba:	89a0      	ldrh	r0, [r4, #12]
 80052bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052c0:	f010 0301 	ands.w	r3, r0, #1
 80052c4:	d00a      	beq.n	80052dc <__swsetup_r+0xbc>
 80052c6:	2300      	movs	r3, #0
 80052c8:	60a3      	str	r3, [r4, #8]
 80052ca:	6963      	ldr	r3, [r4, #20]
 80052cc:	425b      	negs	r3, r3
 80052ce:	61a3      	str	r3, [r4, #24]
 80052d0:	6923      	ldr	r3, [r4, #16]
 80052d2:	b943      	cbnz	r3, 80052e6 <__swsetup_r+0xc6>
 80052d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052d8:	d1ba      	bne.n	8005250 <__swsetup_r+0x30>
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	0781      	lsls	r1, r0, #30
 80052de:	bf58      	it	pl
 80052e0:	6963      	ldrpl	r3, [r4, #20]
 80052e2:	60a3      	str	r3, [r4, #8]
 80052e4:	e7f4      	b.n	80052d0 <__swsetup_r+0xb0>
 80052e6:	2000      	movs	r0, #0
 80052e8:	e7f7      	b.n	80052da <__swsetup_r+0xba>
 80052ea:	bf00      	nop
 80052ec:	20000010 	.word	0x20000010
 80052f0:	080063e0 	.word	0x080063e0
 80052f4:	08006400 	.word	0x08006400
 80052f8:	080063c0 	.word	0x080063c0

080052fc <__assert_func>:
 80052fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052fe:	4614      	mov	r4, r2
 8005300:	461a      	mov	r2, r3
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <__assert_func+0x2c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4605      	mov	r5, r0
 8005308:	68d8      	ldr	r0, [r3, #12]
 800530a:	b14c      	cbz	r4, 8005320 <__assert_func+0x24>
 800530c:	4b07      	ldr	r3, [pc, #28]	; (800532c <__assert_func+0x30>)
 800530e:	9100      	str	r1, [sp, #0]
 8005310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005314:	4906      	ldr	r1, [pc, #24]	; (8005330 <__assert_func+0x34>)
 8005316:	462b      	mov	r3, r5
 8005318:	f000 f9a6 	bl	8005668 <fiprintf>
 800531c:	f000 fe7a 	bl	8006014 <abort>
 8005320:	4b04      	ldr	r3, [pc, #16]	; (8005334 <__assert_func+0x38>)
 8005322:	461c      	mov	r4, r3
 8005324:	e7f3      	b.n	800530e <__assert_func+0x12>
 8005326:	bf00      	nop
 8005328:	20000010 	.word	0x20000010
 800532c:	08006280 	.word	0x08006280
 8005330:	0800628d 	.word	0x0800628d
 8005334:	080062bb 	.word	0x080062bb

08005338 <__sflush_r>:
 8005338:	898a      	ldrh	r2, [r1, #12]
 800533a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	4605      	mov	r5, r0
 8005340:	0710      	lsls	r0, r2, #28
 8005342:	460c      	mov	r4, r1
 8005344:	d458      	bmi.n	80053f8 <__sflush_r+0xc0>
 8005346:	684b      	ldr	r3, [r1, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	dc05      	bgt.n	8005358 <__sflush_r+0x20>
 800534c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	dc02      	bgt.n	8005358 <__sflush_r+0x20>
 8005352:	2000      	movs	r0, #0
 8005354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800535a:	2e00      	cmp	r6, #0
 800535c:	d0f9      	beq.n	8005352 <__sflush_r+0x1a>
 800535e:	2300      	movs	r3, #0
 8005360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005364:	682f      	ldr	r7, [r5, #0]
 8005366:	602b      	str	r3, [r5, #0]
 8005368:	d032      	beq.n	80053d0 <__sflush_r+0x98>
 800536a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	075a      	lsls	r2, r3, #29
 8005370:	d505      	bpl.n	800537e <__sflush_r+0x46>
 8005372:	6863      	ldr	r3, [r4, #4]
 8005374:	1ac0      	subs	r0, r0, r3
 8005376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005378:	b10b      	cbz	r3, 800537e <__sflush_r+0x46>
 800537a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800537c:	1ac0      	subs	r0, r0, r3
 800537e:	2300      	movs	r3, #0
 8005380:	4602      	mov	r2, r0
 8005382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005384:	6a21      	ldr	r1, [r4, #32]
 8005386:	4628      	mov	r0, r5
 8005388:	47b0      	blx	r6
 800538a:	1c43      	adds	r3, r0, #1
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	d106      	bne.n	800539e <__sflush_r+0x66>
 8005390:	6829      	ldr	r1, [r5, #0]
 8005392:	291d      	cmp	r1, #29
 8005394:	d82c      	bhi.n	80053f0 <__sflush_r+0xb8>
 8005396:	4a2a      	ldr	r2, [pc, #168]	; (8005440 <__sflush_r+0x108>)
 8005398:	40ca      	lsrs	r2, r1
 800539a:	07d6      	lsls	r6, r2, #31
 800539c:	d528      	bpl.n	80053f0 <__sflush_r+0xb8>
 800539e:	2200      	movs	r2, #0
 80053a0:	6062      	str	r2, [r4, #4]
 80053a2:	04d9      	lsls	r1, r3, #19
 80053a4:	6922      	ldr	r2, [r4, #16]
 80053a6:	6022      	str	r2, [r4, #0]
 80053a8:	d504      	bpl.n	80053b4 <__sflush_r+0x7c>
 80053aa:	1c42      	adds	r2, r0, #1
 80053ac:	d101      	bne.n	80053b2 <__sflush_r+0x7a>
 80053ae:	682b      	ldr	r3, [r5, #0]
 80053b0:	b903      	cbnz	r3, 80053b4 <__sflush_r+0x7c>
 80053b2:	6560      	str	r0, [r4, #84]	; 0x54
 80053b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053b6:	602f      	str	r7, [r5, #0]
 80053b8:	2900      	cmp	r1, #0
 80053ba:	d0ca      	beq.n	8005352 <__sflush_r+0x1a>
 80053bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053c0:	4299      	cmp	r1, r3
 80053c2:	d002      	beq.n	80053ca <__sflush_r+0x92>
 80053c4:	4628      	mov	r0, r5
 80053c6:	f000 f9f1 	bl	80057ac <_free_r>
 80053ca:	2000      	movs	r0, #0
 80053cc:	6360      	str	r0, [r4, #52]	; 0x34
 80053ce:	e7c1      	b.n	8005354 <__sflush_r+0x1c>
 80053d0:	6a21      	ldr	r1, [r4, #32]
 80053d2:	2301      	movs	r3, #1
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b0      	blx	r6
 80053d8:	1c41      	adds	r1, r0, #1
 80053da:	d1c7      	bne.n	800536c <__sflush_r+0x34>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0c4      	beq.n	800536c <__sflush_r+0x34>
 80053e2:	2b1d      	cmp	r3, #29
 80053e4:	d001      	beq.n	80053ea <__sflush_r+0xb2>
 80053e6:	2b16      	cmp	r3, #22
 80053e8:	d101      	bne.n	80053ee <__sflush_r+0xb6>
 80053ea:	602f      	str	r7, [r5, #0]
 80053ec:	e7b1      	b.n	8005352 <__sflush_r+0x1a>
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f4:	81a3      	strh	r3, [r4, #12]
 80053f6:	e7ad      	b.n	8005354 <__sflush_r+0x1c>
 80053f8:	690f      	ldr	r7, [r1, #16]
 80053fa:	2f00      	cmp	r7, #0
 80053fc:	d0a9      	beq.n	8005352 <__sflush_r+0x1a>
 80053fe:	0793      	lsls	r3, r2, #30
 8005400:	680e      	ldr	r6, [r1, #0]
 8005402:	bf08      	it	eq
 8005404:	694b      	ldreq	r3, [r1, #20]
 8005406:	600f      	str	r7, [r1, #0]
 8005408:	bf18      	it	ne
 800540a:	2300      	movne	r3, #0
 800540c:	eba6 0807 	sub.w	r8, r6, r7
 8005410:	608b      	str	r3, [r1, #8]
 8005412:	f1b8 0f00 	cmp.w	r8, #0
 8005416:	dd9c      	ble.n	8005352 <__sflush_r+0x1a>
 8005418:	6a21      	ldr	r1, [r4, #32]
 800541a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800541c:	4643      	mov	r3, r8
 800541e:	463a      	mov	r2, r7
 8005420:	4628      	mov	r0, r5
 8005422:	47b0      	blx	r6
 8005424:	2800      	cmp	r0, #0
 8005426:	dc06      	bgt.n	8005436 <__sflush_r+0xfe>
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542e:	81a3      	strh	r3, [r4, #12]
 8005430:	f04f 30ff 	mov.w	r0, #4294967295
 8005434:	e78e      	b.n	8005354 <__sflush_r+0x1c>
 8005436:	4407      	add	r7, r0
 8005438:	eba8 0800 	sub.w	r8, r8, r0
 800543c:	e7e9      	b.n	8005412 <__sflush_r+0xda>
 800543e:	bf00      	nop
 8005440:	20400001 	.word	0x20400001

08005444 <_fflush_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	690b      	ldr	r3, [r1, #16]
 8005448:	4605      	mov	r5, r0
 800544a:	460c      	mov	r4, r1
 800544c:	b913      	cbnz	r3, 8005454 <_fflush_r+0x10>
 800544e:	2500      	movs	r5, #0
 8005450:	4628      	mov	r0, r5
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	b118      	cbz	r0, 800545e <_fflush_r+0x1a>
 8005456:	6983      	ldr	r3, [r0, #24]
 8005458:	b90b      	cbnz	r3, 800545e <_fflush_r+0x1a>
 800545a:	f000 f887 	bl	800556c <__sinit>
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <_fflush_r+0x6c>)
 8005460:	429c      	cmp	r4, r3
 8005462:	d11b      	bne.n	800549c <_fflush_r+0x58>
 8005464:	686c      	ldr	r4, [r5, #4]
 8005466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0ef      	beq.n	800544e <_fflush_r+0xa>
 800546e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005470:	07d0      	lsls	r0, r2, #31
 8005472:	d404      	bmi.n	800547e <_fflush_r+0x3a>
 8005474:	0599      	lsls	r1, r3, #22
 8005476:	d402      	bmi.n	800547e <_fflush_r+0x3a>
 8005478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800547a:	f000 f927 	bl	80056cc <__retarget_lock_acquire_recursive>
 800547e:	4628      	mov	r0, r5
 8005480:	4621      	mov	r1, r4
 8005482:	f7ff ff59 	bl	8005338 <__sflush_r>
 8005486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005488:	07da      	lsls	r2, r3, #31
 800548a:	4605      	mov	r5, r0
 800548c:	d4e0      	bmi.n	8005450 <_fflush_r+0xc>
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	059b      	lsls	r3, r3, #22
 8005492:	d4dd      	bmi.n	8005450 <_fflush_r+0xc>
 8005494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005496:	f000 f91a 	bl	80056ce <__retarget_lock_release_recursive>
 800549a:	e7d9      	b.n	8005450 <_fflush_r+0xc>
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <_fflush_r+0x70>)
 800549e:	429c      	cmp	r4, r3
 80054a0:	d101      	bne.n	80054a6 <_fflush_r+0x62>
 80054a2:	68ac      	ldr	r4, [r5, #8]
 80054a4:	e7df      	b.n	8005466 <_fflush_r+0x22>
 80054a6:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <_fflush_r+0x74>)
 80054a8:	429c      	cmp	r4, r3
 80054aa:	bf08      	it	eq
 80054ac:	68ec      	ldreq	r4, [r5, #12]
 80054ae:	e7da      	b.n	8005466 <_fflush_r+0x22>
 80054b0:	080063e0 	.word	0x080063e0
 80054b4:	08006400 	.word	0x08006400
 80054b8:	080063c0 	.word	0x080063c0

080054bc <std>:
 80054bc:	2300      	movs	r3, #0
 80054be:	b510      	push	{r4, lr}
 80054c0:	4604      	mov	r4, r0
 80054c2:	e9c0 3300 	strd	r3, r3, [r0]
 80054c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ca:	6083      	str	r3, [r0, #8]
 80054cc:	8181      	strh	r1, [r0, #12]
 80054ce:	6643      	str	r3, [r0, #100]	; 0x64
 80054d0:	81c2      	strh	r2, [r0, #14]
 80054d2:	6183      	str	r3, [r0, #24]
 80054d4:	4619      	mov	r1, r3
 80054d6:	2208      	movs	r2, #8
 80054d8:	305c      	adds	r0, #92	; 0x5c
 80054da:	f7ff fce9 	bl	8004eb0 <memset>
 80054de:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <std+0x38>)
 80054e0:	6263      	str	r3, [r4, #36]	; 0x24
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <std+0x3c>)
 80054e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <std+0x40>)
 80054e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <std+0x44>)
 80054ec:	6224      	str	r4, [r4, #32]
 80054ee:	6323      	str	r3, [r4, #48]	; 0x30
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	bf00      	nop
 80054f4:	08005f69 	.word	0x08005f69
 80054f8:	08005f8b 	.word	0x08005f8b
 80054fc:	08005fc3 	.word	0x08005fc3
 8005500:	08005fe7 	.word	0x08005fe7

08005504 <_cleanup_r>:
 8005504:	4901      	ldr	r1, [pc, #4]	; (800550c <_cleanup_r+0x8>)
 8005506:	f000 b8c1 	b.w	800568c <_fwalk_reent>
 800550a:	bf00      	nop
 800550c:	08005445 	.word	0x08005445

08005510 <__sfmoreglue>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	2268      	movs	r2, #104	; 0x68
 8005514:	1e4d      	subs	r5, r1, #1
 8005516:	4355      	muls	r5, r2
 8005518:	460e      	mov	r6, r1
 800551a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800551e:	f000 f9b1 	bl	8005884 <_malloc_r>
 8005522:	4604      	mov	r4, r0
 8005524:	b140      	cbz	r0, 8005538 <__sfmoreglue+0x28>
 8005526:	2100      	movs	r1, #0
 8005528:	e9c0 1600 	strd	r1, r6, [r0]
 800552c:	300c      	adds	r0, #12
 800552e:	60a0      	str	r0, [r4, #8]
 8005530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005534:	f7ff fcbc 	bl	8004eb0 <memset>
 8005538:	4620      	mov	r0, r4
 800553a:	bd70      	pop	{r4, r5, r6, pc}

0800553c <__sfp_lock_acquire>:
 800553c:	4801      	ldr	r0, [pc, #4]	; (8005544 <__sfp_lock_acquire+0x8>)
 800553e:	f000 b8c5 	b.w	80056cc <__retarget_lock_acquire_recursive>
 8005542:	bf00      	nop
 8005544:	200001d5 	.word	0x200001d5

08005548 <__sfp_lock_release>:
 8005548:	4801      	ldr	r0, [pc, #4]	; (8005550 <__sfp_lock_release+0x8>)
 800554a:	f000 b8c0 	b.w	80056ce <__retarget_lock_release_recursive>
 800554e:	bf00      	nop
 8005550:	200001d5 	.word	0x200001d5

08005554 <__sinit_lock_acquire>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__sinit_lock_acquire+0x8>)
 8005556:	f000 b8b9 	b.w	80056cc <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	200001d6 	.word	0x200001d6

08005560 <__sinit_lock_release>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__sinit_lock_release+0x8>)
 8005562:	f000 b8b4 	b.w	80056ce <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	200001d6 	.word	0x200001d6

0800556c <__sinit>:
 800556c:	b510      	push	{r4, lr}
 800556e:	4604      	mov	r4, r0
 8005570:	f7ff fff0 	bl	8005554 <__sinit_lock_acquire>
 8005574:	69a3      	ldr	r3, [r4, #24]
 8005576:	b11b      	cbz	r3, 8005580 <__sinit+0x14>
 8005578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800557c:	f7ff bff0 	b.w	8005560 <__sinit_lock_release>
 8005580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005584:	6523      	str	r3, [r4, #80]	; 0x50
 8005586:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <__sinit+0x68>)
 8005588:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <__sinit+0x6c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	62a2      	str	r2, [r4, #40]	; 0x28
 800558e:	42a3      	cmp	r3, r4
 8005590:	bf04      	itt	eq
 8005592:	2301      	moveq	r3, #1
 8005594:	61a3      	streq	r3, [r4, #24]
 8005596:	4620      	mov	r0, r4
 8005598:	f000 f820 	bl	80055dc <__sfp>
 800559c:	6060      	str	r0, [r4, #4]
 800559e:	4620      	mov	r0, r4
 80055a0:	f000 f81c 	bl	80055dc <__sfp>
 80055a4:	60a0      	str	r0, [r4, #8]
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 f818 	bl	80055dc <__sfp>
 80055ac:	2200      	movs	r2, #0
 80055ae:	60e0      	str	r0, [r4, #12]
 80055b0:	2104      	movs	r1, #4
 80055b2:	6860      	ldr	r0, [r4, #4]
 80055b4:	f7ff ff82 	bl	80054bc <std>
 80055b8:	68a0      	ldr	r0, [r4, #8]
 80055ba:	2201      	movs	r2, #1
 80055bc:	2109      	movs	r1, #9
 80055be:	f7ff ff7d 	bl	80054bc <std>
 80055c2:	68e0      	ldr	r0, [r4, #12]
 80055c4:	2202      	movs	r2, #2
 80055c6:	2112      	movs	r1, #18
 80055c8:	f7ff ff78 	bl	80054bc <std>
 80055cc:	2301      	movs	r3, #1
 80055ce:	61a3      	str	r3, [r4, #24]
 80055d0:	e7d2      	b.n	8005578 <__sinit+0xc>
 80055d2:	bf00      	nop
 80055d4:	08006208 	.word	0x08006208
 80055d8:	08005505 	.word	0x08005505

080055dc <__sfp>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	4607      	mov	r7, r0
 80055e0:	f7ff ffac 	bl	800553c <__sfp_lock_acquire>
 80055e4:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <__sfp+0x84>)
 80055e6:	681e      	ldr	r6, [r3, #0]
 80055e8:	69b3      	ldr	r3, [r6, #24]
 80055ea:	b913      	cbnz	r3, 80055f2 <__sfp+0x16>
 80055ec:	4630      	mov	r0, r6
 80055ee:	f7ff ffbd 	bl	800556c <__sinit>
 80055f2:	3648      	adds	r6, #72	; 0x48
 80055f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	d503      	bpl.n	8005604 <__sfp+0x28>
 80055fc:	6833      	ldr	r3, [r6, #0]
 80055fe:	b30b      	cbz	r3, 8005644 <__sfp+0x68>
 8005600:	6836      	ldr	r6, [r6, #0]
 8005602:	e7f7      	b.n	80055f4 <__sfp+0x18>
 8005604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005608:	b9d5      	cbnz	r5, 8005640 <__sfp+0x64>
 800560a:	4b16      	ldr	r3, [pc, #88]	; (8005664 <__sfp+0x88>)
 800560c:	60e3      	str	r3, [r4, #12]
 800560e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005612:	6665      	str	r5, [r4, #100]	; 0x64
 8005614:	f000 f859 	bl	80056ca <__retarget_lock_init_recursive>
 8005618:	f7ff ff96 	bl	8005548 <__sfp_lock_release>
 800561c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005620:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005624:	6025      	str	r5, [r4, #0]
 8005626:	61a5      	str	r5, [r4, #24]
 8005628:	2208      	movs	r2, #8
 800562a:	4629      	mov	r1, r5
 800562c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005630:	f7ff fc3e 	bl	8004eb0 <memset>
 8005634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800563c:	4620      	mov	r0, r4
 800563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005640:	3468      	adds	r4, #104	; 0x68
 8005642:	e7d9      	b.n	80055f8 <__sfp+0x1c>
 8005644:	2104      	movs	r1, #4
 8005646:	4638      	mov	r0, r7
 8005648:	f7ff ff62 	bl	8005510 <__sfmoreglue>
 800564c:	4604      	mov	r4, r0
 800564e:	6030      	str	r0, [r6, #0]
 8005650:	2800      	cmp	r0, #0
 8005652:	d1d5      	bne.n	8005600 <__sfp+0x24>
 8005654:	f7ff ff78 	bl	8005548 <__sfp_lock_release>
 8005658:	230c      	movs	r3, #12
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	e7ee      	b.n	800563c <__sfp+0x60>
 800565e:	bf00      	nop
 8005660:	08006208 	.word	0x08006208
 8005664:	ffff0001 	.word	0xffff0001

08005668 <fiprintf>:
 8005668:	b40e      	push	{r1, r2, r3}
 800566a:	b503      	push	{r0, r1, lr}
 800566c:	4601      	mov	r1, r0
 800566e:	ab03      	add	r3, sp, #12
 8005670:	4805      	ldr	r0, [pc, #20]	; (8005688 <fiprintf+0x20>)
 8005672:	f853 2b04 	ldr.w	r2, [r3], #4
 8005676:	6800      	ldr	r0, [r0, #0]
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	f000 f9a1 	bl	80059c0 <_vfiprintf_r>
 800567e:	b002      	add	sp, #8
 8005680:	f85d eb04 	ldr.w	lr, [sp], #4
 8005684:	b003      	add	sp, #12
 8005686:	4770      	bx	lr
 8005688:	20000010 	.word	0x20000010

0800568c <_fwalk_reent>:
 800568c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005690:	4606      	mov	r6, r0
 8005692:	4688      	mov	r8, r1
 8005694:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005698:	2700      	movs	r7, #0
 800569a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800569e:	f1b9 0901 	subs.w	r9, r9, #1
 80056a2:	d505      	bpl.n	80056b0 <_fwalk_reent+0x24>
 80056a4:	6824      	ldr	r4, [r4, #0]
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	d1f7      	bne.n	800569a <_fwalk_reent+0xe>
 80056aa:	4638      	mov	r0, r7
 80056ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056b0:	89ab      	ldrh	r3, [r5, #12]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d907      	bls.n	80056c6 <_fwalk_reent+0x3a>
 80056b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056ba:	3301      	adds	r3, #1
 80056bc:	d003      	beq.n	80056c6 <_fwalk_reent+0x3a>
 80056be:	4629      	mov	r1, r5
 80056c0:	4630      	mov	r0, r6
 80056c2:	47c0      	blx	r8
 80056c4:	4307      	orrs	r7, r0
 80056c6:	3568      	adds	r5, #104	; 0x68
 80056c8:	e7e9      	b.n	800569e <_fwalk_reent+0x12>

080056ca <__retarget_lock_init_recursive>:
 80056ca:	4770      	bx	lr

080056cc <__retarget_lock_acquire_recursive>:
 80056cc:	4770      	bx	lr

080056ce <__retarget_lock_release_recursive>:
 80056ce:	4770      	bx	lr

080056d0 <__swhatbuf_r>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	460e      	mov	r6, r1
 80056d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d8:	2900      	cmp	r1, #0
 80056da:	b096      	sub	sp, #88	; 0x58
 80056dc:	4614      	mov	r4, r2
 80056de:	461d      	mov	r5, r3
 80056e0:	da08      	bge.n	80056f4 <__swhatbuf_r+0x24>
 80056e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	602a      	str	r2, [r5, #0]
 80056ea:	061a      	lsls	r2, r3, #24
 80056ec:	d410      	bmi.n	8005710 <__swhatbuf_r+0x40>
 80056ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056f2:	e00e      	b.n	8005712 <__swhatbuf_r+0x42>
 80056f4:	466a      	mov	r2, sp
 80056f6:	f000 fca5 	bl	8006044 <_fstat_r>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	dbf1      	blt.n	80056e2 <__swhatbuf_r+0x12>
 80056fe:	9a01      	ldr	r2, [sp, #4]
 8005700:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005704:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005708:	425a      	negs	r2, r3
 800570a:	415a      	adcs	r2, r3
 800570c:	602a      	str	r2, [r5, #0]
 800570e:	e7ee      	b.n	80056ee <__swhatbuf_r+0x1e>
 8005710:	2340      	movs	r3, #64	; 0x40
 8005712:	2000      	movs	r0, #0
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	b016      	add	sp, #88	; 0x58
 8005718:	bd70      	pop	{r4, r5, r6, pc}
	...

0800571c <__smakebuf_r>:
 800571c:	898b      	ldrh	r3, [r1, #12]
 800571e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005720:	079d      	lsls	r5, r3, #30
 8005722:	4606      	mov	r6, r0
 8005724:	460c      	mov	r4, r1
 8005726:	d507      	bpl.n	8005738 <__smakebuf_r+0x1c>
 8005728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	6123      	str	r3, [r4, #16]
 8005730:	2301      	movs	r3, #1
 8005732:	6163      	str	r3, [r4, #20]
 8005734:	b002      	add	sp, #8
 8005736:	bd70      	pop	{r4, r5, r6, pc}
 8005738:	ab01      	add	r3, sp, #4
 800573a:	466a      	mov	r2, sp
 800573c:	f7ff ffc8 	bl	80056d0 <__swhatbuf_r>
 8005740:	9900      	ldr	r1, [sp, #0]
 8005742:	4605      	mov	r5, r0
 8005744:	4630      	mov	r0, r6
 8005746:	f000 f89d 	bl	8005884 <_malloc_r>
 800574a:	b948      	cbnz	r0, 8005760 <__smakebuf_r+0x44>
 800574c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005750:	059a      	lsls	r2, r3, #22
 8005752:	d4ef      	bmi.n	8005734 <__smakebuf_r+0x18>
 8005754:	f023 0303 	bic.w	r3, r3, #3
 8005758:	f043 0302 	orr.w	r3, r3, #2
 800575c:	81a3      	strh	r3, [r4, #12]
 800575e:	e7e3      	b.n	8005728 <__smakebuf_r+0xc>
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <__smakebuf_r+0x7c>)
 8005762:	62b3      	str	r3, [r6, #40]	; 0x28
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	6020      	str	r0, [r4, #0]
 8005768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576c:	81a3      	strh	r3, [r4, #12]
 800576e:	9b00      	ldr	r3, [sp, #0]
 8005770:	6163      	str	r3, [r4, #20]
 8005772:	9b01      	ldr	r3, [sp, #4]
 8005774:	6120      	str	r0, [r4, #16]
 8005776:	b15b      	cbz	r3, 8005790 <__smakebuf_r+0x74>
 8005778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800577c:	4630      	mov	r0, r6
 800577e:	f000 fc73 	bl	8006068 <_isatty_r>
 8005782:	b128      	cbz	r0, 8005790 <__smakebuf_r+0x74>
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	81a3      	strh	r3, [r4, #12]
 8005790:	89a0      	ldrh	r0, [r4, #12]
 8005792:	4305      	orrs	r5, r0
 8005794:	81a5      	strh	r5, [r4, #12]
 8005796:	e7cd      	b.n	8005734 <__smakebuf_r+0x18>
 8005798:	08005505 	.word	0x08005505

0800579c <malloc>:
 800579c:	4b02      	ldr	r3, [pc, #8]	; (80057a8 <malloc+0xc>)
 800579e:	4601      	mov	r1, r0
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	f000 b86f 	b.w	8005884 <_malloc_r>
 80057a6:	bf00      	nop
 80057a8:	20000010 	.word	0x20000010

080057ac <_free_r>:
 80057ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057ae:	2900      	cmp	r1, #0
 80057b0:	d044      	beq.n	800583c <_free_r+0x90>
 80057b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057b6:	9001      	str	r0, [sp, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f1a1 0404 	sub.w	r4, r1, #4
 80057be:	bfb8      	it	lt
 80057c0:	18e4      	addlt	r4, r4, r3
 80057c2:	f000 fc73 	bl	80060ac <__malloc_lock>
 80057c6:	4a1e      	ldr	r2, [pc, #120]	; (8005840 <_free_r+0x94>)
 80057c8:	9801      	ldr	r0, [sp, #4]
 80057ca:	6813      	ldr	r3, [r2, #0]
 80057cc:	b933      	cbnz	r3, 80057dc <_free_r+0x30>
 80057ce:	6063      	str	r3, [r4, #4]
 80057d0:	6014      	str	r4, [r2, #0]
 80057d2:	b003      	add	sp, #12
 80057d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057d8:	f000 bc6e 	b.w	80060b8 <__malloc_unlock>
 80057dc:	42a3      	cmp	r3, r4
 80057de:	d908      	bls.n	80057f2 <_free_r+0x46>
 80057e0:	6825      	ldr	r5, [r4, #0]
 80057e2:	1961      	adds	r1, r4, r5
 80057e4:	428b      	cmp	r3, r1
 80057e6:	bf01      	itttt	eq
 80057e8:	6819      	ldreq	r1, [r3, #0]
 80057ea:	685b      	ldreq	r3, [r3, #4]
 80057ec:	1949      	addeq	r1, r1, r5
 80057ee:	6021      	streq	r1, [r4, #0]
 80057f0:	e7ed      	b.n	80057ce <_free_r+0x22>
 80057f2:	461a      	mov	r2, r3
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	b10b      	cbz	r3, 80057fc <_free_r+0x50>
 80057f8:	42a3      	cmp	r3, r4
 80057fa:	d9fa      	bls.n	80057f2 <_free_r+0x46>
 80057fc:	6811      	ldr	r1, [r2, #0]
 80057fe:	1855      	adds	r5, r2, r1
 8005800:	42a5      	cmp	r5, r4
 8005802:	d10b      	bne.n	800581c <_free_r+0x70>
 8005804:	6824      	ldr	r4, [r4, #0]
 8005806:	4421      	add	r1, r4
 8005808:	1854      	adds	r4, r2, r1
 800580a:	42a3      	cmp	r3, r4
 800580c:	6011      	str	r1, [r2, #0]
 800580e:	d1e0      	bne.n	80057d2 <_free_r+0x26>
 8005810:	681c      	ldr	r4, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	6053      	str	r3, [r2, #4]
 8005816:	4421      	add	r1, r4
 8005818:	6011      	str	r1, [r2, #0]
 800581a:	e7da      	b.n	80057d2 <_free_r+0x26>
 800581c:	d902      	bls.n	8005824 <_free_r+0x78>
 800581e:	230c      	movs	r3, #12
 8005820:	6003      	str	r3, [r0, #0]
 8005822:	e7d6      	b.n	80057d2 <_free_r+0x26>
 8005824:	6825      	ldr	r5, [r4, #0]
 8005826:	1961      	adds	r1, r4, r5
 8005828:	428b      	cmp	r3, r1
 800582a:	bf04      	itt	eq
 800582c:	6819      	ldreq	r1, [r3, #0]
 800582e:	685b      	ldreq	r3, [r3, #4]
 8005830:	6063      	str	r3, [r4, #4]
 8005832:	bf04      	itt	eq
 8005834:	1949      	addeq	r1, r1, r5
 8005836:	6021      	streq	r1, [r4, #0]
 8005838:	6054      	str	r4, [r2, #4]
 800583a:	e7ca      	b.n	80057d2 <_free_r+0x26>
 800583c:	b003      	add	sp, #12
 800583e:	bd30      	pop	{r4, r5, pc}
 8005840:	200001d8 	.word	0x200001d8

08005844 <sbrk_aligned>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	4e0e      	ldr	r6, [pc, #56]	; (8005880 <sbrk_aligned+0x3c>)
 8005848:	460c      	mov	r4, r1
 800584a:	6831      	ldr	r1, [r6, #0]
 800584c:	4605      	mov	r5, r0
 800584e:	b911      	cbnz	r1, 8005856 <sbrk_aligned+0x12>
 8005850:	f000 fb7a 	bl	8005f48 <_sbrk_r>
 8005854:	6030      	str	r0, [r6, #0]
 8005856:	4621      	mov	r1, r4
 8005858:	4628      	mov	r0, r5
 800585a:	f000 fb75 	bl	8005f48 <_sbrk_r>
 800585e:	1c43      	adds	r3, r0, #1
 8005860:	d00a      	beq.n	8005878 <sbrk_aligned+0x34>
 8005862:	1cc4      	adds	r4, r0, #3
 8005864:	f024 0403 	bic.w	r4, r4, #3
 8005868:	42a0      	cmp	r0, r4
 800586a:	d007      	beq.n	800587c <sbrk_aligned+0x38>
 800586c:	1a21      	subs	r1, r4, r0
 800586e:	4628      	mov	r0, r5
 8005870:	f000 fb6a 	bl	8005f48 <_sbrk_r>
 8005874:	3001      	adds	r0, #1
 8005876:	d101      	bne.n	800587c <sbrk_aligned+0x38>
 8005878:	f04f 34ff 	mov.w	r4, #4294967295
 800587c:	4620      	mov	r0, r4
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	200001dc 	.word	0x200001dc

08005884 <_malloc_r>:
 8005884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005888:	1ccd      	adds	r5, r1, #3
 800588a:	f025 0503 	bic.w	r5, r5, #3
 800588e:	3508      	adds	r5, #8
 8005890:	2d0c      	cmp	r5, #12
 8005892:	bf38      	it	cc
 8005894:	250c      	movcc	r5, #12
 8005896:	2d00      	cmp	r5, #0
 8005898:	4607      	mov	r7, r0
 800589a:	db01      	blt.n	80058a0 <_malloc_r+0x1c>
 800589c:	42a9      	cmp	r1, r5
 800589e:	d905      	bls.n	80058ac <_malloc_r+0x28>
 80058a0:	230c      	movs	r3, #12
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	2600      	movs	r6, #0
 80058a6:	4630      	mov	r0, r6
 80058a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ac:	4e2e      	ldr	r6, [pc, #184]	; (8005968 <_malloc_r+0xe4>)
 80058ae:	f000 fbfd 	bl	80060ac <__malloc_lock>
 80058b2:	6833      	ldr	r3, [r6, #0]
 80058b4:	461c      	mov	r4, r3
 80058b6:	bb34      	cbnz	r4, 8005906 <_malloc_r+0x82>
 80058b8:	4629      	mov	r1, r5
 80058ba:	4638      	mov	r0, r7
 80058bc:	f7ff ffc2 	bl	8005844 <sbrk_aligned>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	4604      	mov	r4, r0
 80058c4:	d14d      	bne.n	8005962 <_malloc_r+0xde>
 80058c6:	6834      	ldr	r4, [r6, #0]
 80058c8:	4626      	mov	r6, r4
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	d140      	bne.n	8005950 <_malloc_r+0xcc>
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	4631      	mov	r1, r6
 80058d2:	4638      	mov	r0, r7
 80058d4:	eb04 0803 	add.w	r8, r4, r3
 80058d8:	f000 fb36 	bl	8005f48 <_sbrk_r>
 80058dc:	4580      	cmp	r8, r0
 80058de:	d13a      	bne.n	8005956 <_malloc_r+0xd2>
 80058e0:	6821      	ldr	r1, [r4, #0]
 80058e2:	3503      	adds	r5, #3
 80058e4:	1a6d      	subs	r5, r5, r1
 80058e6:	f025 0503 	bic.w	r5, r5, #3
 80058ea:	3508      	adds	r5, #8
 80058ec:	2d0c      	cmp	r5, #12
 80058ee:	bf38      	it	cc
 80058f0:	250c      	movcc	r5, #12
 80058f2:	4629      	mov	r1, r5
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff ffa5 	bl	8005844 <sbrk_aligned>
 80058fa:	3001      	adds	r0, #1
 80058fc:	d02b      	beq.n	8005956 <_malloc_r+0xd2>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	442b      	add	r3, r5
 8005902:	6023      	str	r3, [r4, #0]
 8005904:	e00e      	b.n	8005924 <_malloc_r+0xa0>
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	1b52      	subs	r2, r2, r5
 800590a:	d41e      	bmi.n	800594a <_malloc_r+0xc6>
 800590c:	2a0b      	cmp	r2, #11
 800590e:	d916      	bls.n	800593e <_malloc_r+0xba>
 8005910:	1961      	adds	r1, r4, r5
 8005912:	42a3      	cmp	r3, r4
 8005914:	6025      	str	r5, [r4, #0]
 8005916:	bf18      	it	ne
 8005918:	6059      	strne	r1, [r3, #4]
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	bf08      	it	eq
 800591e:	6031      	streq	r1, [r6, #0]
 8005920:	5162      	str	r2, [r4, r5]
 8005922:	604b      	str	r3, [r1, #4]
 8005924:	4638      	mov	r0, r7
 8005926:	f104 060b 	add.w	r6, r4, #11
 800592a:	f000 fbc5 	bl	80060b8 <__malloc_unlock>
 800592e:	f026 0607 	bic.w	r6, r6, #7
 8005932:	1d23      	adds	r3, r4, #4
 8005934:	1af2      	subs	r2, r6, r3
 8005936:	d0b6      	beq.n	80058a6 <_malloc_r+0x22>
 8005938:	1b9b      	subs	r3, r3, r6
 800593a:	50a3      	str	r3, [r4, r2]
 800593c:	e7b3      	b.n	80058a6 <_malloc_r+0x22>
 800593e:	6862      	ldr	r2, [r4, #4]
 8005940:	42a3      	cmp	r3, r4
 8005942:	bf0c      	ite	eq
 8005944:	6032      	streq	r2, [r6, #0]
 8005946:	605a      	strne	r2, [r3, #4]
 8005948:	e7ec      	b.n	8005924 <_malloc_r+0xa0>
 800594a:	4623      	mov	r3, r4
 800594c:	6864      	ldr	r4, [r4, #4]
 800594e:	e7b2      	b.n	80058b6 <_malloc_r+0x32>
 8005950:	4634      	mov	r4, r6
 8005952:	6876      	ldr	r6, [r6, #4]
 8005954:	e7b9      	b.n	80058ca <_malloc_r+0x46>
 8005956:	230c      	movs	r3, #12
 8005958:	603b      	str	r3, [r7, #0]
 800595a:	4638      	mov	r0, r7
 800595c:	f000 fbac 	bl	80060b8 <__malloc_unlock>
 8005960:	e7a1      	b.n	80058a6 <_malloc_r+0x22>
 8005962:	6025      	str	r5, [r4, #0]
 8005964:	e7de      	b.n	8005924 <_malloc_r+0xa0>
 8005966:	bf00      	nop
 8005968:	200001d8 	.word	0x200001d8

0800596c <__sfputc_r>:
 800596c:	6893      	ldr	r3, [r2, #8]
 800596e:	3b01      	subs	r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	b410      	push	{r4}
 8005974:	6093      	str	r3, [r2, #8]
 8005976:	da08      	bge.n	800598a <__sfputc_r+0x1e>
 8005978:	6994      	ldr	r4, [r2, #24]
 800597a:	42a3      	cmp	r3, r4
 800597c:	db01      	blt.n	8005982 <__sfputc_r+0x16>
 800597e:	290a      	cmp	r1, #10
 8005980:	d103      	bne.n	800598a <__sfputc_r+0x1e>
 8005982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005986:	f7ff bbf9 	b.w	800517c <__swbuf_r>
 800598a:	6813      	ldr	r3, [r2, #0]
 800598c:	1c58      	adds	r0, r3, #1
 800598e:	6010      	str	r0, [r2, #0]
 8005990:	7019      	strb	r1, [r3, #0]
 8005992:	4608      	mov	r0, r1
 8005994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005998:	4770      	bx	lr

0800599a <__sfputs_r>:
 800599a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599c:	4606      	mov	r6, r0
 800599e:	460f      	mov	r7, r1
 80059a0:	4614      	mov	r4, r2
 80059a2:	18d5      	adds	r5, r2, r3
 80059a4:	42ac      	cmp	r4, r5
 80059a6:	d101      	bne.n	80059ac <__sfputs_r+0x12>
 80059a8:	2000      	movs	r0, #0
 80059aa:	e007      	b.n	80059bc <__sfputs_r+0x22>
 80059ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b0:	463a      	mov	r2, r7
 80059b2:	4630      	mov	r0, r6
 80059b4:	f7ff ffda 	bl	800596c <__sfputc_r>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d1f3      	bne.n	80059a4 <__sfputs_r+0xa>
 80059bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059c0 <_vfiprintf_r>:
 80059c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	460d      	mov	r5, r1
 80059c6:	b09d      	sub	sp, #116	; 0x74
 80059c8:	4614      	mov	r4, r2
 80059ca:	4698      	mov	r8, r3
 80059cc:	4606      	mov	r6, r0
 80059ce:	b118      	cbz	r0, 80059d8 <_vfiprintf_r+0x18>
 80059d0:	6983      	ldr	r3, [r0, #24]
 80059d2:	b90b      	cbnz	r3, 80059d8 <_vfiprintf_r+0x18>
 80059d4:	f7ff fdca 	bl	800556c <__sinit>
 80059d8:	4b89      	ldr	r3, [pc, #548]	; (8005c00 <_vfiprintf_r+0x240>)
 80059da:	429d      	cmp	r5, r3
 80059dc:	d11b      	bne.n	8005a16 <_vfiprintf_r+0x56>
 80059de:	6875      	ldr	r5, [r6, #4]
 80059e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059e2:	07d9      	lsls	r1, r3, #31
 80059e4:	d405      	bmi.n	80059f2 <_vfiprintf_r+0x32>
 80059e6:	89ab      	ldrh	r3, [r5, #12]
 80059e8:	059a      	lsls	r2, r3, #22
 80059ea:	d402      	bmi.n	80059f2 <_vfiprintf_r+0x32>
 80059ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ee:	f7ff fe6d 	bl	80056cc <__retarget_lock_acquire_recursive>
 80059f2:	89ab      	ldrh	r3, [r5, #12]
 80059f4:	071b      	lsls	r3, r3, #28
 80059f6:	d501      	bpl.n	80059fc <_vfiprintf_r+0x3c>
 80059f8:	692b      	ldr	r3, [r5, #16]
 80059fa:	b9eb      	cbnz	r3, 8005a38 <_vfiprintf_r+0x78>
 80059fc:	4629      	mov	r1, r5
 80059fe:	4630      	mov	r0, r6
 8005a00:	f7ff fc0e 	bl	8005220 <__swsetup_r>
 8005a04:	b1c0      	cbz	r0, 8005a38 <_vfiprintf_r+0x78>
 8005a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a08:	07dc      	lsls	r4, r3, #31
 8005a0a:	d50e      	bpl.n	8005a2a <_vfiprintf_r+0x6a>
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	b01d      	add	sp, #116	; 0x74
 8005a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a16:	4b7b      	ldr	r3, [pc, #492]	; (8005c04 <_vfiprintf_r+0x244>)
 8005a18:	429d      	cmp	r5, r3
 8005a1a:	d101      	bne.n	8005a20 <_vfiprintf_r+0x60>
 8005a1c:	68b5      	ldr	r5, [r6, #8]
 8005a1e:	e7df      	b.n	80059e0 <_vfiprintf_r+0x20>
 8005a20:	4b79      	ldr	r3, [pc, #484]	; (8005c08 <_vfiprintf_r+0x248>)
 8005a22:	429d      	cmp	r5, r3
 8005a24:	bf08      	it	eq
 8005a26:	68f5      	ldreq	r5, [r6, #12]
 8005a28:	e7da      	b.n	80059e0 <_vfiprintf_r+0x20>
 8005a2a:	89ab      	ldrh	r3, [r5, #12]
 8005a2c:	0598      	lsls	r0, r3, #22
 8005a2e:	d4ed      	bmi.n	8005a0c <_vfiprintf_r+0x4c>
 8005a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a32:	f7ff fe4c 	bl	80056ce <__retarget_lock_release_recursive>
 8005a36:	e7e9      	b.n	8005a0c <_vfiprintf_r+0x4c>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a3c:	2320      	movs	r3, #32
 8005a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a46:	2330      	movs	r3, #48	; 0x30
 8005a48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c0c <_vfiprintf_r+0x24c>
 8005a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a50:	f04f 0901 	mov.w	r9, #1
 8005a54:	4623      	mov	r3, r4
 8005a56:	469a      	mov	sl, r3
 8005a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a5c:	b10a      	cbz	r2, 8005a62 <_vfiprintf_r+0xa2>
 8005a5e:	2a25      	cmp	r2, #37	; 0x25
 8005a60:	d1f9      	bne.n	8005a56 <_vfiprintf_r+0x96>
 8005a62:	ebba 0b04 	subs.w	fp, sl, r4
 8005a66:	d00b      	beq.n	8005a80 <_vfiprintf_r+0xc0>
 8005a68:	465b      	mov	r3, fp
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f7ff ff93 	bl	800599a <__sfputs_r>
 8005a74:	3001      	adds	r0, #1
 8005a76:	f000 80aa 	beq.w	8005bce <_vfiprintf_r+0x20e>
 8005a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a7c:	445a      	add	r2, fp
 8005a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8005a80:	f89a 3000 	ldrb.w	r3, [sl]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80a2 	beq.w	8005bce <_vfiprintf_r+0x20e>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a94:	f10a 0a01 	add.w	sl, sl, #1
 8005a98:	9304      	str	r3, [sp, #16]
 8005a9a:	9307      	str	r3, [sp, #28]
 8005a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8005aa2:	4654      	mov	r4, sl
 8005aa4:	2205      	movs	r2, #5
 8005aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aaa:	4858      	ldr	r0, [pc, #352]	; (8005c0c <_vfiprintf_r+0x24c>)
 8005aac:	f7fa fba0 	bl	80001f0 <memchr>
 8005ab0:	9a04      	ldr	r2, [sp, #16]
 8005ab2:	b9d8      	cbnz	r0, 8005aec <_vfiprintf_r+0x12c>
 8005ab4:	06d1      	lsls	r1, r2, #27
 8005ab6:	bf44      	itt	mi
 8005ab8:	2320      	movmi	r3, #32
 8005aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005abe:	0713      	lsls	r3, r2, #28
 8005ac0:	bf44      	itt	mi
 8005ac2:	232b      	movmi	r3, #43	; 0x2b
 8005ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8005acc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ace:	d015      	beq.n	8005afc <_vfiprintf_r+0x13c>
 8005ad0:	9a07      	ldr	r2, [sp, #28]
 8005ad2:	4654      	mov	r4, sl
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f04f 0c0a 	mov.w	ip, #10
 8005ada:	4621      	mov	r1, r4
 8005adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ae0:	3b30      	subs	r3, #48	; 0x30
 8005ae2:	2b09      	cmp	r3, #9
 8005ae4:	d94e      	bls.n	8005b84 <_vfiprintf_r+0x1c4>
 8005ae6:	b1b0      	cbz	r0, 8005b16 <_vfiprintf_r+0x156>
 8005ae8:	9207      	str	r2, [sp, #28]
 8005aea:	e014      	b.n	8005b16 <_vfiprintf_r+0x156>
 8005aec:	eba0 0308 	sub.w	r3, r0, r8
 8005af0:	fa09 f303 	lsl.w	r3, r9, r3
 8005af4:	4313      	orrs	r3, r2
 8005af6:	9304      	str	r3, [sp, #16]
 8005af8:	46a2      	mov	sl, r4
 8005afa:	e7d2      	b.n	8005aa2 <_vfiprintf_r+0xe2>
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	1d19      	adds	r1, r3, #4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	9103      	str	r1, [sp, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	bfbb      	ittet	lt
 8005b08:	425b      	neglt	r3, r3
 8005b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b0e:	9307      	strge	r3, [sp, #28]
 8005b10:	9307      	strlt	r3, [sp, #28]
 8005b12:	bfb8      	it	lt
 8005b14:	9204      	strlt	r2, [sp, #16]
 8005b16:	7823      	ldrb	r3, [r4, #0]
 8005b18:	2b2e      	cmp	r3, #46	; 0x2e
 8005b1a:	d10c      	bne.n	8005b36 <_vfiprintf_r+0x176>
 8005b1c:	7863      	ldrb	r3, [r4, #1]
 8005b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b20:	d135      	bne.n	8005b8e <_vfiprintf_r+0x1ce>
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	1d1a      	adds	r2, r3, #4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	9203      	str	r2, [sp, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bfb8      	it	lt
 8005b2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b32:	3402      	adds	r4, #2
 8005b34:	9305      	str	r3, [sp, #20]
 8005b36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c1c <_vfiprintf_r+0x25c>
 8005b3a:	7821      	ldrb	r1, [r4, #0]
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	4650      	mov	r0, sl
 8005b40:	f7fa fb56 	bl	80001f0 <memchr>
 8005b44:	b140      	cbz	r0, 8005b58 <_vfiprintf_r+0x198>
 8005b46:	2340      	movs	r3, #64	; 0x40
 8005b48:	eba0 000a 	sub.w	r0, r0, sl
 8005b4c:	fa03 f000 	lsl.w	r0, r3, r0
 8005b50:	9b04      	ldr	r3, [sp, #16]
 8005b52:	4303      	orrs	r3, r0
 8005b54:	3401      	adds	r4, #1
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b5c:	482c      	ldr	r0, [pc, #176]	; (8005c10 <_vfiprintf_r+0x250>)
 8005b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b62:	2206      	movs	r2, #6
 8005b64:	f7fa fb44 	bl	80001f0 <memchr>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d03f      	beq.n	8005bec <_vfiprintf_r+0x22c>
 8005b6c:	4b29      	ldr	r3, [pc, #164]	; (8005c14 <_vfiprintf_r+0x254>)
 8005b6e:	bb1b      	cbnz	r3, 8005bb8 <_vfiprintf_r+0x1f8>
 8005b70:	9b03      	ldr	r3, [sp, #12]
 8005b72:	3307      	adds	r3, #7
 8005b74:	f023 0307 	bic.w	r3, r3, #7
 8005b78:	3308      	adds	r3, #8
 8005b7a:	9303      	str	r3, [sp, #12]
 8005b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7e:	443b      	add	r3, r7
 8005b80:	9309      	str	r3, [sp, #36]	; 0x24
 8005b82:	e767      	b.n	8005a54 <_vfiprintf_r+0x94>
 8005b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b88:	460c      	mov	r4, r1
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	e7a5      	b.n	8005ada <_vfiprintf_r+0x11a>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	3401      	adds	r4, #1
 8005b92:	9305      	str	r3, [sp, #20]
 8005b94:	4619      	mov	r1, r3
 8005b96:	f04f 0c0a 	mov.w	ip, #10
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ba0:	3a30      	subs	r2, #48	; 0x30
 8005ba2:	2a09      	cmp	r2, #9
 8005ba4:	d903      	bls.n	8005bae <_vfiprintf_r+0x1ee>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0c5      	beq.n	8005b36 <_vfiprintf_r+0x176>
 8005baa:	9105      	str	r1, [sp, #20]
 8005bac:	e7c3      	b.n	8005b36 <_vfiprintf_r+0x176>
 8005bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e7f0      	b.n	8005b9a <_vfiprintf_r+0x1da>
 8005bb8:	ab03      	add	r3, sp, #12
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	462a      	mov	r2, r5
 8005bbe:	4b16      	ldr	r3, [pc, #88]	; (8005c18 <_vfiprintf_r+0x258>)
 8005bc0:	a904      	add	r1, sp, #16
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f3af 8000 	nop.w
 8005bc8:	4607      	mov	r7, r0
 8005bca:	1c78      	adds	r0, r7, #1
 8005bcc:	d1d6      	bne.n	8005b7c <_vfiprintf_r+0x1bc>
 8005bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bd0:	07d9      	lsls	r1, r3, #31
 8005bd2:	d405      	bmi.n	8005be0 <_vfiprintf_r+0x220>
 8005bd4:	89ab      	ldrh	r3, [r5, #12]
 8005bd6:	059a      	lsls	r2, r3, #22
 8005bd8:	d402      	bmi.n	8005be0 <_vfiprintf_r+0x220>
 8005bda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bdc:	f7ff fd77 	bl	80056ce <__retarget_lock_release_recursive>
 8005be0:	89ab      	ldrh	r3, [r5, #12]
 8005be2:	065b      	lsls	r3, r3, #25
 8005be4:	f53f af12 	bmi.w	8005a0c <_vfiprintf_r+0x4c>
 8005be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bea:	e711      	b.n	8005a10 <_vfiprintf_r+0x50>
 8005bec:	ab03      	add	r3, sp, #12
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	462a      	mov	r2, r5
 8005bf2:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <_vfiprintf_r+0x258>)
 8005bf4:	a904      	add	r1, sp, #16
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	f000 f880 	bl	8005cfc <_printf_i>
 8005bfc:	e7e4      	b.n	8005bc8 <_vfiprintf_r+0x208>
 8005bfe:	bf00      	nop
 8005c00:	080063e0 	.word	0x080063e0
 8005c04:	08006400 	.word	0x08006400
 8005c08:	080063c0 	.word	0x080063c0
 8005c0c:	08006420 	.word	0x08006420
 8005c10:	0800642a 	.word	0x0800642a
 8005c14:	00000000 	.word	0x00000000
 8005c18:	0800599b 	.word	0x0800599b
 8005c1c:	08006426 	.word	0x08006426

08005c20 <_printf_common>:
 8005c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c24:	4616      	mov	r6, r2
 8005c26:	4699      	mov	r9, r3
 8005c28:	688a      	ldr	r2, [r1, #8]
 8005c2a:	690b      	ldr	r3, [r1, #16]
 8005c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c30:	4293      	cmp	r3, r2
 8005c32:	bfb8      	it	lt
 8005c34:	4613      	movlt	r3, r2
 8005c36:	6033      	str	r3, [r6, #0]
 8005c38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c3c:	4607      	mov	r7, r0
 8005c3e:	460c      	mov	r4, r1
 8005c40:	b10a      	cbz	r2, 8005c46 <_printf_common+0x26>
 8005c42:	3301      	adds	r3, #1
 8005c44:	6033      	str	r3, [r6, #0]
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	0699      	lsls	r1, r3, #26
 8005c4a:	bf42      	ittt	mi
 8005c4c:	6833      	ldrmi	r3, [r6, #0]
 8005c4e:	3302      	addmi	r3, #2
 8005c50:	6033      	strmi	r3, [r6, #0]
 8005c52:	6825      	ldr	r5, [r4, #0]
 8005c54:	f015 0506 	ands.w	r5, r5, #6
 8005c58:	d106      	bne.n	8005c68 <_printf_common+0x48>
 8005c5a:	f104 0a19 	add.w	sl, r4, #25
 8005c5e:	68e3      	ldr	r3, [r4, #12]
 8005c60:	6832      	ldr	r2, [r6, #0]
 8005c62:	1a9b      	subs	r3, r3, r2
 8005c64:	42ab      	cmp	r3, r5
 8005c66:	dc26      	bgt.n	8005cb6 <_printf_common+0x96>
 8005c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c6c:	1e13      	subs	r3, r2, #0
 8005c6e:	6822      	ldr	r2, [r4, #0]
 8005c70:	bf18      	it	ne
 8005c72:	2301      	movne	r3, #1
 8005c74:	0692      	lsls	r2, r2, #26
 8005c76:	d42b      	bmi.n	8005cd0 <_printf_common+0xb0>
 8005c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	4638      	mov	r0, r7
 8005c80:	47c0      	blx	r8
 8005c82:	3001      	adds	r0, #1
 8005c84:	d01e      	beq.n	8005cc4 <_printf_common+0xa4>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	68e5      	ldr	r5, [r4, #12]
 8005c8a:	6832      	ldr	r2, [r6, #0]
 8005c8c:	f003 0306 	and.w	r3, r3, #6
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	bf08      	it	eq
 8005c94:	1aad      	subeq	r5, r5, r2
 8005c96:	68a3      	ldr	r3, [r4, #8]
 8005c98:	6922      	ldr	r2, [r4, #16]
 8005c9a:	bf0c      	ite	eq
 8005c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ca0:	2500      	movne	r5, #0
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	bfc4      	itt	gt
 8005ca6:	1a9b      	subgt	r3, r3, r2
 8005ca8:	18ed      	addgt	r5, r5, r3
 8005caa:	2600      	movs	r6, #0
 8005cac:	341a      	adds	r4, #26
 8005cae:	42b5      	cmp	r5, r6
 8005cb0:	d11a      	bne.n	8005ce8 <_printf_common+0xc8>
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	e008      	b.n	8005cc8 <_printf_common+0xa8>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4652      	mov	r2, sl
 8005cba:	4649      	mov	r1, r9
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	47c0      	blx	r8
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d103      	bne.n	8005ccc <_printf_common+0xac>
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ccc:	3501      	adds	r5, #1
 8005cce:	e7c6      	b.n	8005c5e <_printf_common+0x3e>
 8005cd0:	18e1      	adds	r1, r4, r3
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	2030      	movs	r0, #48	; 0x30
 8005cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cda:	4422      	add	r2, r4
 8005cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ce4:	3302      	adds	r3, #2
 8005ce6:	e7c7      	b.n	8005c78 <_printf_common+0x58>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	4622      	mov	r2, r4
 8005cec:	4649      	mov	r1, r9
 8005cee:	4638      	mov	r0, r7
 8005cf0:	47c0      	blx	r8
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d0e6      	beq.n	8005cc4 <_printf_common+0xa4>
 8005cf6:	3601      	adds	r6, #1
 8005cf8:	e7d9      	b.n	8005cae <_printf_common+0x8e>
	...

08005cfc <_printf_i>:
 8005cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d00:	7e0f      	ldrb	r7, [r1, #24]
 8005d02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d04:	2f78      	cmp	r7, #120	; 0x78
 8005d06:	4691      	mov	r9, r2
 8005d08:	4680      	mov	r8, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	469a      	mov	sl, r3
 8005d0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d12:	d807      	bhi.n	8005d24 <_printf_i+0x28>
 8005d14:	2f62      	cmp	r7, #98	; 0x62
 8005d16:	d80a      	bhi.n	8005d2e <_printf_i+0x32>
 8005d18:	2f00      	cmp	r7, #0
 8005d1a:	f000 80d8 	beq.w	8005ece <_printf_i+0x1d2>
 8005d1e:	2f58      	cmp	r7, #88	; 0x58
 8005d20:	f000 80a3 	beq.w	8005e6a <_printf_i+0x16e>
 8005d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d2c:	e03a      	b.n	8005da4 <_printf_i+0xa8>
 8005d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d32:	2b15      	cmp	r3, #21
 8005d34:	d8f6      	bhi.n	8005d24 <_printf_i+0x28>
 8005d36:	a101      	add	r1, pc, #4	; (adr r1, 8005d3c <_printf_i+0x40>)
 8005d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d3c:	08005d95 	.word	0x08005d95
 8005d40:	08005da9 	.word	0x08005da9
 8005d44:	08005d25 	.word	0x08005d25
 8005d48:	08005d25 	.word	0x08005d25
 8005d4c:	08005d25 	.word	0x08005d25
 8005d50:	08005d25 	.word	0x08005d25
 8005d54:	08005da9 	.word	0x08005da9
 8005d58:	08005d25 	.word	0x08005d25
 8005d5c:	08005d25 	.word	0x08005d25
 8005d60:	08005d25 	.word	0x08005d25
 8005d64:	08005d25 	.word	0x08005d25
 8005d68:	08005eb5 	.word	0x08005eb5
 8005d6c:	08005dd9 	.word	0x08005dd9
 8005d70:	08005e97 	.word	0x08005e97
 8005d74:	08005d25 	.word	0x08005d25
 8005d78:	08005d25 	.word	0x08005d25
 8005d7c:	08005ed7 	.word	0x08005ed7
 8005d80:	08005d25 	.word	0x08005d25
 8005d84:	08005dd9 	.word	0x08005dd9
 8005d88:	08005d25 	.word	0x08005d25
 8005d8c:	08005d25 	.word	0x08005d25
 8005d90:	08005e9f 	.word	0x08005e9f
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	1d1a      	adds	r2, r3, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	602a      	str	r2, [r5, #0]
 8005d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005da4:	2301      	movs	r3, #1
 8005da6:	e0a3      	b.n	8005ef0 <_printf_i+0x1f4>
 8005da8:	6820      	ldr	r0, [r4, #0]
 8005daa:	6829      	ldr	r1, [r5, #0]
 8005dac:	0606      	lsls	r6, r0, #24
 8005dae:	f101 0304 	add.w	r3, r1, #4
 8005db2:	d50a      	bpl.n	8005dca <_printf_i+0xce>
 8005db4:	680e      	ldr	r6, [r1, #0]
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	2e00      	cmp	r6, #0
 8005dba:	da03      	bge.n	8005dc4 <_printf_i+0xc8>
 8005dbc:	232d      	movs	r3, #45	; 0x2d
 8005dbe:	4276      	negs	r6, r6
 8005dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dc4:	485e      	ldr	r0, [pc, #376]	; (8005f40 <_printf_i+0x244>)
 8005dc6:	230a      	movs	r3, #10
 8005dc8:	e019      	b.n	8005dfe <_printf_i+0x102>
 8005dca:	680e      	ldr	r6, [r1, #0]
 8005dcc:	602b      	str	r3, [r5, #0]
 8005dce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dd2:	bf18      	it	ne
 8005dd4:	b236      	sxthne	r6, r6
 8005dd6:	e7ef      	b.n	8005db8 <_printf_i+0xbc>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	6820      	ldr	r0, [r4, #0]
 8005ddc:	1d19      	adds	r1, r3, #4
 8005dde:	6029      	str	r1, [r5, #0]
 8005de0:	0601      	lsls	r1, r0, #24
 8005de2:	d501      	bpl.n	8005de8 <_printf_i+0xec>
 8005de4:	681e      	ldr	r6, [r3, #0]
 8005de6:	e002      	b.n	8005dee <_printf_i+0xf2>
 8005de8:	0646      	lsls	r6, r0, #25
 8005dea:	d5fb      	bpl.n	8005de4 <_printf_i+0xe8>
 8005dec:	881e      	ldrh	r6, [r3, #0]
 8005dee:	4854      	ldr	r0, [pc, #336]	; (8005f40 <_printf_i+0x244>)
 8005df0:	2f6f      	cmp	r7, #111	; 0x6f
 8005df2:	bf0c      	ite	eq
 8005df4:	2308      	moveq	r3, #8
 8005df6:	230a      	movne	r3, #10
 8005df8:	2100      	movs	r1, #0
 8005dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dfe:	6865      	ldr	r5, [r4, #4]
 8005e00:	60a5      	str	r5, [r4, #8]
 8005e02:	2d00      	cmp	r5, #0
 8005e04:	bfa2      	ittt	ge
 8005e06:	6821      	ldrge	r1, [r4, #0]
 8005e08:	f021 0104 	bicge.w	r1, r1, #4
 8005e0c:	6021      	strge	r1, [r4, #0]
 8005e0e:	b90e      	cbnz	r6, 8005e14 <_printf_i+0x118>
 8005e10:	2d00      	cmp	r5, #0
 8005e12:	d04d      	beq.n	8005eb0 <_printf_i+0x1b4>
 8005e14:	4615      	mov	r5, r2
 8005e16:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e1a:	fb03 6711 	mls	r7, r3, r1, r6
 8005e1e:	5dc7      	ldrb	r7, [r0, r7]
 8005e20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e24:	4637      	mov	r7, r6
 8005e26:	42bb      	cmp	r3, r7
 8005e28:	460e      	mov	r6, r1
 8005e2a:	d9f4      	bls.n	8005e16 <_printf_i+0x11a>
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d10b      	bne.n	8005e48 <_printf_i+0x14c>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	07de      	lsls	r6, r3, #31
 8005e34:	d508      	bpl.n	8005e48 <_printf_i+0x14c>
 8005e36:	6923      	ldr	r3, [r4, #16]
 8005e38:	6861      	ldr	r1, [r4, #4]
 8005e3a:	4299      	cmp	r1, r3
 8005e3c:	bfde      	ittt	le
 8005e3e:	2330      	movle	r3, #48	; 0x30
 8005e40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e48:	1b52      	subs	r2, r2, r5
 8005e4a:	6122      	str	r2, [r4, #16]
 8005e4c:	f8cd a000 	str.w	sl, [sp]
 8005e50:	464b      	mov	r3, r9
 8005e52:	aa03      	add	r2, sp, #12
 8005e54:	4621      	mov	r1, r4
 8005e56:	4640      	mov	r0, r8
 8005e58:	f7ff fee2 	bl	8005c20 <_printf_common>
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d14c      	bne.n	8005efa <_printf_i+0x1fe>
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	b004      	add	sp, #16
 8005e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e6a:	4835      	ldr	r0, [pc, #212]	; (8005f40 <_printf_i+0x244>)
 8005e6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e70:	6829      	ldr	r1, [r5, #0]
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e78:	6029      	str	r1, [r5, #0]
 8005e7a:	061d      	lsls	r5, r3, #24
 8005e7c:	d514      	bpl.n	8005ea8 <_printf_i+0x1ac>
 8005e7e:	07df      	lsls	r7, r3, #31
 8005e80:	bf44      	itt	mi
 8005e82:	f043 0320 	orrmi.w	r3, r3, #32
 8005e86:	6023      	strmi	r3, [r4, #0]
 8005e88:	b91e      	cbnz	r6, 8005e92 <_printf_i+0x196>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	f023 0320 	bic.w	r3, r3, #32
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	2310      	movs	r3, #16
 8005e94:	e7b0      	b.n	8005df8 <_printf_i+0xfc>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	f043 0320 	orr.w	r3, r3, #32
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	2378      	movs	r3, #120	; 0x78
 8005ea0:	4828      	ldr	r0, [pc, #160]	; (8005f44 <_printf_i+0x248>)
 8005ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ea6:	e7e3      	b.n	8005e70 <_printf_i+0x174>
 8005ea8:	0659      	lsls	r1, r3, #25
 8005eaa:	bf48      	it	mi
 8005eac:	b2b6      	uxthmi	r6, r6
 8005eae:	e7e6      	b.n	8005e7e <_printf_i+0x182>
 8005eb0:	4615      	mov	r5, r2
 8005eb2:	e7bb      	b.n	8005e2c <_printf_i+0x130>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	6826      	ldr	r6, [r4, #0]
 8005eb8:	6961      	ldr	r1, [r4, #20]
 8005eba:	1d18      	adds	r0, r3, #4
 8005ebc:	6028      	str	r0, [r5, #0]
 8005ebe:	0635      	lsls	r5, r6, #24
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	d501      	bpl.n	8005ec8 <_printf_i+0x1cc>
 8005ec4:	6019      	str	r1, [r3, #0]
 8005ec6:	e002      	b.n	8005ece <_printf_i+0x1d2>
 8005ec8:	0670      	lsls	r0, r6, #25
 8005eca:	d5fb      	bpl.n	8005ec4 <_printf_i+0x1c8>
 8005ecc:	8019      	strh	r1, [r3, #0]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	6123      	str	r3, [r4, #16]
 8005ed2:	4615      	mov	r5, r2
 8005ed4:	e7ba      	b.n	8005e4c <_printf_i+0x150>
 8005ed6:	682b      	ldr	r3, [r5, #0]
 8005ed8:	1d1a      	adds	r2, r3, #4
 8005eda:	602a      	str	r2, [r5, #0]
 8005edc:	681d      	ldr	r5, [r3, #0]
 8005ede:	6862      	ldr	r2, [r4, #4]
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f7fa f984 	bl	80001f0 <memchr>
 8005ee8:	b108      	cbz	r0, 8005eee <_printf_i+0x1f2>
 8005eea:	1b40      	subs	r0, r0, r5
 8005eec:	6060      	str	r0, [r4, #4]
 8005eee:	6863      	ldr	r3, [r4, #4]
 8005ef0:	6123      	str	r3, [r4, #16]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ef8:	e7a8      	b.n	8005e4c <_printf_i+0x150>
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	462a      	mov	r2, r5
 8005efe:	4649      	mov	r1, r9
 8005f00:	4640      	mov	r0, r8
 8005f02:	47d0      	blx	sl
 8005f04:	3001      	adds	r0, #1
 8005f06:	d0ab      	beq.n	8005e60 <_printf_i+0x164>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	079b      	lsls	r3, r3, #30
 8005f0c:	d413      	bmi.n	8005f36 <_printf_i+0x23a>
 8005f0e:	68e0      	ldr	r0, [r4, #12]
 8005f10:	9b03      	ldr	r3, [sp, #12]
 8005f12:	4298      	cmp	r0, r3
 8005f14:	bfb8      	it	lt
 8005f16:	4618      	movlt	r0, r3
 8005f18:	e7a4      	b.n	8005e64 <_printf_i+0x168>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	4649      	mov	r1, r9
 8005f20:	4640      	mov	r0, r8
 8005f22:	47d0      	blx	sl
 8005f24:	3001      	adds	r0, #1
 8005f26:	d09b      	beq.n	8005e60 <_printf_i+0x164>
 8005f28:	3501      	adds	r5, #1
 8005f2a:	68e3      	ldr	r3, [r4, #12]
 8005f2c:	9903      	ldr	r1, [sp, #12]
 8005f2e:	1a5b      	subs	r3, r3, r1
 8005f30:	42ab      	cmp	r3, r5
 8005f32:	dcf2      	bgt.n	8005f1a <_printf_i+0x21e>
 8005f34:	e7eb      	b.n	8005f0e <_printf_i+0x212>
 8005f36:	2500      	movs	r5, #0
 8005f38:	f104 0619 	add.w	r6, r4, #25
 8005f3c:	e7f5      	b.n	8005f2a <_printf_i+0x22e>
 8005f3e:	bf00      	nop
 8005f40:	08006431 	.word	0x08006431
 8005f44:	08006442 	.word	0x08006442

08005f48 <_sbrk_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4d06      	ldr	r5, [pc, #24]	; (8005f64 <_sbrk_r+0x1c>)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	602b      	str	r3, [r5, #0]
 8005f54:	f7fa fef8 	bl	8000d48 <_sbrk>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d102      	bne.n	8005f62 <_sbrk_r+0x1a>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b103      	cbz	r3, 8005f62 <_sbrk_r+0x1a>
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	200001e0 	.word	0x200001e0

08005f68 <__sread>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f70:	f000 f8a8 	bl	80060c4 <_read_r>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	bfab      	itete	ge
 8005f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f7c:	181b      	addge	r3, r3, r0
 8005f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f82:	bfac      	ite	ge
 8005f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f86:	81a3      	strhlt	r3, [r4, #12]
 8005f88:	bd10      	pop	{r4, pc}

08005f8a <__swrite>:
 8005f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8e:	461f      	mov	r7, r3
 8005f90:	898b      	ldrh	r3, [r1, #12]
 8005f92:	05db      	lsls	r3, r3, #23
 8005f94:	4605      	mov	r5, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	4616      	mov	r6, r2
 8005f9a:	d505      	bpl.n	8005fa8 <__swrite+0x1e>
 8005f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f000 f870 	bl	8006088 <_lseek_r>
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fb2:	81a3      	strh	r3, [r4, #12]
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	4628      	mov	r0, r5
 8005fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbe:	f000 b817 	b.w	8005ff0 <_write_r>

08005fc2 <__sseek>:
 8005fc2:	b510      	push	{r4, lr}
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fca:	f000 f85d 	bl	8006088 <_lseek_r>
 8005fce:	1c43      	adds	r3, r0, #1
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	bf15      	itete	ne
 8005fd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fde:	81a3      	strheq	r3, [r4, #12]
 8005fe0:	bf18      	it	ne
 8005fe2:	81a3      	strhne	r3, [r4, #12]
 8005fe4:	bd10      	pop	{r4, pc}

08005fe6 <__sclose>:
 8005fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fea:	f000 b81b 	b.w	8006024 <_close_r>
	...

08005ff0 <_write_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4d07      	ldr	r5, [pc, #28]	; (8006010 <_write_r+0x20>)
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	4608      	mov	r0, r1
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	602a      	str	r2, [r5, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f7fa fe51 	bl	8000ca6 <_write>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_write_r+0x1e>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_write_r+0x1e>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	200001e0 	.word	0x200001e0

08006014 <abort>:
 8006014:	b508      	push	{r3, lr}
 8006016:	2006      	movs	r0, #6
 8006018:	f000 f88e 	bl	8006138 <raise>
 800601c:	2001      	movs	r0, #1
 800601e:	f7fa fe1b 	bl	8000c58 <_exit>
	...

08006024 <_close_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	4d06      	ldr	r5, [pc, #24]	; (8006040 <_close_r+0x1c>)
 8006028:	2300      	movs	r3, #0
 800602a:	4604      	mov	r4, r0
 800602c:	4608      	mov	r0, r1
 800602e:	602b      	str	r3, [r5, #0]
 8006030:	f7fa fe55 	bl	8000cde <_close>
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	d102      	bne.n	800603e <_close_r+0x1a>
 8006038:	682b      	ldr	r3, [r5, #0]
 800603a:	b103      	cbz	r3, 800603e <_close_r+0x1a>
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	bd38      	pop	{r3, r4, r5, pc}
 8006040:	200001e0 	.word	0x200001e0

08006044 <_fstat_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4d07      	ldr	r5, [pc, #28]	; (8006064 <_fstat_r+0x20>)
 8006048:	2300      	movs	r3, #0
 800604a:	4604      	mov	r4, r0
 800604c:	4608      	mov	r0, r1
 800604e:	4611      	mov	r1, r2
 8006050:	602b      	str	r3, [r5, #0]
 8006052:	f7fa fe50 	bl	8000cf6 <_fstat>
 8006056:	1c43      	adds	r3, r0, #1
 8006058:	d102      	bne.n	8006060 <_fstat_r+0x1c>
 800605a:	682b      	ldr	r3, [r5, #0]
 800605c:	b103      	cbz	r3, 8006060 <_fstat_r+0x1c>
 800605e:	6023      	str	r3, [r4, #0]
 8006060:	bd38      	pop	{r3, r4, r5, pc}
 8006062:	bf00      	nop
 8006064:	200001e0 	.word	0x200001e0

08006068 <_isatty_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4d06      	ldr	r5, [pc, #24]	; (8006084 <_isatty_r+0x1c>)
 800606c:	2300      	movs	r3, #0
 800606e:	4604      	mov	r4, r0
 8006070:	4608      	mov	r0, r1
 8006072:	602b      	str	r3, [r5, #0]
 8006074:	f7fa fe4f 	bl	8000d16 <_isatty>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_isatty_r+0x1a>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	b103      	cbz	r3, 8006082 <_isatty_r+0x1a>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	200001e0 	.word	0x200001e0

08006088 <_lseek_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d07      	ldr	r5, [pc, #28]	; (80060a8 <_lseek_r+0x20>)
 800608c:	4604      	mov	r4, r0
 800608e:	4608      	mov	r0, r1
 8006090:	4611      	mov	r1, r2
 8006092:	2200      	movs	r2, #0
 8006094:	602a      	str	r2, [r5, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	f7fa fe48 	bl	8000d2c <_lseek>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_lseek_r+0x1e>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_lseek_r+0x1e>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	200001e0 	.word	0x200001e0

080060ac <__malloc_lock>:
 80060ac:	4801      	ldr	r0, [pc, #4]	; (80060b4 <__malloc_lock+0x8>)
 80060ae:	f7ff bb0d 	b.w	80056cc <__retarget_lock_acquire_recursive>
 80060b2:	bf00      	nop
 80060b4:	200001d4 	.word	0x200001d4

080060b8 <__malloc_unlock>:
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <__malloc_unlock+0x8>)
 80060ba:	f7ff bb08 	b.w	80056ce <__retarget_lock_release_recursive>
 80060be:	bf00      	nop
 80060c0:	200001d4 	.word	0x200001d4

080060c4 <_read_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d07      	ldr	r5, [pc, #28]	; (80060e4 <_read_r+0x20>)
 80060c8:	4604      	mov	r4, r0
 80060ca:	4608      	mov	r0, r1
 80060cc:	4611      	mov	r1, r2
 80060ce:	2200      	movs	r2, #0
 80060d0:	602a      	str	r2, [r5, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f7fa fdca 	bl	8000c6c <_read>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_read_r+0x1e>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_read_r+0x1e>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	200001e0 	.word	0x200001e0

080060e8 <_raise_r>:
 80060e8:	291f      	cmp	r1, #31
 80060ea:	b538      	push	{r3, r4, r5, lr}
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	d904      	bls.n	80060fc <_raise_r+0x14>
 80060f2:	2316      	movs	r3, #22
 80060f4:	6003      	str	r3, [r0, #0]
 80060f6:	f04f 30ff 	mov.w	r0, #4294967295
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060fe:	b112      	cbz	r2, 8006106 <_raise_r+0x1e>
 8006100:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006104:	b94b      	cbnz	r3, 800611a <_raise_r+0x32>
 8006106:	4620      	mov	r0, r4
 8006108:	f000 f830 	bl	800616c <_getpid_r>
 800610c:	462a      	mov	r2, r5
 800610e:	4601      	mov	r1, r0
 8006110:	4620      	mov	r0, r4
 8006112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006116:	f000 b817 	b.w	8006148 <_kill_r>
 800611a:	2b01      	cmp	r3, #1
 800611c:	d00a      	beq.n	8006134 <_raise_r+0x4c>
 800611e:	1c59      	adds	r1, r3, #1
 8006120:	d103      	bne.n	800612a <_raise_r+0x42>
 8006122:	2316      	movs	r3, #22
 8006124:	6003      	str	r3, [r0, #0]
 8006126:	2001      	movs	r0, #1
 8006128:	e7e7      	b.n	80060fa <_raise_r+0x12>
 800612a:	2400      	movs	r4, #0
 800612c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006130:	4628      	mov	r0, r5
 8006132:	4798      	blx	r3
 8006134:	2000      	movs	r0, #0
 8006136:	e7e0      	b.n	80060fa <_raise_r+0x12>

08006138 <raise>:
 8006138:	4b02      	ldr	r3, [pc, #8]	; (8006144 <raise+0xc>)
 800613a:	4601      	mov	r1, r0
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	f7ff bfd3 	b.w	80060e8 <_raise_r>
 8006142:	bf00      	nop
 8006144:	20000010 	.word	0x20000010

08006148 <_kill_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	4d07      	ldr	r5, [pc, #28]	; (8006168 <_kill_r+0x20>)
 800614c:	2300      	movs	r3, #0
 800614e:	4604      	mov	r4, r0
 8006150:	4608      	mov	r0, r1
 8006152:	4611      	mov	r1, r2
 8006154:	602b      	str	r3, [r5, #0]
 8006156:	f7fa fd6f 	bl	8000c38 <_kill>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	d102      	bne.n	8006164 <_kill_r+0x1c>
 800615e:	682b      	ldr	r3, [r5, #0]
 8006160:	b103      	cbz	r3, 8006164 <_kill_r+0x1c>
 8006162:	6023      	str	r3, [r4, #0]
 8006164:	bd38      	pop	{r3, r4, r5, pc}
 8006166:	bf00      	nop
 8006168:	200001e0 	.word	0x200001e0

0800616c <_getpid_r>:
 800616c:	f7fa bd5c 	b.w	8000c28 <_getpid>

08006170 <_init>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr

0800617c <_fini>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	bf00      	nop
 8006180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006182:	bc08      	pop	{r3}
 8006184:	469e      	mov	lr, r3
 8006186:	4770      	bx	lr
