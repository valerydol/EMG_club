
ADC_AB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d4c  08006d4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006d4c  08006d4c  00016d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d54  08006d54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d54  08006d54  00016d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  08006dcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08006dcc  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015557  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002585  00000000  00000000  000355f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00037b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  00038e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002999c  00000000  00000000  0003a088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a08  00000000  00000000  00063a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108c44  00000000  00000000  0007842c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181070  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005954  00000000  00000000  001810c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c4c 	.word	0x08006c4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006c4c 	.word	0x08006c4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
static uint32_t valueLightSensor 	= 0;
static uint32_t valuePotentiometer 	= 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	printf("%d \n\r",valueLightSensor);
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	4807      	ldr	r0, [pc, #28]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000584:	f005 fbd4 	bl	8005d30 <iprintf>
	printf("%d \n\r",valuePotentiometer);
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000590:	f005 fbce 	bl	8005d30 <iprintf>

}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000224 	.word	0x20000224
 80005a0:	08006c64 	.word	0x08006c64
 80005a4:	20000228 	.word	0x20000228

080005a8 <HAL_ADC_ConvCpltCallback>:
// Define callback function
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	// Read the converted value in the callback function
	valuePotentiometer = HAL_ADC_GetValue(&hadc2);
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80005b2:	f001 fc03 	bl	8001dbc <HAL_ADC_GetValue>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x20>)
 80005ba:	6013      	str	r3, [r2, #0]
	//printf("%d \n\r",value);

}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200000f0 	.word	0x200000f0
 80005c8:	20000228 	.word	0x20000228

080005cc <__io_putchar>:

int __io_putchar(int ch)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005d4:	1d39      	adds	r1, r7, #4
 80005d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005da:	2201      	movs	r2, #1
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <__io_putchar+0x20>)
 80005de:	f004 fe79 	bl	80052d4 <HAL_UART_Transmit>

  return ch;
 80005e2:	687b      	ldr	r3, [r7, #4]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200001a0 	.word	0x200001a0

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fcd3 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f83d 	bl	8000678 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005fe:	f000 f88c 	bl	800071a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f9f9 	bl	80009f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f9c7 	bl	8000998 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800060a:	f000 f8b1 	bl	8000770 <MX_ADC1_Init>
  MX_ADC2_Init();
 800060e:	f000 f927 	bl	8000860 <MX_ADC2_Init>
  MX_TIM6_Init();
 8000612:	f000 f989 	bl	8000928 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000616:	2012      	movs	r0, #18
 8000618:	f002 fd9d 	bl	8003156 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800061c:	2012      	movs	r0, #18
 800061e:	f002 fd9a 	bl	8003156 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000622:	2036      	movs	r0, #54	; 0x36
 8000624:	f002 fd97 	bl	8003156 <HAL_NVIC_EnableIRQ>

  HAL_ADC_Start(&hadc1);
 8000628:	480f      	ldr	r0, [pc, #60]	; (8000668 <main+0x78>)
 800062a:	f001 f8cf 	bl	80017cc <HAL_ADC_Start>
  HAL_ADC_Start_IT(&hadc2);
 800062e:	480f      	ldr	r0, [pc, #60]	; (800066c <main+0x7c>)
 8000630:	f001 fa92 	bl	8001b58 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000634:	480e      	ldr	r0, [pc, #56]	; (8000670 <main+0x80>)
 8000636:	f004 fb07 	bl	8004c48 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Wait for conversion to end
	HAL_StatusTypeDef result = HAL_ADC_PollForConversion(&hadc1, 1000);
 800063a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <main+0x78>)
 8000640:	f001 f9b2 	bl	80019a8 <HAL_ADC_PollForConversion>
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
	// Read the converted value
	if(result == HAL_OK)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f5      	bne.n	800063a <main+0x4a>
	{
		valueLightSensor =  HAL_ADC_GetValue(&hadc1);
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <main+0x78>)
 8000650:	f001 fbb4 	bl	8001dbc <HAL_ADC_GetValue>
 8000654:	4603      	mov	r3, r0
 8000656:	4a07      	ldr	r2, [pc, #28]	; (8000674 <main+0x84>)
 8000658:	6013      	str	r3, [r2, #0]

		//printf("%d \n\r",(int)value);

		HAL_ADC_Stop(&hadc1);
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <main+0x78>)
 800065c:	f001 f970 	bl	8001940 <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc1);
 8000660:	4801      	ldr	r0, [pc, #4]	; (8000668 <main+0x78>)
 8000662:	f001 f8b3 	bl	80017cc <HAL_ADC_Start>
  {
 8000666:	e7e8      	b.n	800063a <main+0x4a>
 8000668:	2000008c 	.word	0x2000008c
 800066c:	200000f0 	.word	0x200000f0
 8000670:	20000154 	.word	0x20000154
 8000674:	20000224 	.word	0x20000224

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	; 0x58
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2244      	movs	r2, #68	; 0x44
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fb4a 	bl	8005d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800069e:	f002 ff69 	bl	8003574 <HAL_PWREx_ControlVoltageScaling>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a8:	f000 fa14 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	2310      	movs	r3, #16
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006be:	2302      	movs	r3, #2
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006c6:	230a      	movs	r3, #10
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 ffa0 	bl	8003620 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006e6:	f000 f9f5 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	2104      	movs	r1, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fb68 	bl	8003dd8 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 f9e1 	bl	8000ad4 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3758      	adds	r7, #88	; 0x58
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b0a2      	sub	sp, #136	; 0x88
 800071e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2288      	movs	r2, #136	; 0x88
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 fafa 	bl	8005d20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800072c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000730:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000732:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000736:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000740:	2308      	movs	r3, #8
 8000742:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000744:	2307      	movs	r3, #7
 8000746:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000754:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4618      	mov	r0, r3
 800075a:	f003 fd61 	bl	8004220 <HAL_RCCEx_PeriphCLKConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000764:	f000 f9b6 	bl	8000ad4 <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3788      	adds	r7, #136	; 0x88
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <MX_ADC1_Init+0xe4>)
 8000794:	4a30      	ldr	r2, [pc, #192]	; (8000858 <MX_ADC1_Init+0xe8>)
 8000796:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MX_ADC1_Init+0xe4>)
 800079a:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 800079e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a0:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ac:	4b29      	ldr	r3, [pc, #164]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007b4:	2204      	movs	r2, #4
 80007b6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f4:	4817      	ldr	r0, [pc, #92]	; (8000854 <MX_ADC1_Init+0xe4>)
 80007f6:	f000 fe93 	bl	8001520 <HAL_ADC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000800:	f000 f968 	bl	8000ad4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4811      	ldr	r0, [pc, #68]	; (8000854 <MX_ADC1_Init+0xe4>)
 8000810:	f002 fafa 	bl	8002e08 <HAL_ADCEx_MultiModeConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800081a:	f000 f95b 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_ADC1_Init+0xec>)
 8000820:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000822:	2306      	movs	r3, #6
 8000824:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800082a:	237f      	movs	r3, #127	; 0x7f
 800082c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800082e:	2304      	movs	r3, #4
 8000830:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4806      	ldr	r0, [pc, #24]	; (8000854 <MX_ADC1_Init+0xe4>)
 800083c:	f001 fcfa 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000846:	f000 f945 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	; 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000008c 	.word	0x2000008c
 8000858:	50040000 	.word	0x50040000
 800085c:	14f00020 	.word	0x14f00020

08000860 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <MX_ADC2_Init+0xbc>)
 8000878:	4a29      	ldr	r2, [pc, #164]	; (8000920 <MX_ADC2_Init+0xc0>)
 800087a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <MX_ADC2_Init+0xbc>)
 800087e:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 8000882:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000884:	4b25      	ldr	r3, [pc, #148]	; (800091c <MX_ADC2_Init+0xbc>)
 8000886:	2210      	movs	r2, #16
 8000888:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_ADC2_Init+0xbc>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000890:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_ADC2_Init+0xbc>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_ADC2_Init+0xbc>)
 8000898:	2204      	movs	r2, #4
 800089a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ADC2_Init+0xbc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_ADC2_Init+0xbc>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_ADC2_Init+0xbc>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_ADC2_Init+0xbc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_ADC2_Init+0xbc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_ADC2_Init+0xbc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_ADC2_Init+0xbc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_ADC2_Init+0xbc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_ADC2_Init+0xbc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008d8:	4810      	ldr	r0, [pc, #64]	; (800091c <MX_ADC2_Init+0xbc>)
 80008da:	f000 fe21 	bl	8001520 <HAL_ADC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80008e4:	f000 f8f6 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_ADC2_Init+0xc4>)
 80008ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ec:	2306      	movs	r3, #6
 80008ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f4:	237f      	movs	r3, #127	; 0x7f
 80008f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f8:	2304      	movs	r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_ADC2_Init+0xbc>)
 8000906:	f001 fc95 	bl	8002234 <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000910:	f000 f8e0 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000f0 	.word	0x200000f0
 8000920:	50040100 	.word	0x50040100
 8000924:	19200040 	.word	0x19200040

08000928 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_TIM6_Init+0x68>)
 800093a:	4a16      	ldr	r2, [pc, #88]	; (8000994 <MX_TIM6_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_TIM6_Init+0x68>)
 8000940:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000944:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_TIM6_Init+0x68>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_TIM6_Init+0x68>)
 800094e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000952:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_TIM6_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800095a:	480d      	ldr	r0, [pc, #52]	; (8000990 <MX_TIM6_Init+0x68>)
 800095c:	f004 f91c 	bl	8004b98 <HAL_TIM_Base_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000966:	f000 f8b5 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <MX_TIM6_Init+0x68>)
 8000978:	f004 fbb8 	bl	80050ec <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000982:	f000 f8a7 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000154 	.word	0x20000154
 8000994:	40001000 	.word	0x40001000

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_USART2_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009dc:	f004 fc2c 	bl	8005238 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f875 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001a0 	.word	0x200001a0
 80009f4:	40004400 	.word	0x40004400

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a2e      	ldr	r2, [pc, #184]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	4b29      	ldr	r3, [pc, #164]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a28      	ldr	r2, [pc, #160]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b23      	ldr	r3, [pc, #140]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a22      	ldr	r2, [pc, #136]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_GPIO_Init+0xd4>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2120      	movs	r1, #32
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f002 fd33 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a80:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <MX_GPIO_Init+0xd8>)
 8000a92:	f002 fb7b 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a96:	2320      	movs	r3, #32
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f002 fb6c 	bl	800318c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2028      	movs	r0, #40	; 0x28
 8000aba:	f002 fb30 	bl	800311e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000abe:	2028      	movs	r0, #40	; 0x28
 8000ac0:	f002 fb49 	bl	8003156 <HAL_NVIC_EnableIRQ>

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000800 	.word	0x48000800

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_MspInit+0x44>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_MspInit+0x44>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6613      	str	r3, [r2, #96]	; 0x60
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x44>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x44>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a3c      	ldr	r2, [pc, #240]	; (8000c38 <HAL_ADC_MspInit+0x110>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d136      	bne.n	8000bb8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000b4a:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <HAL_ADC_MspInit+0x114>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a3a      	ldr	r2, [pc, #232]	; (8000c3c <HAL_ADC_MspInit+0x114>)
 8000b52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000b54:	4b39      	ldr	r3, [pc, #228]	; (8000c3c <HAL_ADC_MspInit+0x114>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d10b      	bne.n	8000b74 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000b5c:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b60:	4a37      	ldr	r2, [pc, #220]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000b62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b68:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_1_Pin;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b90:	230b      	movs	r3, #11
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_1_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f002 faf3 	bl	800318c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2012      	movs	r0, #18
 8000bac:	f002 fab7 	bl	800311e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bb0:	2012      	movs	r0, #18
 8000bb2:	f002 fad0 	bl	8003156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bb6:	e03a      	b.n	8000c2e <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <HAL_ADC_MspInit+0x11c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d135      	bne.n	8000c2e <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <HAL_ADC_MspInit+0x114>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <HAL_ADC_MspInit+0x114>)
 8000bca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <HAL_ADC_MspInit+0x114>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d10b      	bne.n	8000bec <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000bda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_ADC_MspInit+0x118>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_2_Pin;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c08:	230b      	movs	r3, #11
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_2_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f002 fab7 	bl	800318c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2012      	movs	r0, #18
 8000c24:	f002 fa7b 	bl	800311e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c28:	2012      	movs	r0, #18
 8000c2a:	f002 fa94 	bl	8003156 <HAL_NVIC_EnableIRQ>
}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	; 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	50040000 	.word	0x50040000
 8000c3c:	2000022c 	.word	0x2000022c
 8000c40:	40021000 	.word	0x40021000
 8000c44:	50040100 	.word	0x50040100

08000c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d113      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_TIM_Base_MspInit+0x48>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <HAL_TIM_Base_MspInit+0x48>)
 8000c60:	f043 0310 	orr.w	r3, r3, #16
 8000c64:	6593      	str	r3, [r2, #88]	; 0x58
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_TIM_Base_MspInit+0x48>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2036      	movs	r0, #54	; 0x36
 8000c78:	f002 fa51 	bl	800311e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c7c:	2036      	movs	r0, #54	; 0x36
 8000c7e:	f002 fa6a 	bl	8003156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40001000 	.word	0x40001000
 8000c90:	40021000 	.word	0x40021000

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0ac      	sub	sp, #176	; 0xb0
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2288      	movs	r2, #136	; 0x88
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f005 f833 	bl	8005d20 <memset>
  if(huart->Instance==USART2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <HAL_UART_MspInit+0xb0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d13b      	bne.n	8000d3c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f003 faa5 	bl	8004220 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cdc:	f7ff fefa 	bl	8000ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_UART_MspInit+0xb4>)
 8000ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce4:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <HAL_UART_MspInit+0xb4>)
 8000ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cea:	6593      	str	r3, [r2, #88]	; 0x58
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_UART_MspInit+0xb4>)
 8000cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_UART_MspInit+0xb4>)
 8000cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <HAL_UART_MspInit+0xb4>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_UART_MspInit+0xb4>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d10:	230c      	movs	r3, #12
 8000d12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f002 fa28 	bl	800318c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	37b0      	adds	r7, #176	; 0xb0
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40004400 	.word	0x40004400
 8000d48:	40021000 	.word	0x40021000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <NMI_Handler+0x4>

08000d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <MemManage_Handler+0x4>

08000d5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d98:	f000 f95e 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <ADC1_2_IRQHandler+0x14>)
 8000da6:	f001 f817 	bl	8001dd8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000daa:	4803      	ldr	r0, [pc, #12]	; (8000db8 <ADC1_2_IRQHandler+0x18>)
 8000dac:	f001 f814 	bl	8001dd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	2000008c 	.word	0x2000008c
 8000db8:	200000f0 	.word	0x200000f0

08000dbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dc4:	f002 fba4 	bl	8003510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM6_DAC_IRQHandler+0x10>)
 8000dd2:	f003 ffa9 	bl	8004d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000154 	.word	0x20000154

08000de0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
	}

return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fbc9 	bl	80005cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf1      	blt.n	8000e2c <_write+0x12>
	}
	return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
	return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
	return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f004 feee 	bl	8005ccc <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20018000 	.word	0x20018000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000230 	.word	0x20000230
 8000f24:	20000248 	.word	0x20000248

08000f28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LoopForever+0xe>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <LoopForever+0x16>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f004 fead 	bl	8005cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7e:	f7ff fb37 	bl	80005f0 <main>

08000f82 <LoopForever>:

LoopForever:
    b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f90:	08006d5c 	.word	0x08006d5c
  ldr r2, =_sbss
 8000f94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f98:	20000248 	.word	0x20000248

08000f9c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC3_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_Init+0x3c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_Init+0x3c>)
 8000fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f002 f8a6 	bl	8003108 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 f80f 	bl	8000fe0 <HAL_InitTick>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	e001      	b.n	8000fd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fce:	f7ff fd87 	bl	8000ae0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_InitTick+0x6c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d023      	beq.n	800103c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_InitTick+0x70>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_InitTick+0x6c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f002 f8b1 	bl	8003172 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10f      	bne.n	8001036 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d809      	bhi.n	8001030 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f002 f87b 	bl	800311e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_InitTick+0x74>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e007      	b.n	8001040 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e004      	b.n	8001040 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e001      	b.n	8001040 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	20000000 	.word	0x20000000
 8001054:	20000004 	.word	0x20000004

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008
 800107c:	20000234 	.word	0x20000234

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000234 	.word	0x20000234

08001098 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	609a      	str	r2, [r3, #8]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3360      	adds	r3, #96	; 0x60
 8001112:	461a      	mov	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LL_ADC_SetOffset+0x44>)
 8001122:	4013      	ands	r3, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	4313      	orrs	r3, r2
 8001130:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001138:	bf00      	nop
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	03fff000 	.word	0x03fff000

08001148 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3360      	adds	r3, #96	; 0x60
 8001156:	461a      	mov	r2, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3360      	adds	r3, #96	; 0x60
 8001184:	461a      	mov	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	431a      	orrs	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800119e:	bf00      	nop
 80011a0:	371c      	adds	r7, #28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3330      	adds	r3, #48	; 0x30
 80011e0:	461a      	mov	r2, r3
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	4413      	add	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f003 031f 	and.w	r3, r3, #31
 80011fa:	211f      	movs	r1, #31
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	401a      	ands	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	0e9b      	lsrs	r3, r3, #26
 8001208:	f003 011f 	and.w	r1, r3, #31
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	431a      	orrs	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800121c:	bf00      	nop
 800121e:	371c      	adds	r7, #28
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800124e:	b480      	push	{r7}
 8001250:	b087      	sub	sp, #28
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3314      	adds	r3, #20
 800125e:	461a      	mov	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	0e5b      	lsrs	r3, r3, #25
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	4413      	add	r3, r2
 800126c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	0d1b      	lsrs	r3, r3, #20
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	2107      	movs	r1, #7
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	401a      	ands	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	0d1b      	lsrs	r3, r3, #20
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	431a      	orrs	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001298:	bf00      	nop
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012bc:	43db      	mvns	r3, r3
 80012be:	401a      	ands	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0318 	and.w	r3, r3, #24
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012c8:	40d9      	lsrs	r1, r3
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	400b      	ands	r3, r1
 80012ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d2:	431a      	orrs	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	0007ffff 	.word	0x0007ffff

080012ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 031f 	and.w	r3, r3, #31
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6093      	str	r3, [r2, #8]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800135c:	d101      	bne.n	8001362 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001380:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001384:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013ac:	d101      	bne.n	80013b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d4:	f043 0201 	orr.w	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013fc:	f043 0202 	orr.w	r2, r3, #2
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <LL_ADC_IsEnabled+0x18>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <LL_ADC_IsEnabled+0x1a>
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b02      	cmp	r3, #2
 8001448:	d101      	bne.n	800144e <LL_ADC_IsDisableOngoing+0x18>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <LL_ADC_IsDisableOngoing+0x1a>
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800146c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001470:	f043 0204 	orr.w	r2, r3, #4
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001498:	f043 0210 	orr.w	r2, r3, #16
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d101      	bne.n	80014c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e6:	f043 0220 	orr.w	r2, r3, #32
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b08      	cmp	r3, #8
 800150c:	d101      	bne.n	8001512 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e136      	b.n	80017a8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff faed 	bl	8000b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fef1 	bl	8001348 <LL_ADC_IsDeepPowerDownEnabled>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fed7 	bl	8001324 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff0c 	bl	8001398 <LL_ADC_IsInternalRegulatorEnabled>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d115      	bne.n	80015b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fef0 	bl	8001370 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001590:	4b87      	ldr	r3, [pc, #540]	; (80017b0 <HAL_ADC_Init+0x290>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	099b      	lsrs	r3, r3, #6
 8001596:	4a87      	ldr	r2, [pc, #540]	; (80017b4 <HAL_ADC_Init+0x294>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	099b      	lsrs	r3, r3, #6
 800159e:	3301      	adds	r3, #1
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015a4:	e002      	b.n	80015ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f9      	bne.n	80015a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff feee 	bl	8001398 <LL_ADC_IsInternalRegulatorEnabled>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10d      	bne.n	80015de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c6:	f043 0210 	orr.w	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff62 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 80015e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 80cf 	bne.w	8001796 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 80cb 	bne.w	8001796 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001604:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001608:	f043 0202 	orr.w	r2, r3, #2
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fefb 	bl	8001410 <LL_ADC_IsEnabled>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d115      	bne.n	800164c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001620:	4865      	ldr	r0, [pc, #404]	; (80017b8 <HAL_ADC_Init+0x298>)
 8001622:	f7ff fef5 	bl	8001410 <LL_ADC_IsEnabled>
 8001626:	4604      	mov	r4, r0
 8001628:	4864      	ldr	r0, [pc, #400]	; (80017bc <HAL_ADC_Init+0x29c>)
 800162a:	f7ff fef1 	bl	8001410 <LL_ADC_IsEnabled>
 800162e:	4603      	mov	r3, r0
 8001630:	431c      	orrs	r4, r3
 8001632:	4863      	ldr	r0, [pc, #396]	; (80017c0 <HAL_ADC_Init+0x2a0>)
 8001634:	f7ff feec 	bl	8001410 <LL_ADC_IsEnabled>
 8001638:	4603      	mov	r3, r0
 800163a:	4323      	orrs	r3, r4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4619      	mov	r1, r3
 8001646:	485f      	ldr	r0, [pc, #380]	; (80017c4 <HAL_ADC_Init+0x2a4>)
 8001648:	f7ff fd26 	bl	8001098 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7e5b      	ldrb	r3, [r3, #25]
 8001650:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001656:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800165c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001662:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d106      	bne.n	8001688 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	3b01      	subs	r3, #1
 8001680:	045b      	lsls	r3, r3, #17
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <HAL_ADC_Init+0x2a8>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fef5 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 80016c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff16 	bl	80014fa <LL_ADC_INJ_IsConversionOngoing>
 80016ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d13d      	bne.n	8001752 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d13a      	bne.n	8001752 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016e0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016e8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016f8:	f023 0302 	bic.w	r3, r3, #2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	69b9      	ldr	r1, [r7, #24]
 8001702:	430b      	orrs	r3, r1
 8001704:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800170c:	2b01      	cmp	r3, #1
 800170e:	d118      	bne.n	8001742 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800171a:	f023 0304 	bic.w	r3, r3, #4
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001726:	4311      	orrs	r1, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800172c:	4311      	orrs	r1, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001732:	430a      	orrs	r2, r1
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	e007      	b.n	8001752 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d10c      	bne.n	8001774 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	f023 010f 	bic.w	r1, r3, #15
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	631a      	str	r2, [r3, #48]	; 0x30
 8001772:	e007      	b.n	8001784 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 020f 	bic.w	r2, r2, #15
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	f023 0303 	bic.w	r3, r3, #3
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	655a      	str	r2, [r3, #84]	; 0x54
 8001794:	e007      	b.n	80017a6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	f043 0210 	orr.w	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3724      	adds	r7, #36	; 0x24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	053e2d63 	.word	0x053e2d63
 80017b8:	50040000 	.word	0x50040000
 80017bc:	50040100 	.word	0x50040100
 80017c0:	50040200 	.word	0x50040200
 80017c4:	50040300 	.word	0x50040300
 80017c8:	fff0c007 	.word	0xfff0c007

080017cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017d4:	4857      	ldr	r0, [pc, #348]	; (8001934 <HAL_ADC_Start+0x168>)
 80017d6:	f7ff fd89 	bl	80012ec <LL_ADC_GetMultimode>
 80017da:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fe63 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f040 809c 	bne.w	8001926 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_ADC_Start+0x30>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e097      	b.n	800192c <HAL_ADC_Start+0x160>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f001 f9c1 	bl	8002b8c <ADC_Enable>
 800180a:	4603      	mov	r3, r0
 800180c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800180e:	7dfb      	ldrb	r3, [r7, #23]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f040 8083 	bne.w	800191c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a42      	ldr	r2, [pc, #264]	; (8001938 <HAL_ADC_Start+0x16c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d002      	beq.n	800183a <HAL_ADC_Start+0x6e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	e000      	b.n	800183c <HAL_ADC_Start+0x70>
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <HAL_ADC_Start+0x170>)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	4293      	cmp	r3, r2
 8001842:	d002      	beq.n	800184a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d105      	bne.n	8001856 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001862:	d106      	bne.n	8001872 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	f023 0206 	bic.w	r2, r3, #6
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	659a      	str	r2, [r3, #88]	; 0x58
 8001870:	e002      	b.n	8001878 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	221c      	movs	r2, #28
 800187e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2a      	ldr	r2, [pc, #168]	; (8001938 <HAL_ADC_Start+0x16c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d002      	beq.n	8001898 <HAL_ADC_Start+0xcc>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	e000      	b.n	800189a <HAL_ADC_Start+0xce>
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <HAL_ADC_Start+0x170>)
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4293      	cmp	r3, r2
 80018a0:	d008      	beq.n	80018b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d002      	beq.n	80018b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	2b09      	cmp	r3, #9
 80018b2:	d114      	bne.n	80018de <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fdc0 	bl	800145c <LL_ADC_REG_StartConversion>
 80018dc:	e025      	b.n	800192a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <HAL_ADC_Start+0x16c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d002      	beq.n	80018fa <HAL_ADC_Start+0x12e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	e000      	b.n	80018fc <HAL_ADC_Start+0x130>
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_ADC_Start+0x170>)
 80018fc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00f      	beq.n	800192a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001912:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	655a      	str	r2, [r3, #84]	; 0x54
 800191a:	e006      	b.n	800192a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001924:	e001      	b.n	800192a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001926:	2302      	movs	r3, #2
 8001928:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800192a:	7dfb      	ldrb	r3, [r7, #23]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	50040300 	.word	0x50040300
 8001938:	50040100 	.word	0x50040100
 800193c:	50040000 	.word	0x50040000

08001940 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_ADC_Stop+0x16>
 8001952:	2302      	movs	r3, #2
 8001954:	e023      	b.n	800199e <HAL_ADC_Stop+0x5e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800195e:	2103      	movs	r1, #3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f001 f857 	bl	8002a14 <ADC_ConversionStop>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d111      	bne.n	8001994 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f001 f991 	bl	8002c98 <ADC_Disable>
 8001976:	4603      	mov	r3, r0
 8001978:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d109      	bne.n	8001994 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019b2:	4866      	ldr	r0, [pc, #408]	; (8001b4c <HAL_ADC_PollForConversion+0x1a4>)
 80019b4:	f7ff fc9a 	bl	80012ec <LL_ADC_GetMultimode>
 80019b8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d102      	bne.n	80019c8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019c2:	2308      	movs	r3, #8
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e02a      	b.n	8001a1e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d002      	beq.n	80019da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b09      	cmp	r3, #9
 80019d8:	d111      	bne.n	80019fe <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d007      	beq.n	80019f8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0a4      	b.n	8001b42 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019f8:	2304      	movs	r3, #4
 80019fa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019fc:	e00f      	b.n	8001a1e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019fe:	4853      	ldr	r0, [pc, #332]	; (8001b4c <HAL_ADC_PollForConversion+0x1a4>)
 8001a00:	f7ff fc82 	bl	8001308 <LL_ADC_GetMultiDMATransfer>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f043 0220 	orr.w	r2, r3, #32
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e093      	b.n	8001b42 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a1e:	f7ff fb2f 	bl	8001080 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a24:	e021      	b.n	8001a6a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d01d      	beq.n	8001a6a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a2e:	f7ff fb27 	bl	8001080 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d302      	bcc.n	8001a44 <HAL_ADC_PollForConversion+0x9c>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d112      	bne.n	8001a6a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10b      	bne.n	8001a6a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a56:	f043 0204 	orr.w	r2, r3, #4
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e06b      	b.n	8001b42 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0d6      	beq.n	8001a26 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fb8e 	bl	80011aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01c      	beq.n	8001ace <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7e5b      	ldrb	r3, [r3, #25]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d118      	bne.n	8001ace <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d111      	bne.n	8001ace <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <HAL_ADC_PollForConversion+0x1a8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d002      	beq.n	8001ade <HAL_ADC_PollForConversion+0x136>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	e000      	b.n	8001ae0 <HAL_ADC_PollForConversion+0x138>
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_ADC_PollForConversion+0x1ac>)
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d008      	beq.n	8001afa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	d002      	beq.n	8001afa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b09      	cmp	r3, #9
 8001af8:	d104      	bne.n	8001b04 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	e00c      	b.n	8001b1e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <HAL_ADC_PollForConversion+0x1a8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d002      	beq.n	8001b14 <HAL_ADC_PollForConversion+0x16c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	e000      	b.n	8001b16 <HAL_ADC_PollForConversion+0x16e>
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_ADC_PollForConversion+0x1ac>)
 8001b16:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d104      	bne.n	8001b2e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e008      	b.n	8001b40 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d103      	bne.n	8001b40 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	220c      	movs	r2, #12
 8001b3e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	50040300 	.word	0x50040300
 8001b50:	50040100 	.word	0x50040100
 8001b54:	50040000 	.word	0x50040000

08001b58 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b60:	4893      	ldr	r0, [pc, #588]	; (8001db0 <HAL_ADC_Start_IT+0x258>)
 8001b62:	f7ff fbc3 	bl	80012ec <LL_ADC_GetMultimode>
 8001b66:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fc9d 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f040 8111 	bne.w	8001d9c <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_Start_IT+0x30>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e10e      	b.n	8001da6 <HAL_ADC_Start_IT+0x24e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fffb 	bl	8002b8c <ADC_Enable>
 8001b96:	4603      	mov	r3, r0
 8001b98:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f040 80f8 	bne.w	8001d92 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7e      	ldr	r2, [pc, #504]	; (8001db4 <HAL_ADC_Start_IT+0x25c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d002      	beq.n	8001bc6 <HAL_ADC_Start_IT+0x6e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	e000      	b.n	8001bc8 <HAL_ADC_Start_IT+0x70>
 8001bc6:	4b7c      	ldr	r3, [pc, #496]	; (8001db8 <HAL_ADC_Start_IT+0x260>)
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d002      	beq.n	8001bd6 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d105      	bne.n	8001be2 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	f023 0206 	bic.w	r2, r3, #6
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	659a      	str	r2, [r3, #88]	; 0x58
 8001bfa:	e002      	b.n	8001c02 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	221c      	movs	r2, #28
 8001c08:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 021c 	bic.w	r2, r2, #28
 8001c20:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d108      	bne.n	8001c3c <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0208 	orr.w	r2, r2, #8
 8001c38:	605a      	str	r2, [r3, #4]
          break;
 8001c3a:	e008      	b.n	8001c4e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0204 	orr.w	r2, r2, #4
 8001c4a:	605a      	str	r2, [r3, #4]
          break;
 8001c4c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d107      	bne.n	8001c66 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0210 	orr.w	r2, r2, #16
 8001c64:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a52      	ldr	r2, [pc, #328]	; (8001db4 <HAL_ADC_Start_IT+0x25c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d002      	beq.n	8001c76 <HAL_ADC_Start_IT+0x11e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	e000      	b.n	8001c78 <HAL_ADC_Start_IT+0x120>
 8001c76:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <HAL_ADC_Start_IT+0x260>)
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d008      	beq.n	8001c92 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d002      	beq.n	8001c92 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b09      	cmp	r3, #9
 8001c90:	d13b      	bne.n	8001d0a <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d02d      	beq.n	8001cfc <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ca8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d110      	bne.n	8001cda <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0220 	bic.w	r2, r2, #32
 8001cc6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd6:	605a      	str	r2, [r3, #4]
              break;
 8001cd8:	e011      	b.n	8001cfe <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ce8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0220 	orr.w	r2, r2, #32
 8001cf8:	605a      	str	r2, [r3, #4]
              break;
 8001cfa:	e000      	b.n	8001cfe <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8001cfc:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fbaa 	bl	800145c <LL_ADC_REG_StartConversion>
 8001d08:	e04c      	b.n	8001da4 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <HAL_ADC_Start_IT+0x25c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d002      	beq.n	8001d26 <HAL_ADC_Start_IT+0x1ce>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e000      	b.n	8001d28 <HAL_ADC_Start_IT+0x1d0>
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_ADC_Start_IT+0x260>)
 8001d28:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d035      	beq.n	8001da2 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d110      	bne.n	8001d70 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0220 	bic.w	r2, r2, #32
 8001d5c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d6c:	605a      	str	r2, [r3, #4]
              break;
 8001d6e:	e019      	b.n	8001da4 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d7e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0220 	orr.w	r2, r2, #32
 8001d8e:	605a      	str	r2, [r3, #4]
              break;
 8001d90:	e008      	b.n	8001da4 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d9a:	e003      	b.n	8001da4 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	75fb      	strb	r3, [r7, #23]
 8001da0:	e000      	b.n	8001da4 <HAL_ADC_Start_IT+0x24c>
        }
 8001da2:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	50040300 	.word	0x50040300
 8001db4:	50040100 	.word	0x50040100
 8001db8:	50040000 	.word	0x50040000

08001dbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df4:	4882      	ldr	r0, [pc, #520]	; (8002000 <HAL_ADC_IRQHandler+0x228>)
 8001df6:	f7ff fa79 	bl	80012ec <LL_ADC_GetMultimode>
 8001dfa:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d017      	beq.n	8001e36 <HAL_ADC_IRQHandler+0x5e>
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d012      	beq.n	8001e36 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 ffe2 	bl	8002df2 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2202      	movs	r2, #2
 8001e34:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d004      	beq.n	8001e4a <HAL_ADC_IRQHandler+0x72>
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8083 	beq.w	8001f5c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d07d      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff f994 	bl	80011aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d062      	beq.n	8001f4e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a5d      	ldr	r2, [pc, #372]	; (8002004 <HAL_ADC_IRQHandler+0x22c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d002      	beq.n	8001e98 <HAL_ADC_IRQHandler+0xc0>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	e000      	b.n	8001e9a <HAL_ADC_IRQHandler+0xc2>
 8001e98:	4b5b      	ldr	r3, [pc, #364]	; (8002008 <HAL_ADC_IRQHandler+0x230>)
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d008      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	d002      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2b09      	cmp	r3, #9
 8001eb2:	d104      	bne.n	8001ebe <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	e00c      	b.n	8001ed8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a50      	ldr	r2, [pc, #320]	; (8002004 <HAL_ADC_IRQHandler+0x22c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d002      	beq.n	8001ece <HAL_ADC_IRQHandler+0xf6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	e000      	b.n	8001ed0 <HAL_ADC_IRQHandler+0xf8>
 8001ece:	4b4e      	ldr	r3, [pc, #312]	; (8002008 <HAL_ADC_IRQHandler+0x230>)
 8001ed0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d135      	bne.n	8001f4e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d12e      	bne.n	8001f4e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fad9 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d11a      	bne.n	8001f36 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 020c 	bic.w	r2, r2, #12
 8001f0e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d112      	bne.n	8001f4e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
 8001f34:	e00b      	b.n	8001f4e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f043 0210 	orr.w	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fb2a 	bl	80005a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	220c      	movs	r2, #12
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x198>
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10b      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 809f 	beq.w	80020ba <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8099 	beq.w	80020ba <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f93f 	bl	8001228 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001faa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f8fa 	bl	80011aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fb6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a11      	ldr	r2, [pc, #68]	; (8002004 <HAL_ADC_IRQHandler+0x22c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d002      	beq.n	8001fc8 <HAL_ADC_IRQHandler+0x1f0>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	e000      	b.n	8001fca <HAL_ADC_IRQHandler+0x1f2>
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_ADC_IRQHandler+0x230>)
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d008      	beq.n	8001fe4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d002      	beq.n	8001fe4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b07      	cmp	r3, #7
 8001fe2:	d104      	bne.n	8001fee <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	623b      	str	r3, [r7, #32]
 8001fec:	e013      	b.n	8002016 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_ADC_IRQHandler+0x22c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d009      	beq.n	800200c <HAL_ADC_IRQHandler+0x234>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	e007      	b.n	800200e <HAL_ADC_IRQHandler+0x236>
 8001ffe:	bf00      	nop
 8002000:	50040300 	.word	0x50040300
 8002004:	50040100 	.word	0x50040100
 8002008:	50040000 	.word	0x50040000
 800200c:	4b7d      	ldr	r3, [pc, #500]	; (8002204 <HAL_ADC_IRQHandler+0x42c>)
 800200e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d047      	beq.n	80020ac <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <HAL_ADC_IRQHandler+0x25e>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d03f      	beq.n	80020ac <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002032:	2b00      	cmp	r3, #0
 8002034:	d13a      	bne.n	80020ac <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b40      	cmp	r3, #64	; 0x40
 8002042:	d133      	bne.n	80020ac <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d12e      	bne.n	80020ac <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fa51 	bl	80014fa <LL_ADC_INJ_IsConversionOngoing>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d11a      	bne.n	8002094 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800206c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d112      	bne.n	80020ac <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f043 0201 	orr.w	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	; 0x54
 8002092:	e00b      	b.n	80020ac <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	f043 0210 	orr.w	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fe78 	bl	8002da2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2260      	movs	r2, #96	; 0x60
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d011      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x310>
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f896 	bl	800220c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d012      	beq.n	8002118 <HAL_ADC_IRQHandler+0x340>
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00d      	beq.n	8002118 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fe5e 	bl	8002dca <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002116:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_ADC_IRQHandler+0x370>
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00d      	beq.n	8002148 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fe50 	bl	8002dde <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002146:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d036      	beq.n	80021c0 <HAL_ADC_IRQHandler+0x3e8>
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	d031      	beq.n	80021c0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002164:	2301      	movs	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
 8002168:	e014      	b.n	8002194 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002170:	4825      	ldr	r0, [pc, #148]	; (8002208 <HAL_ADC_IRQHandler+0x430>)
 8002172:	f7ff f8c9 	bl	8001308 <LL_ADC_GetMultiDMATransfer>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00b      	beq.n	8002194 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800217c:	2301      	movs	r3, #1
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
 8002180:	e008      	b.n	8002194 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002190:	2301      	movs	r3, #1
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	2b01      	cmp	r3, #1
 8002198:	d10e      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	f043 0202 	orr.w	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f834 	bl	8002220 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2210      	movs	r2, #16
 80021be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d018      	beq.n	80021fc <HAL_ADC_IRQHandler+0x424>
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	f043 0208 	orr.w	r2, r3, #8
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fddd 	bl	8002db6 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021fc:	bf00      	nop
 80021fe:	3728      	adds	r7, #40	; 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	50040000 	.word	0x50040000
 8002208:	50040300 	.word	0x50040300

0800220c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0b6      	sub	sp, #216	; 0xd8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x22>
 8002252:	2302      	movs	r3, #2
 8002254:	e3c7      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x7b2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f922 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	f040 83a8 	bne.w	80029c0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d824      	bhi.n	80022c2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	3b02      	subs	r3, #2
 800227e:	2b03      	cmp	r3, #3
 8002280:	d81b      	bhi.n	80022ba <HAL_ADC_ConfigChannel+0x86>
 8002282:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <HAL_ADC_ConfigChannel+0x54>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	08002299 	.word	0x08002299
 800228c:	080022a1 	.word	0x080022a1
 8002290:	080022a9 	.word	0x080022a9
 8002294:	080022b1 	.word	0x080022b1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	220c      	movs	r2, #12
 800229c:	605a      	str	r2, [r3, #4]
          break;
 800229e:	e011      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2212      	movs	r2, #18
 80022a4:	605a      	str	r2, [r3, #4]
          break;
 80022a6:	e00d      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2218      	movs	r2, #24
 80022ac:	605a      	str	r2, [r3, #4]
          break;
 80022ae:	e009      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b6:	605a      	str	r2, [r3, #4]
          break;
 80022b8:	e004      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2206      	movs	r2, #6
 80022be:	605a      	str	r2, [r3, #4]
          break;
 80022c0:	e000      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80022c2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	f7fe ff7d 	bl	80011d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff f8e6 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 80022e0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff f906 	bl	80014fa <LL_ADC_INJ_IsConversionOngoing>
 80022ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 81a6 	bne.w	8002648 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 81a1 	bne.w	8002648 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	461a      	mov	r2, r3
 8002314:	f7fe ff9b 	bl	800124e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	08db      	lsrs	r3, r3, #3
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b04      	cmp	r3, #4
 8002338:	d00a      	beq.n	8002350 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6919      	ldr	r1, [r3, #16]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800234a:	f7fe fed9 	bl	8001100 <LL_ADC_SetOffset>
 800234e:	e17b      	b.n	8002648 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fef6 	bl	8001148 <LL_ADC_GetOffsetChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <HAL_ADC_ConfigChannel+0x148>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe feeb 	bl	8001148 <LL_ADC_GetOffsetChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	f003 021f 	and.w	r2, r3, #31
 800237a:	e01e      	b.n	80023ba <HAL_ADC_ConfigChannel+0x186>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fee0 	bl	8001148 <LL_ADC_GetOffsetChannel>
 8002388:	4603      	mov	r3, r0
 800238a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800239a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800239e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80023aa:	2320      	movs	r3, #32
 80023ac:	e004      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80023ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x19e>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	e018      	b.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80023f6:	2320      	movs	r3, #32
 80023f8:	e004      	b.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80023fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002404:	429a      	cmp	r2, r3
 8002406:	d106      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe feaf 	bl	8001174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fe93 	bl	8001148 <LL_ADC_GetOffsetChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x20e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fe88 	bl	8001148 <LL_ADC_GetOffsetChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	0e9b      	lsrs	r3, r3, #26
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	e01e      	b.n	8002480 <HAL_ADC_ConfigChannel+0x24c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2101      	movs	r1, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fe7d 	bl	8001148 <LL_ADC_GetOffsetChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002460:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002470:	2320      	movs	r3, #32
 8002472:	e004      	b.n	800247e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002488:	2b00      	cmp	r3, #0
 800248a:	d105      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x264>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	e018      	b.n	80024ca <HAL_ADC_ConfigChannel+0x296>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80024bc:	2320      	movs	r3, #32
 80024be:	e004      	b.n	80024ca <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80024c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d106      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2101      	movs	r1, #1
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fe4c 	bl	8001174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2102      	movs	r1, #2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fe30 	bl	8001148 <LL_ADC_GetOffsetChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x2d4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2102      	movs	r1, #2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fe25 	bl	8001148 <LL_ADC_GetOffsetChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	0e9b      	lsrs	r3, r3, #26
 8002502:	f003 021f 	and.w	r2, r3, #31
 8002506:	e01e      	b.n	8002546 <HAL_ADC_ConfigChannel+0x312>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2102      	movs	r1, #2
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fe1a 	bl	8001148 <LL_ADC_GetOffsetChannel>
 8002514:	4603      	mov	r3, r0
 8002516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002526:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800252a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800252e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e004      	b.n	8002544 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800253a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254e:	2b00      	cmp	r3, #0
 8002550:	d105      	bne.n	800255e <HAL_ADC_ConfigChannel+0x32a>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	e016      	b.n	800258c <HAL_ADC_ConfigChannel+0x358>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800257e:	2320      	movs	r3, #32
 8002580:	e004      	b.n	800258c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002582:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800258c:	429a      	cmp	r2, r3
 800258e:	d106      	bne.n	800259e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fdeb 	bl	8001174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2103      	movs	r1, #3
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fdcf 	bl	8001148 <LL_ADC_GetOffsetChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x396>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2103      	movs	r1, #3
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fdc4 	bl	8001148 <LL_ADC_GetOffsetChannel>
 80025c0:	4603      	mov	r3, r0
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	e017      	b.n	80025fa <HAL_ADC_ConfigChannel+0x3c6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2103      	movs	r1, #3
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fdb9 	bl	8001148 <LL_ADC_GetOffsetChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e003      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80025f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x3de>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	0e9b      	lsrs	r3, r3, #26
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	e011      	b.n	8002636 <HAL_ADC_ConfigChannel+0x402>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002622:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800262a:	2320      	movs	r3, #32
 800262c:	e003      	b.n	8002636 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800262e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002636:	429a      	cmp	r2, r3
 8002638:	d106      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	2103      	movs	r1, #3
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fd96 	bl	8001174 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fedf 	bl	8001410 <LL_ADC_IsEnabled>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	f040 813f 	bne.w	80028d8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	461a      	mov	r2, r3
 8002668:	f7fe fe1c 	bl	80012a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a8e      	ldr	r2, [pc, #568]	; (80028ac <HAL_ADC_ConfigChannel+0x678>)
 8002672:	4293      	cmp	r3, r2
 8002674:	f040 8130 	bne.w	80028d8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10b      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x46c>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	3301      	adds	r3, #1
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2b09      	cmp	r3, #9
 8002696:	bf94      	ite	ls
 8002698:	2301      	movls	r3, #1
 800269a:	2300      	movhi	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e019      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x4a0>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80026b8:	2320      	movs	r3, #32
 80026ba:	e003      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80026bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2b09      	cmp	r3, #9
 80026cc:	bf94      	ite	ls
 80026ce:	2301      	movls	r3, #1
 80026d0:	2300      	movhi	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d079      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d107      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x4c0>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0e9b      	lsrs	r3, r3, #26
 80026ea:	3301      	adds	r3, #1
 80026ec:	069b      	lsls	r3, r3, #26
 80026ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f2:	e015      	b.n	8002720 <HAL_ADC_ConfigChannel+0x4ec>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002704:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800270c:	2320      	movs	r3, #32
 800270e:	e003      	b.n	8002718 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	3301      	adds	r3, #1
 800271a:	069b      	lsls	r3, r3, #26
 800271c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x50c>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	3301      	adds	r3, #1
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	2101      	movs	r1, #1
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	e017      	b.n	8002770 <HAL_ADC_ConfigChannel+0x53c>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800274e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002750:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800275c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	ea42 0103 	orr.w	r1, r2, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x562>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0e9b      	lsrs	r3, r3, #26
 8002786:	3301      	adds	r3, #1
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	051b      	lsls	r3, r3, #20
 8002794:	e018      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x594>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e003      	b.n	80027ba <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80027b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c8:	430b      	orrs	r3, r1
 80027ca:	e080      	b.n	80028ce <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d107      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x5b4>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	3301      	adds	r3, #1
 80027e0:	069b      	lsls	r3, r3, #26
 80027e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027e6:	e015      	b.n	8002814 <HAL_ADC_ConfigChannel+0x5e0>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e003      	b.n	800280c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	3301      	adds	r3, #1
 800280e:	069b      	lsls	r3, r3, #26
 8002810:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x600>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	3301      	adds	r3, #1
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	e017      	b.n	8002864 <HAL_ADC_ConfigChannel+0x630>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	61fb      	str	r3, [r7, #28]
  return result;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800284c:	2320      	movs	r3, #32
 800284e:	e003      	b.n	8002858 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	3301      	adds	r3, #1
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	ea42 0103 	orr.w	r1, r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10d      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x65c>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	0e9b      	lsrs	r3, r3, #26
 800287a:	3301      	adds	r3, #1
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	3b1e      	subs	r3, #30
 8002888:	051b      	lsls	r3, r3, #20
 800288a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800288e:	e01d      	b.n	80028cc <HAL_ADC_ConfigChannel+0x698>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	613b      	str	r3, [r7, #16]
  return result;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80028a8:	2320      	movs	r3, #32
 80028aa:	e005      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x684>
 80028ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f003 021f 	and.w	r2, r3, #31
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	3b1e      	subs	r3, #30
 80028c6:	051b      	lsls	r3, r3, #20
 80028c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028cc:	430b      	orrs	r3, r1
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	6892      	ldr	r2, [r2, #8]
 80028d2:	4619      	mov	r1, r3
 80028d4:	f7fe fcbb 	bl	800124e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b44      	ldr	r3, [pc, #272]	; (80029f0 <HAL_ADC_ConfigChannel+0x7bc>)
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d07a      	beq.n	80029da <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028e4:	4843      	ldr	r0, [pc, #268]	; (80029f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80028e6:	f7fe fbfd 	bl	80010e4 <LL_ADC_GetCommonPathInternalCh>
 80028ea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a41      	ldr	r2, [pc, #260]	; (80029f8 <HAL_ADC_ConfigChannel+0x7c4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d12c      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d126      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a3c      	ldr	r2, [pc, #240]	; (80029fc <HAL_ADC_ConfigChannel+0x7c8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d004      	beq.n	8002918 <HAL_ADC_ConfigChannel+0x6e4>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a3b      	ldr	r2, [pc, #236]	; (8002a00 <HAL_ADC_ConfigChannel+0x7cc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d15d      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800291c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002920:	4619      	mov	r1, r3
 8002922:	4834      	ldr	r0, [pc, #208]	; (80029f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002924:	f7fe fbcb 	bl	80010be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002928:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_ADC_ConfigChannel+0x7d0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	4a36      	ldr	r2, [pc, #216]	; (8002a08 <HAL_ADC_ConfigChannel+0x7d4>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002942:	e002      	b.n	800294a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3b01      	subs	r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f9      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002950:	e040      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2d      	ldr	r2, [pc, #180]	; (8002a0c <HAL_ADC_ConfigChannel+0x7d8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d118      	bne.n	800298e <HAL_ADC_ConfigChannel+0x75a>
 800295c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d112      	bne.n	800298e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a23      	ldr	r2, [pc, #140]	; (80029fc <HAL_ADC_ConfigChannel+0x7c8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_ADC_ConfigChannel+0x748>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <HAL_ADC_ConfigChannel+0x7cc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d12d      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800297c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002984:	4619      	mov	r1, r3
 8002986:	481b      	ldr	r0, [pc, #108]	; (80029f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002988:	f7fe fb99 	bl	80010be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800298c:	e024      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <HAL_ADC_ConfigChannel+0x7dc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d120      	bne.n	80029da <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d11a      	bne.n	80029da <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_ADC_ConfigChannel+0x7c8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d115      	bne.n	80029da <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029b6:	4619      	mov	r1, r3
 80029b8:	480e      	ldr	r0, [pc, #56]	; (80029f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80029ba:	f7fe fb80 	bl	80010be <LL_ADC_SetCommonPathInternalCh>
 80029be:	e00c      	b.n	80029da <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80029d2:	e002      	b.n	80029da <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029d4:	bf00      	nop
 80029d6:	e000      	b.n	80029da <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	37d8      	adds	r7, #216	; 0xd8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	80080000 	.word	0x80080000
 80029f4:	50040300 	.word	0x50040300
 80029f8:	c7520000 	.word	0xc7520000
 80029fc:	50040000 	.word	0x50040000
 8002a00:	50040200 	.word	0x50040200
 8002a04:	20000000 	.word	0x20000000
 8002a08:	053e2d63 	.word	0x053e2d63
 8002a0c:	cb840000 	.word	0xcb840000
 8002a10:	80000001 	.word	0x80000001

08002a14 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fd3e 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 8002a30:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fd5f 	bl	80014fa <LL_ADC_INJ_IsConversionOngoing>
 8002a3c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8098 	beq.w	8002b7c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d02a      	beq.n	8002ab0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7e5b      	ldrb	r3, [r3, #25]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d126      	bne.n	8002ab0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	7e1b      	ldrb	r3, [r3, #24]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d122      	bne.n	8002ab0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a6e:	e014      	b.n	8002a9a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4a45      	ldr	r2, [pc, #276]	; (8002b88 <ADC_ConversionStop+0x174>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d90d      	bls.n	8002a94 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7c:	f043 0210 	orr.w	r2, r3, #16
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	f043 0201 	orr.w	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e074      	b.n	8002b7e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	3301      	adds	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d1e3      	bne.n	8002a70 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2240      	movs	r2, #64	; 0x40
 8002aae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d014      	beq.n	8002ae0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fcf6 	bl	80014ac <LL_ADC_REG_IsConversionOngoing>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00c      	beq.n	8002ae0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fcb3 	bl	8001436 <LL_ADC_IsDisableOngoing>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d104      	bne.n	8002ae0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fcd2 	bl	8001484 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d014      	beq.n	8002b10 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fd05 	bl	80014fa <LL_ADC_INJ_IsConversionOngoing>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fc9b 	bl	8001436 <LL_ADC_IsDisableOngoing>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fce1 	bl	80014d2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d005      	beq.n	8002b22 <ADC_ConversionStop+0x10e>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d105      	bne.n	8002b28 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	617b      	str	r3, [r7, #20]
        break;
 8002b20:	e005      	b.n	8002b2e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b22:	2308      	movs	r3, #8
 8002b24:	617b      	str	r3, [r7, #20]
        break;
 8002b26:	e002      	b.n	8002b2e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	617b      	str	r3, [r7, #20]
        break;
 8002b2c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002b2e:	f7fe faa7 	bl	8001080 <HAL_GetTick>
 8002b32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b34:	e01b      	b.n	8002b6e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b36:	f7fe faa3 	bl	8001080 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d914      	bls.n	8002b6e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00d      	beq.n	8002b6e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	f043 0210 	orr.w	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e007      	b.n	8002b7e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1dc      	bne.n	8002b36 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	a33fffff 	.word	0xa33fffff

08002b8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fc37 	bl	8001410 <LL_ADC_IsEnabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d169      	bne.n	8002c7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <ADC_Enable+0xfc>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00d      	beq.n	8002bd2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	f043 0210 	orr.w	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e055      	b.n	8002c7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fbf2 	bl	80013c0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002bdc:	482b      	ldr	r0, [pc, #172]	; (8002c8c <ADC_Enable+0x100>)
 8002bde:	f7fe fa81 	bl	80010e4 <LL_ADC_GetCommonPathInternalCh>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <ADC_Enable+0x104>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	4a28      	ldr	r2, [pc, #160]	; (8002c94 <ADC_Enable+0x108>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002c06:	e002      	b.n	8002c0e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f9      	bne.n	8002c08 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c14:	f7fe fa34 	bl	8001080 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c1a:	e028      	b.n	8002c6e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe fbf5 	bl	8001410 <LL_ADC_IsEnabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fbc5 	bl	80013c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c36:	f7fe fa23 	bl	8001080 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d914      	bls.n	8002c6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d00d      	beq.n	8002c6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f043 0210 	orr.w	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e007      	b.n	8002c7e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d1cf      	bne.n	8002c1c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	8000003f 	.word	0x8000003f
 8002c8c:	50040300 	.word	0x50040300
 8002c90:	20000000 	.word	0x20000000
 8002c94:	053e2d63 	.word	0x053e2d63

08002c98 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe fbc6 	bl	8001436 <LL_ADC_IsDisableOngoing>
 8002caa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe fbad 	bl	8001410 <LL_ADC_IsEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d047      	beq.n	8002d4c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d144      	bne.n	8002d4c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030d 	and.w	r3, r3, #13
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10c      	bne.n	8002cea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe fb87 	bl	80013e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ce2:	f7fe f9cd 	bl	8001080 <HAL_GetTick>
 8002ce6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ce8:	e029      	b.n	8002d3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f043 0210 	orr.w	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e023      	b.n	8002d4e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d06:	f7fe f9bb 	bl	8001080 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d914      	bls.n	8002d3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00d      	beq.n	8002d3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	f043 0210 	orr.w	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e007      	b.n	8002d4e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1dc      	bne.n	8002d06 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <LL_ADC_IsEnabled>:
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <LL_ADC_IsEnabled+0x18>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <LL_ADC_IsEnabled+0x1a>
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_REG_IsConversionOngoing>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d101      	bne.n	8002d94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b09f      	sub	sp, #124	; 0x7c
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e093      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002e32:	2300      	movs	r3, #0
 8002e34:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a47      	ldr	r2, [pc, #284]	; (8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d102      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e40:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	e001      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e072      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff86 	bl	8002d7c <LL_ADC_REG_IsConversionOngoing>
 8002e70:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff80 	bl	8002d7c <LL_ADC_REG_IsConversionOngoing>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d154      	bne.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d151      	bne.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e88:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002e8a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d02c      	beq.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ea6:	035b      	lsls	r3, r3, #13
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eb0:	4829      	ldr	r0, [pc, #164]	; (8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002eb2:	f7ff ff50 	bl	8002d56 <LL_ADC_IsEnabled>
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	4828      	ldr	r0, [pc, #160]	; (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002eba:	f7ff ff4c 	bl	8002d56 <LL_ADC_IsEnabled>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	431c      	orrs	r4, r3
 8002ec2:	4828      	ldr	r0, [pc, #160]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ec4:	f7ff ff47 	bl	8002d56 <LL_ADC_IsEnabled>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4323      	orrs	r3, r4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d137      	bne.n	8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ed8:	f023 030f 	bic.w	r3, r3, #15
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	6811      	ldr	r1, [r2, #0]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	6892      	ldr	r2, [r2, #8]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eec:	e028      	b.n	8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002efa:	4817      	ldr	r0, [pc, #92]	; (8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002efc:	f7ff ff2b 	bl	8002d56 <LL_ADC_IsEnabled>
 8002f00:	4604      	mov	r4, r0
 8002f02:	4816      	ldr	r0, [pc, #88]	; (8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f04:	f7ff ff27 	bl	8002d56 <LL_ADC_IsEnabled>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	431c      	orrs	r4, r3
 8002f0c:	4815      	ldr	r0, [pc, #84]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f0e:	f7ff ff22 	bl	8002d56 <LL_ADC_IsEnabled>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4323      	orrs	r3, r4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d112      	bne.n	8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f22:	f023 030f 	bic.w	r3, r3, #15
 8002f26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f28:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2a:	e009      	b.n	8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002f3e:	e000      	b.n	8002f42 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	377c      	adds	r7, #124	; 0x7c
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}
 8002f56:	bf00      	nop
 8002f58:	50040000 	.word	0x50040000
 8002f5c:	50040100 	.word	0x50040100
 8002f60:	50040300 	.word	0x50040300
 8002f64:	50040200 	.word	0x50040200

08002f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <__NVIC_SetPriorityGrouping+0x44>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f84:	4013      	ands	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9a:	4a04      	ldr	r2, [pc, #16]	; (8002fac <__NVIC_SetPriorityGrouping+0x44>)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	60d3      	str	r3, [r2, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	f003 0307 	and.w	r3, r3, #7
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	db0b      	blt.n	8002ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	4907      	ldr	r1, [pc, #28]	; (8003004 <__NVIC_EnableIRQ+0x38>)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2001      	movs	r0, #1
 8002fee:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000e100 	.word	0xe000e100

08003008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003018:	2b00      	cmp	r3, #0
 800301a:	db0a      	blt.n	8003032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	490c      	ldr	r1, [pc, #48]	; (8003054 <__NVIC_SetPriority+0x4c>)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	440b      	add	r3, r1
 800302c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003030:	e00a      	b.n	8003048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4908      	ldr	r1, [pc, #32]	; (8003058 <__NVIC_SetPriority+0x50>)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	3b04      	subs	r3, #4
 8003040:	0112      	lsls	r2, r2, #4
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	440b      	add	r3, r1
 8003046:	761a      	strb	r2, [r3, #24]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000e100 	.word	0xe000e100
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	; 0x24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f1c3 0307 	rsb	r3, r3, #7
 8003076:	2b04      	cmp	r3, #4
 8003078:	bf28      	it	cs
 800307a:	2304      	movcs	r3, #4
 800307c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3304      	adds	r3, #4
 8003082:	2b06      	cmp	r3, #6
 8003084:	d902      	bls.n	800308c <NVIC_EncodePriority+0x30>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3b03      	subs	r3, #3
 800308a:	e000      	b.n	800308e <NVIC_EncodePriority+0x32>
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	f04f 32ff 	mov.w	r2, #4294967295
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	401a      	ands	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a4:	f04f 31ff 	mov.w	r1, #4294967295
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	43d9      	mvns	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	4313      	orrs	r3, r2
         );
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	; 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030d4:	d301      	bcc.n	80030da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d6:	2301      	movs	r3, #1
 80030d8:	e00f      	b.n	80030fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030da:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <SysTick_Config+0x40>)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e2:	210f      	movs	r1, #15
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	f7ff ff8e 	bl	8003008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <SysTick_Config+0x40>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f2:	4b04      	ldr	r3, [pc, #16]	; (8003104 <SysTick_Config+0x40>)
 80030f4:	2207      	movs	r2, #7
 80030f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	e000e010 	.word	0xe000e010

08003108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff29 	bl	8002f68 <__NVIC_SetPriorityGrouping>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	4603      	mov	r3, r0
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003130:	f7ff ff3e 	bl	8002fb0 <__NVIC_GetPriorityGrouping>
 8003134:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	6978      	ldr	r0, [r7, #20]
 800313c:	f7ff ff8e 	bl	800305c <NVIC_EncodePriority>
 8003140:	4602      	mov	r2, r0
 8003142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff5d 	bl	8003008 <__NVIC_SetPriority>
}
 800314e:	bf00      	nop
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	4603      	mov	r3, r0
 800315e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff31 	bl	8002fcc <__NVIC_EnableIRQ>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ffa2 	bl	80030c4 <SysTick_Config>
 8003180:	4603      	mov	r3, r0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319a:	e17f      	b.n	800349c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	2101      	movs	r1, #1
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	4013      	ands	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8171 	beq.w	8003496 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d005      	beq.n	80031cc <HAL_GPIO_Init+0x40>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d130      	bne.n	800322e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003202:	2201      	movs	r2, #1
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 0201 	and.w	r2, r3, #1
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b03      	cmp	r3, #3
 8003238:	d118      	bne.n	800326c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003240:	2201      	movs	r2, #1
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	08db      	lsrs	r3, r3, #3
 8003256:	f003 0201 	and.w	r2, r3, #1
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b03      	cmp	r3, #3
 8003276:	d017      	beq.n	80032a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d123      	bne.n	80032fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	08da      	lsrs	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3208      	adds	r2, #8
 80032bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	220f      	movs	r2, #15
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	08da      	lsrs	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3208      	adds	r2, #8
 80032f6:	6939      	ldr	r1, [r7, #16]
 80032f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0203 	and.w	r2, r3, #3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80ac 	beq.w	8003496 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333e:	4b5f      	ldr	r3, [pc, #380]	; (80034bc <HAL_GPIO_Init+0x330>)
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	4a5e      	ldr	r2, [pc, #376]	; (80034bc <HAL_GPIO_Init+0x330>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6613      	str	r3, [r2, #96]	; 0x60
 800334a:	4b5c      	ldr	r3, [pc, #368]	; (80034bc <HAL_GPIO_Init+0x330>)
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003356:	4a5a      	ldr	r2, [pc, #360]	; (80034c0 <HAL_GPIO_Init+0x334>)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	3302      	adds	r3, #2
 800335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003362:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	220f      	movs	r2, #15
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003380:	d025      	beq.n	80033ce <HAL_GPIO_Init+0x242>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4f      	ldr	r2, [pc, #316]	; (80034c4 <HAL_GPIO_Init+0x338>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01f      	beq.n	80033ca <HAL_GPIO_Init+0x23e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4e      	ldr	r2, [pc, #312]	; (80034c8 <HAL_GPIO_Init+0x33c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d019      	beq.n	80033c6 <HAL_GPIO_Init+0x23a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4d      	ldr	r2, [pc, #308]	; (80034cc <HAL_GPIO_Init+0x340>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_GPIO_Init+0x236>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4c      	ldr	r2, [pc, #304]	; (80034d0 <HAL_GPIO_Init+0x344>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00d      	beq.n	80033be <HAL_GPIO_Init+0x232>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <HAL_GPIO_Init+0x348>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <HAL_GPIO_Init+0x22e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4a      	ldr	r2, [pc, #296]	; (80034d8 <HAL_GPIO_Init+0x34c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d101      	bne.n	80033b6 <HAL_GPIO_Init+0x22a>
 80033b2:	2306      	movs	r3, #6
 80033b4:	e00c      	b.n	80033d0 <HAL_GPIO_Init+0x244>
 80033b6:	2307      	movs	r3, #7
 80033b8:	e00a      	b.n	80033d0 <HAL_GPIO_Init+0x244>
 80033ba:	2305      	movs	r3, #5
 80033bc:	e008      	b.n	80033d0 <HAL_GPIO_Init+0x244>
 80033be:	2304      	movs	r3, #4
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_Init+0x244>
 80033c2:	2303      	movs	r3, #3
 80033c4:	e004      	b.n	80033d0 <HAL_GPIO_Init+0x244>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e002      	b.n	80033d0 <HAL_GPIO_Init+0x244>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_GPIO_Init+0x244>
 80033ce:	2300      	movs	r3, #0
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	f002 0203 	and.w	r2, r2, #3
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	4093      	lsls	r3, r2
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033e0:	4937      	ldr	r1, [pc, #220]	; (80034c0 <HAL_GPIO_Init+0x334>)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_GPIO_Init+0x350>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003412:	4a32      	ldr	r2, [pc, #200]	; (80034dc <HAL_GPIO_Init+0x350>)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003418:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_GPIO_Init+0x350>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	43db      	mvns	r3, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <HAL_GPIO_Init+0x350>)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_GPIO_Init+0x350>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43db      	mvns	r3, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_GPIO_Init+0x350>)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_GPIO_Init+0x350>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	43db      	mvns	r3, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4013      	ands	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003490:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_GPIO_Init+0x350>)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	3301      	adds	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fa22 f303 	lsr.w	r3, r2, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f47f ae78 	bne.w	800319c <HAL_GPIO_Init+0x10>
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40010000 	.word	0x40010000
 80034c4:	48000400 	.word	0x48000400
 80034c8:	48000800 	.word	0x48000800
 80034cc:	48000c00 	.word	0x48000c00
 80034d0:	48001000 	.word	0x48001000
 80034d4:	48001400 	.word	0x48001400
 80034d8:	48001800 	.word	0x48001800
 80034dc:	40010400 	.word	0x40010400

080034e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
 80034ec:	4613      	mov	r3, r2
 80034ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f0:	787b      	ldrb	r3, [r7, #1]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034fc:	e002      	b.n	8003504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003526:	4a05      	ldr	r2, [pc, #20]	; (800353c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f806 	bl	8003540 <HAL_GPIO_EXTI_Callback>
  }
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40010400 	.word	0x40010400

08003540 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <HAL_PWREx_GetVoltageRange+0x18>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40007000 	.word	0x40007000

08003574 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003582:	d130      	bne.n	80035e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003584:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800358c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003590:	d038      	beq.n	8003604 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800359a:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2232      	movs	r2, #50	; 0x32
 80035a8:	fb02 f303 	mul.w	r3, r2, r3
 80035ac:	4a1b      	ldr	r2, [pc, #108]	; (800361c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	0c9b      	lsrs	r3, r3, #18
 80035b4:	3301      	adds	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035b8:	e002      	b.n	80035c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3b01      	subs	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035cc:	d102      	bne.n	80035d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f2      	bne.n	80035ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d110      	bne.n	8003604 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e00f      	b.n	8003606 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f2:	d007      	beq.n	8003604 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035fc:	4a05      	ldr	r2, [pc, #20]	; (8003614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003602:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40007000 	.word	0x40007000
 8003618:	20000000 	.word	0x20000000
 800361c:	431bde83 	.word	0x431bde83

08003620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e3ca      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003632:	4b97      	ldr	r3, [pc, #604]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800363c:	4b94      	ldr	r3, [pc, #592]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80e4 	beq.w	800381c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <HAL_RCC_OscConfig+0x4a>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	f040 808b 	bne.w	8003778 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b01      	cmp	r3, #1
 8003666:	f040 8087 	bne.w	8003778 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800366a:	4b89      	ldr	r3, [pc, #548]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x62>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e3a2      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1a      	ldr	r2, [r3, #32]
 8003686:	4b82      	ldr	r3, [pc, #520]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <HAL_RCC_OscConfig+0x7c>
 8003692:	4b7f      	ldr	r3, [pc, #508]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369a:	e005      	b.n	80036a8 <HAL_RCC_OscConfig+0x88>
 800369c:	4b7c      	ldr	r3, [pc, #496]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d223      	bcs.n	80036f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fd55 	bl	8004160 <RCC_SetFlashLatencyFromMSIRange>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e383      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c0:	4b73      	ldr	r3, [pc, #460]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a72      	ldr	r2, [pc, #456]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036c6:	f043 0308 	orr.w	r3, r3, #8
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b70      	ldr	r3, [pc, #448]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	496d      	ldr	r1, [pc, #436]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036de:	4b6c      	ldr	r3, [pc, #432]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	4968      	ldr	r1, [pc, #416]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
 80036f2:	e025      	b.n	8003740 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f4:	4b66      	ldr	r3, [pc, #408]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a65      	ldr	r2, [pc, #404]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80036fa:	f043 0308 	orr.w	r3, r3, #8
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b63      	ldr	r3, [pc, #396]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	4960      	ldr	r1, [pc, #384]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003712:	4b5f      	ldr	r3, [pc, #380]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	495b      	ldr	r1, [pc, #364]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fd15 	bl	8004160 <RCC_SetFlashLatencyFromMSIRange>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e343      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003740:	f000 fc4a 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b52      	ldr	r3, [pc, #328]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	4950      	ldr	r1, [pc, #320]	; (8003894 <HAL_RCC_OscConfig+0x274>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
 800375c:	4a4e      	ldr	r2, [pc, #312]	; (8003898 <HAL_RCC_OscConfig+0x278>)
 800375e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003760:	4b4e      	ldr	r3, [pc, #312]	; (800389c <HAL_RCC_OscConfig+0x27c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fd fc3b 	bl	8000fe0 <HAL_InitTick>
 800376a:	4603      	mov	r3, r0
 800376c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d052      	beq.n	800381a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	e327      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d032      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003780:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a42      	ldr	r2, [pc, #264]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800378c:	f7fd fc78 	bl	8001080 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003794:	f7fd fc74 	bl	8001080 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e310      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037a6:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b2:	4b37      	ldr	r3, [pc, #220]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a36      	ldr	r2, [pc, #216]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4931      	ldr	r1, [pc, #196]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d0:	4b2f      	ldr	r3, [pc, #188]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	492c      	ldr	r1, [pc, #176]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
 80037e4:	e01a      	b.n	800381c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037e6:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a29      	ldr	r2, [pc, #164]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037f2:	f7fd fc45 	bl	8001080 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037fa:	f7fd fc41 	bl	8001080 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e2dd      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800380c:	4b20      	ldr	r3, [pc, #128]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x1da>
 8003818:	e000      	b.n	800381c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800381a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d074      	beq.n	8003912 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b08      	cmp	r3, #8
 800382c:	d005      	beq.n	800383a <HAL_RCC_OscConfig+0x21a>
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b0c      	cmp	r3, #12
 8003832:	d10e      	bne.n	8003852 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d10b      	bne.n	8003852 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d064      	beq.n	8003910 <HAL_RCC_OscConfig+0x2f0>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d160      	bne.n	8003910 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e2ba      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x24a>
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	e026      	b.n	80038b8 <HAL_RCC_OscConfig+0x298>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003872:	d115      	bne.n	80038a0 <HAL_RCC_OscConfig+0x280>
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a05      	ldr	r2, [pc, #20]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 800387a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a02      	ldr	r2, [pc, #8]	; (8003890 <HAL_RCC_OscConfig+0x270>)
 8003886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e014      	b.n	80038b8 <HAL_RCC_OscConfig+0x298>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	08006c6c 	.word	0x08006c6c
 8003898:	20000000 	.word	0x20000000
 800389c:	20000004 	.word	0x20000004
 80038a0:	4ba0      	ldr	r3, [pc, #640]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a9f      	ldr	r2, [pc, #636]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b9d      	ldr	r3, [pc, #628]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a9c      	ldr	r2, [pc, #624]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80038b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fd fbde 	bl	8001080 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fd fbda 	bl	8001080 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e276      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038da:	4b92      	ldr	r3, [pc, #584]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x2a8>
 80038e6:	e014      	b.n	8003912 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fd fbca 	bl	8001080 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fd fbc6 	bl	8001080 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e262      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003902:	4b88      	ldr	r3, [pc, #544]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x2d0>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d060      	beq.n	80039e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d005      	beq.n	8003930 <HAL_RCC_OscConfig+0x310>
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d119      	bne.n	800395e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d116      	bne.n	800395e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003930:	4b7c      	ldr	r3, [pc, #496]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_OscConfig+0x328>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e23f      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003948:	4b76      	ldr	r3, [pc, #472]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	4973      	ldr	r1, [pc, #460]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800395c:	e040      	b.n	80039e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d023      	beq.n	80039ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003966:	4b6f      	ldr	r3, [pc, #444]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6e      	ldr	r2, [pc, #440]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 800396c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fd fb85 	bl	8001080 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800397a:	f7fd fb81 	bl	8001080 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e21d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800398c:	4b65      	ldr	r3, [pc, #404]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003998:	4b62      	ldr	r3, [pc, #392]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	061b      	lsls	r3, r3, #24
 80039a6:	495f      	ldr	r1, [pc, #380]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
 80039ac:	e018      	b.n	80039e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ae:	4b5d      	ldr	r3, [pc, #372]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a5c      	ldr	r2, [pc, #368]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ba:	f7fd fb61 	bl	8001080 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c2:	f7fd fb5d 	bl	8001080 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1f9      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039d4:	4b53      	ldr	r3, [pc, #332]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1f0      	bne.n	80039c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d03c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01c      	beq.n	8003a2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f4:	4b4b      	ldr	r3, [pc, #300]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fa:	4a4a      	ldr	r2, [pc, #296]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fd fb3c 	bl	8001080 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fd fb38 	bl	8001080 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e1d4      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a1e:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ef      	beq.n	8003a0c <HAL_RCC_OscConfig+0x3ec>
 8003a2c:	e01b      	b.n	8003a66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2e:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a34:	4a3b      	ldr	r2, [pc, #236]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3e:	f7fd fb1f 	bl	8001080 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a46:	f7fd fb1b 	bl	8001080 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e1b7      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a58:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1ef      	bne.n	8003a46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80a6 	beq.w	8003bc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a74:	2300      	movs	r3, #0
 8003a76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a78:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a84:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a90:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa0:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <HAL_RCC_OscConfig+0x508>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d118      	bne.n	8003ade <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aac:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <HAL_RCC_OscConfig+0x508>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <HAL_RCC_OscConfig+0x508>)
 8003ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab8:	f7fd fae2 	bl	8001080 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac0:	f7fd fade 	bl	8001080 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e17a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad2:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <HAL_RCC_OscConfig+0x508>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d108      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4d8>
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af6:	e029      	b.n	8003b4c <HAL_RCC_OscConfig+0x52c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d115      	bne.n	8003b2c <HAL_RCC_OscConfig+0x50c>
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	4a07      	ldr	r2, [pc, #28]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	4a03      	ldr	r2, [pc, #12]	; (8003b24 <HAL_RCC_OscConfig+0x504>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b20:	e014      	b.n	8003b4c <HAL_RCC_OscConfig+0x52c>
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	4b9c      	ldr	r3, [pc, #624]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	4a9b      	ldr	r2, [pc, #620]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b3c:	4b98      	ldr	r3, [pc, #608]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	4a97      	ldr	r2, [pc, #604]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d016      	beq.n	8003b82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fd fa94 	bl	8001080 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fd fa90 	bl	8001080 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e12a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b72:	4b8b      	ldr	r3, [pc, #556]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ed      	beq.n	8003b5c <HAL_RCC_OscConfig+0x53c>
 8003b80:	e015      	b.n	8003bae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fd fa7d 	bl	8001080 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd fa79 	bl	8001080 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e113      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba0:	4b7f      	ldr	r3, [pc, #508]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ed      	bne.n	8003b8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bae:	7ffb      	ldrb	r3, [r7, #31]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d105      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb4:	4b7a      	ldr	r3, [pc, #488]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	4a79      	ldr	r2, [pc, #484]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80fe 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	f040 80d0 	bne.w	8003d74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bd4:	4b72      	ldr	r3, [pc, #456]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0203 	and.w	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d130      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d127      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d11f      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c14:	2a07      	cmp	r2, #7
 8003c16:	bf14      	ite	ne
 8003c18:	2201      	movne	r2, #1
 8003c1a:	2200      	moveq	r2, #0
 8003c1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d113      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d109      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	3b01      	subs	r3, #1
 8003c44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d06e      	beq.n	8003d28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d069      	beq.n	8003d24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c50:	4b53      	ldr	r3, [pc, #332]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c5c:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0ad      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c6c:	4b4c      	ldr	r3, [pc, #304]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c78:	f7fd fa02 	bl	8001080 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fd f9fe 	bl	8001080 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e09a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c92:	4b43      	ldr	r3, [pc, #268]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c9e:	4b40      	ldr	r3, [pc, #256]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	4b40      	ldr	r3, [pc, #256]	; (8003da4 <HAL_RCC_OscConfig+0x784>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cae:	3a01      	subs	r2, #1
 8003cb0:	0112      	lsls	r2, r2, #4
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cb8:	0212      	lsls	r2, r2, #8
 8003cba:	4311      	orrs	r1, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cc0:	0852      	lsrs	r2, r2, #1
 8003cc2:	3a01      	subs	r2, #1
 8003cc4:	0552      	lsls	r2, r2, #21
 8003cc6:	4311      	orrs	r1, r2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ccc:	0852      	lsrs	r2, r2, #1
 8003cce:	3a01      	subs	r2, #1
 8003cd0:	0652      	lsls	r2, r2, #25
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cd8:	0912      	lsrs	r2, r2, #4
 8003cda:	0452      	lsls	r2, r2, #17
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	4930      	ldr	r1, [pc, #192]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ce4:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2d      	ldr	r2, [pc, #180]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf0:	4b2b      	ldr	r3, [pc, #172]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a2a      	ldr	r2, [pc, #168]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cfc:	f7fd f9c0 	bl	8001080 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fd f9bc 	bl	8001080 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e058      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d22:	e050      	b.n	8003dc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e04f      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d148      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d4c:	f7fd f998 	bl	8001080 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fd f994 	bl	8001080 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e030      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x734>
 8003d72:	e028      	b.n	8003dc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b0c      	cmp	r3, #12
 8003d78:	d023      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <HAL_RCC_OscConfig+0x780>)
 8003d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fd f97b 	bl	8001080 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d8c:	e00c      	b.n	8003da8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7fd f977 	bl	8001080 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d905      	bls.n	8003da8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e013      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
 8003da0:	40021000 	.word	0x40021000
 8003da4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_OscConfig+0x7b0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ec      	bne.n	8003d8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_OscConfig+0x7b0>)
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	4905      	ldr	r1, [pc, #20]	; (8003dd0 <HAL_RCC_OscConfig+0x7b0>)
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_RCC_OscConfig+0x7b4>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60cb      	str	r3, [r1, #12]
 8003dc0:	e001      	b.n	8003dc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	feeefffc 	.word	0xfeeefffc

08003dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0e7      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dec:	4b75      	ldr	r3, [pc, #468]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d910      	bls.n	8003e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 0207 	bic.w	r2, r3, #7
 8003e02:	4970      	ldr	r1, [pc, #448]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b6e      	ldr	r3, [pc, #440]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0cf      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d010      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	4b66      	ldr	r3, [pc, #408]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d908      	bls.n	8003e4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e38:	4b63      	ldr	r3, [pc, #396]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4960      	ldr	r1, [pc, #384]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d04c      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	4b5a      	ldr	r3, [pc, #360]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d121      	bne.n	8003eae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e0a6      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e76:	4b54      	ldr	r3, [pc, #336]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d115      	bne.n	8003eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e09a      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e8e:	4b4e      	ldr	r3, [pc, #312]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e08e      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e9e:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e086      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eae:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f023 0203 	bic.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4943      	ldr	r1, [pc, #268]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec0:	f7fd f8de 	bl	8001080 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec8:	f7fd f8da 	bl	8001080 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e06e      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	4b3a      	ldr	r3, [pc, #232]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 020c 	and.w	r2, r3, #12
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d1eb      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d010      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d208      	bcs.n	8003f1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0c:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	492b      	ldr	r1, [pc, #172]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1e:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d210      	bcs.n	8003f4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f023 0207 	bic.w	r2, r3, #7
 8003f34:	4923      	ldr	r1, [pc, #140]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3c:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e036      	b.n	8003fbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f5a:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4918      	ldr	r1, [pc, #96]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4910      	ldr	r1, [pc, #64]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f8c:	f000 f824 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	490b      	ldr	r1, [pc, #44]	; (8003fcc <HAL_RCC_ClockConfig+0x1f4>)
 8003f9e:	5ccb      	ldrb	r3, [r1, r3]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa8:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <HAL_RCC_ClockConfig+0x1f8>)
 8003faa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fac:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <HAL_RCC_ClockConfig+0x1fc>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fd f815 	bl	8000fe0 <HAL_InitTick>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fba:	7afb      	ldrb	r3, [r7, #11]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40022000 	.word	0x40022000
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	08006c6c 	.word	0x08006c6c
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	20000004 	.word	0x20000004

08003fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	; 0x24
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe6:	4b3e      	ldr	r3, [pc, #248]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff0:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x34>
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d121      	bne.n	800404a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d11e      	bne.n	800404a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800400c:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004018:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800401a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	e005      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004028:	4b2d      	ldr	r3, [pc, #180]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004034:	4a2b      	ldr	r2, [pc, #172]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10d      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d102      	bne.n	8004056 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004050:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	e004      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d101      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800405c:	4b23      	ldr	r3, [pc, #140]	; (80040ec <HAL_RCC_GetSysClockFreq+0x114>)
 800405e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d134      	bne.n	80040d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d003      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0xa6>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d003      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0xac>
 800407c:	e005      	b.n	800408a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004080:	617b      	str	r3, [r7, #20]
      break;
 8004082:	e005      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004086:	617b      	str	r3, [r7, #20]
      break;
 8004088:	e002      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	617b      	str	r3, [r7, #20]
      break;
 800408e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	3301      	adds	r3, #1
 800409c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	fb03 f202 	mul.w	r2, r3, r2
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	0e5b      	lsrs	r3, r3, #25
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	3301      	adds	r3, #1
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040d0:	69bb      	ldr	r3, [r7, #24]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3724      	adds	r7, #36	; 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08006c84 	.word	0x08006c84
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	007a1200 	.word	0x007a1200

080040f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000000 	.word	0x20000000

08004108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800410c:	f7ff fff0 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4904      	ldr	r1, [pc, #16]	; (8004130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000
 8004130:	08006c7c 	.word	0x08006c7c

08004134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004138:	f7ff ffda 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0adb      	lsrs	r3, r3, #11
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4904      	ldr	r1, [pc, #16]	; (800415c <HAL_RCC_GetPCLK2Freq+0x28>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	08006c7c 	.word	0x08006c7c

08004160 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800416c:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004178:	f7ff f9ee 	bl	8003558 <HAL_PWREx_GetVoltageRange>
 800417c:	6178      	str	r0, [r7, #20]
 800417e:	e014      	b.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004180:	4b25      	ldr	r3, [pc, #148]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	4a24      	ldr	r2, [pc, #144]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418a:	6593      	str	r3, [r2, #88]	; 0x58
 800418c:	4b22      	ldr	r3, [pc, #136]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004198:	f7ff f9de 	bl	8003558 <HAL_PWREx_GetVoltageRange>
 800419c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b0:	d10b      	bne.n	80041ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d919      	bls.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2ba0      	cmp	r3, #160	; 0xa0
 80041bc:	d902      	bls.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041be:	2302      	movs	r3, #2
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	e013      	b.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041c4:	2301      	movs	r3, #1
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	e010      	b.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b80      	cmp	r3, #128	; 0x80
 80041ce:	d902      	bls.n	80041d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041d0:	2303      	movs	r3, #3
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	e00a      	b.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d102      	bne.n	80041e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041dc:	2302      	movs	r3, #2
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	e004      	b.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b70      	cmp	r3, #112	; 0x70
 80041e6:	d101      	bne.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041e8:	2301      	movs	r3, #1
 80041ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 0207 	bic.w	r2, r3, #7
 80041f4:	4909      	ldr	r1, [pc, #36]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	429a      	cmp	r2, r3
 8004208:	d001      	beq.n	800420e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	40022000 	.word	0x40022000

08004220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004228:	2300      	movs	r3, #0
 800422a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800422c:	2300      	movs	r3, #0
 800422e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004238:	2b00      	cmp	r3, #0
 800423a:	d041      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004240:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004244:	d02a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004246:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800424a:	d824      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800424c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004250:	d008      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004252:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004256:	d81e      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800425c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004260:	d010      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004262:	e018      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004264:	4b86      	ldr	r3, [pc, #536]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4a85      	ldr	r2, [pc, #532]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004270:	e015      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3304      	adds	r3, #4
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fabb 	bl	80047f4 <RCCEx_PLLSAI1_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004282:	e00c      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3320      	adds	r3, #32
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fba6 	bl	80049dc <RCCEx_PLLSAI2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004294:	e003      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	74fb      	strb	r3, [r7, #19]
      break;
 800429a:	e000      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800429c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800429e:	7cfb      	ldrb	r3, [r7, #19]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a4:	4b76      	ldr	r3, [pc, #472]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b2:	4973      	ldr	r1, [pc, #460]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042ba:	e001      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d041      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042d4:	d02a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042da:	d824      	bhi.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042e0:	d008      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042e6:	d81e      	bhi.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042f0:	d010      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042f2:	e018      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042f4:	4b62      	ldr	r3, [pc, #392]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4a61      	ldr	r2, [pc, #388]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004300:	e015      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fa73 	bl	80047f4 <RCCEx_PLLSAI1_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004312:	e00c      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3320      	adds	r3, #32
 8004318:	2100      	movs	r1, #0
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fb5e 	bl	80049dc <RCCEx_PLLSAI2_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004324:	e003      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	74fb      	strb	r3, [r7, #19]
      break;
 800432a:	e000      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800432c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004334:	4b52      	ldr	r3, [pc, #328]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004342:	494f      	ldr	r1, [pc, #316]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800434a:	e001      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a0 	beq.w	800449e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435e:	2300      	movs	r3, #0
 8004360:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004362:	4b47      	ldr	r3, [pc, #284]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00d      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004378:	4b41      	ldr	r3, [pc, #260]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	4a40      	ldr	r2, [pc, #256]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004382:	6593      	str	r3, [r2, #88]	; 0x58
 8004384:	4b3e      	ldr	r3, [pc, #248]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004390:	2301      	movs	r3, #1
 8004392:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004394:	4b3b      	ldr	r3, [pc, #236]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3a      	ldr	r2, [pc, #232]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800439a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a0:	f7fc fe6e 	bl	8001080 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043a6:	e009      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a8:	f7fc fe6a 	bl	8001080 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d902      	bls.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	74fb      	strb	r3, [r7, #19]
        break;
 80043ba:	e005      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043bc:	4b31      	ldr	r3, [pc, #196]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ef      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d15c      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043ce:	4b2c      	ldr	r3, [pc, #176]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01f      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d019      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043ec:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043f8:	4b21      	ldr	r3, [pc, #132]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	4a20      	ldr	r2, [pc, #128]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004408:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004418:	4a19      	ldr	r2, [pc, #100]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fc fe29 	bl	8001080 <HAL_GetTick>
 800442e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004430:	e00b      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fc fe25 	bl	8001080 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d902      	bls.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	74fb      	strb	r3, [r7, #19]
            break;
 8004448:	e006      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0ec      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800445e:	4b08      	ldr	r3, [pc, #32]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446e:	4904      	ldr	r1, [pc, #16]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004476:	e009      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
 800447c:	e006      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800448c:	7c7b      	ldrb	r3, [r7, #17]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d105      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004492:	4b9e      	ldr	r3, [pc, #632]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	4a9d      	ldr	r2, [pc, #628]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044aa:	4b98      	ldr	r3, [pc, #608]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f023 0203 	bic.w	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	4994      	ldr	r1, [pc, #592]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044cc:	4b8f      	ldr	r3, [pc, #572]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f023 020c 	bic.w	r2, r3, #12
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044da:	498c      	ldr	r1, [pc, #560]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ee:	4b87      	ldr	r3, [pc, #540]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	4983      	ldr	r1, [pc, #524]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004510:	4b7e      	ldr	r3, [pc, #504]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	497b      	ldr	r1, [pc, #492]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004532:	4b76      	ldr	r3, [pc, #472]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004540:	4972      	ldr	r1, [pc, #456]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004554:	4b6d      	ldr	r3, [pc, #436]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	496a      	ldr	r1, [pc, #424]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004576:	4b65      	ldr	r3, [pc, #404]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	4961      	ldr	r1, [pc, #388]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004598:	4b5c      	ldr	r3, [pc, #368]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	4959      	ldr	r1, [pc, #356]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ba:	4b54      	ldr	r3, [pc, #336]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	4950      	ldr	r1, [pc, #320]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045dc:	4b4b      	ldr	r3, [pc, #300]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	4948      	ldr	r1, [pc, #288]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045fe:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	493f      	ldr	r1, [pc, #252]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d028      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004620:	4b3a      	ldr	r3, [pc, #232]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462e:	4937      	ldr	r1, [pc, #220]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463e:	d106      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004640:	4b32      	ldr	r3, [pc, #200]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a31      	ldr	r2, [pc, #196]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800464a:	60d3      	str	r3, [r2, #12]
 800464c:	e011      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004656:	d10c      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	2101      	movs	r1, #1
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f8c8 	bl	80047f4 <RCCEx_PLLSAI1_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d028      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800467e:	4b23      	ldr	r3, [pc, #140]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	491f      	ldr	r1, [pc, #124]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800469c:	d106      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469e:	4b1b      	ldr	r3, [pc, #108]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	4a1a      	ldr	r2, [pc, #104]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a8:	60d3      	str	r3, [r2, #12]
 80046aa:	e011      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3304      	adds	r3, #4
 80046ba:	2101      	movs	r1, #1
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f899 	bl	80047f4 <RCCEx_PLLSAI1_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c6:	7cfb      	ldrb	r3, [r7, #19]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d02b      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ea:	4908      	ldr	r1, [pc, #32]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fa:	d109      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a02      	ldr	r2, [pc, #8]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004706:	60d3      	str	r3, [r2, #12]
 8004708:	e014      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004718:	d10c      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	2101      	movs	r1, #1
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f867 	bl	80047f4 <RCCEx_PLLSAI1_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d02f      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004740:	4b2b      	ldr	r3, [pc, #172]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004746:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800474e:	4928      	ldr	r1, [pc, #160]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800475a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800475e:	d10d      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	2102      	movs	r1, #2
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f844 	bl	80047f4 <RCCEx_PLLSAI1_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d014      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	74bb      	strb	r3, [r7, #18]
 800477a:	e011      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3320      	adds	r3, #32
 800478a:	2102      	movs	r1, #2
 800478c:	4618      	mov	r0, r3
 800478e:	f000 f925 	bl	80049dc <RCCEx_PLLSAI2_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004796:	7cfb      	ldrb	r3, [r7, #19]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047ac:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ba:	490d      	ldr	r1, [pc, #52]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047de:	4904      	ldr	r1, [pc, #16]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000

080047f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004802:	4b75      	ldr	r3, [pc, #468]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d018      	beq.n	8004840 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800480e:	4b72      	ldr	r3, [pc, #456]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0203 	and.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d10d      	bne.n	800483a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
       ||
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004826:	4b6c      	ldr	r3, [pc, #432]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
       ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d047      	beq.n	80048ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
 800483e:	e044      	b.n	80048ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d018      	beq.n	800487a <RCCEx_PLLSAI1_Config+0x86>
 8004848:	2b03      	cmp	r3, #3
 800484a:	d825      	bhi.n	8004898 <RCCEx_PLLSAI1_Config+0xa4>
 800484c:	2b01      	cmp	r3, #1
 800484e:	d002      	beq.n	8004856 <RCCEx_PLLSAI1_Config+0x62>
 8004850:	2b02      	cmp	r3, #2
 8004852:	d009      	beq.n	8004868 <RCCEx_PLLSAI1_Config+0x74>
 8004854:	e020      	b.n	8004898 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004856:	4b60      	ldr	r3, [pc, #384]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d11d      	bne.n	800489e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004866:	e01a      	b.n	800489e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004868:	4b5b      	ldr	r3, [pc, #364]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004870:	2b00      	cmp	r3, #0
 8004872:	d116      	bne.n	80048a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004878:	e013      	b.n	80048a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800487a:	4b57      	ldr	r3, [pc, #348]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10f      	bne.n	80048a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004886:	4b54      	ldr	r3, [pc, #336]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004896:	e006      	b.n	80048a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
      break;
 800489c:	e004      	b.n	80048a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800489e:	bf00      	nop
 80048a0:	e002      	b.n	80048a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048a2:	bf00      	nop
 80048a4:	e000      	b.n	80048a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10d      	bne.n	80048ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ae:	4b4a      	ldr	r3, [pc, #296]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6819      	ldr	r1, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	430b      	orrs	r3, r1
 80048c4:	4944      	ldr	r1, [pc, #272]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d17d      	bne.n	80049cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048d0:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a40      	ldr	r2, [pc, #256]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048dc:	f7fc fbd0 	bl	8001080 <HAL_GetTick>
 80048e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048e2:	e009      	b.n	80048f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048e4:	f7fc fbcc 	bl	8001080 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d902      	bls.n	80048f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	73fb      	strb	r3, [r7, #15]
        break;
 80048f6:	e005      	b.n	8004904 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048f8:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ef      	bne.n	80048e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d160      	bne.n	80049cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d111      	bne.n	8004934 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004910:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6892      	ldr	r2, [r2, #8]
 8004920:	0211      	lsls	r1, r2, #8
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68d2      	ldr	r2, [r2, #12]
 8004926:	0912      	lsrs	r2, r2, #4
 8004928:	0452      	lsls	r2, r2, #17
 800492a:	430a      	orrs	r2, r1
 800492c:	492a      	ldr	r1, [pc, #168]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	610b      	str	r3, [r1, #16]
 8004932:	e027      	b.n	8004984 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d112      	bne.n	8004960 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800493a:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004942:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6892      	ldr	r2, [r2, #8]
 800494a:	0211      	lsls	r1, r2, #8
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6912      	ldr	r2, [r2, #16]
 8004950:	0852      	lsrs	r2, r2, #1
 8004952:	3a01      	subs	r2, #1
 8004954:	0552      	lsls	r2, r2, #21
 8004956:	430a      	orrs	r2, r1
 8004958:	491f      	ldr	r1, [pc, #124]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800495a:	4313      	orrs	r3, r2
 800495c:	610b      	str	r3, [r1, #16]
 800495e:	e011      	b.n	8004984 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004960:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004968:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6892      	ldr	r2, [r2, #8]
 8004970:	0211      	lsls	r1, r2, #8
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6952      	ldr	r2, [r2, #20]
 8004976:	0852      	lsrs	r2, r2, #1
 8004978:	3a01      	subs	r2, #1
 800497a:	0652      	lsls	r2, r2, #25
 800497c:	430a      	orrs	r2, r1
 800497e:	4916      	ldr	r1, [pc, #88]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004980:	4313      	orrs	r3, r2
 8004982:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004984:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800498e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004990:	f7fc fb76 	bl	8001080 <HAL_GetTick>
 8004994:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004996:	e009      	b.n	80049ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004998:	f7fc fb72 	bl	8001080 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d902      	bls.n	80049ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	73fb      	strb	r3, [r7, #15]
          break;
 80049aa:	e005      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0ef      	beq.n	8004998 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	4904      	ldr	r1, [pc, #16]	; (80049d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000

080049dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ea:	4b6a      	ldr	r3, [pc, #424]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d018      	beq.n	8004a28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049f6:	4b67      	ldr	r3, [pc, #412]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f003 0203 	and.w	r2, r3, #3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d10d      	bne.n	8004a22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
       ||
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a0e:	4b61      	ldr	r3, [pc, #388]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	091b      	lsrs	r3, r3, #4
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d047      	beq.n	8004ab2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
 8004a26:	e044      	b.n	8004ab2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d018      	beq.n	8004a62 <RCCEx_PLLSAI2_Config+0x86>
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d825      	bhi.n	8004a80 <RCCEx_PLLSAI2_Config+0xa4>
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d002      	beq.n	8004a3e <RCCEx_PLLSAI2_Config+0x62>
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d009      	beq.n	8004a50 <RCCEx_PLLSAI2_Config+0x74>
 8004a3c:	e020      	b.n	8004a80 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a3e:	4b55      	ldr	r3, [pc, #340]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d11d      	bne.n	8004a86 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a4e:	e01a      	b.n	8004a86 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a50:	4b50      	ldr	r3, [pc, #320]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d116      	bne.n	8004a8a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a60:	e013      	b.n	8004a8a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a62:	4b4c      	ldr	r3, [pc, #304]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10f      	bne.n	8004a8e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a6e:	4b49      	ldr	r3, [pc, #292]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a7e:	e006      	b.n	8004a8e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
      break;
 8004a84:	e004      	b.n	8004a90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a86:	bf00      	nop
 8004a88:	e002      	b.n	8004a90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10d      	bne.n	8004ab2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a96:	4b3f      	ldr	r3, [pc, #252]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6819      	ldr	r1, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	4939      	ldr	r1, [pc, #228]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d167      	bne.n	8004b88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ab8:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a35      	ldr	r2, [pc, #212]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac4:	f7fc fadc 	bl	8001080 <HAL_GetTick>
 8004ac8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aca:	e009      	b.n	8004ae0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004acc:	f7fc fad8 	bl	8001080 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d902      	bls.n	8004ae0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ade:	e005      	b.n	8004aec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ae0:	4b2c      	ldr	r3, [pc, #176]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1ef      	bne.n	8004acc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d14a      	bne.n	8004b88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d111      	bne.n	8004b1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004af8:	4b26      	ldr	r3, [pc, #152]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6892      	ldr	r2, [r2, #8]
 8004b08:	0211      	lsls	r1, r2, #8
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68d2      	ldr	r2, [r2, #12]
 8004b0e:	0912      	lsrs	r2, r2, #4
 8004b10:	0452      	lsls	r2, r2, #17
 8004b12:	430a      	orrs	r2, r1
 8004b14:	491f      	ldr	r1, [pc, #124]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	614b      	str	r3, [r1, #20]
 8004b1a:	e011      	b.n	8004b40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6892      	ldr	r2, [r2, #8]
 8004b2c:	0211      	lsls	r1, r2, #8
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6912      	ldr	r2, [r2, #16]
 8004b32:	0852      	lsrs	r2, r2, #1
 8004b34:	3a01      	subs	r2, #1
 8004b36:	0652      	lsls	r2, r2, #25
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	4916      	ldr	r1, [pc, #88]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b40:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4c:	f7fc fa98 	bl	8001080 <HAL_GetTick>
 8004b50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b52:	e009      	b.n	8004b68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b54:	f7fc fa94 	bl	8001080 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d902      	bls.n	8004b68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	73fb      	strb	r3, [r7, #15]
          break;
 8004b66:	e005      	b.n	8004b74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ef      	beq.n	8004b54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	4904      	ldr	r1, [pc, #16]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000

08004b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e049      	b.n	8004c3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fc f842 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	f000 f9ee 	bl	8004fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d001      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e04f      	b.n	8004d00 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a23      	ldr	r2, [pc, #140]	; (8004d0c <HAL_TIM_Base_Start_IT+0xc4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01d      	beq.n	8004cbe <HAL_TIM_Base_Start_IT+0x76>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8a:	d018      	beq.n	8004cbe <HAL_TIM_Base_Start_IT+0x76>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_TIM_Base_Start_IT+0x76>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1e      	ldr	r2, [pc, #120]	; (8004d14 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_TIM_Base_Start_IT+0x76>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIM_Base_Start_IT+0x76>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <HAL_TIM_Base_Start_IT+0xd4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_TIM_Base_Start_IT+0x76>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d115      	bne.n	8004cea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	4b17      	ldr	r3, [pc, #92]	; (8004d24 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	d015      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0xb4>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd6:	d011      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	e008      	b.n	8004cfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e000      	b.n	8004cfe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40012c00 	.word	0x40012c00
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40000800 	.word	0x40000800
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	40013400 	.word	0x40013400
 8004d20:	40014000 	.word	0x40014000
 8004d24:	00010007 	.word	0x00010007

08004d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d122      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d11b      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0202 	mvn.w	r2, #2
 8004d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f905 	bl	8004f7a <HAL_TIM_IC_CaptureCallback>
 8004d70:	e005      	b.n	8004d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f8f7 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f908 	bl	8004f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d122      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d11b      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0204 	mvn.w	r2, #4
 8004da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f8db 	bl	8004f7a <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8cd 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f8de 	bl	8004f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d122      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d11b      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0208 	mvn.w	r2, #8
 8004dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2204      	movs	r2, #4
 8004e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8b1 	bl	8004f7a <HAL_TIM_IC_CaptureCallback>
 8004e18:	e005      	b.n	8004e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8a3 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f8b4 	bl	8004f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d122      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d11b      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0210 	mvn.w	r2, #16
 8004e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2208      	movs	r2, #8
 8004e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f887 	bl	8004f7a <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f879 	bl	8004f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f88a 	bl	8004f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d10e      	bne.n	8004eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d107      	bne.n	8004eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0201 	mvn.w	r2, #1
 8004ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fb fb64 	bl	8000574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb6:	2b80      	cmp	r3, #128	; 0x80
 8004eb8:	d10e      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec4:	2b80      	cmp	r3, #128	; 0x80
 8004ec6:	d107      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f99c 	bl	8005210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee6:	d10e      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b80      	cmp	r3, #128	; 0x80
 8004ef4:	d107      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f98f 	bl	8005224 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d10e      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b40      	cmp	r3, #64	; 0x40
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f838 	bl	8004fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d10e      	bne.n	8004f5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d107      	bne.n	8004f5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f06f 0220 	mvn.w	r2, #32
 8004f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f94f 	bl	80051fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a40      	ldr	r2, [pc, #256]	; (80050cc <TIM_Base_SetConfig+0x114>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d00f      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a3d      	ldr	r2, [pc, #244]	; (80050d0 <TIM_Base_SetConfig+0x118>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00b      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a3c      	ldr	r2, [pc, #240]	; (80050d4 <TIM_Base_SetConfig+0x11c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a3b      	ldr	r2, [pc, #236]	; (80050d8 <TIM_Base_SetConfig+0x120>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a3a      	ldr	r2, [pc, #232]	; (80050dc <TIM_Base_SetConfig+0x124>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d108      	bne.n	800500a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <TIM_Base_SetConfig+0x114>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01f      	beq.n	8005052 <TIM_Base_SetConfig+0x9a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005018:	d01b      	beq.n	8005052 <TIM_Base_SetConfig+0x9a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <TIM_Base_SetConfig+0x118>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d017      	beq.n	8005052 <TIM_Base_SetConfig+0x9a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2b      	ldr	r2, [pc, #172]	; (80050d4 <TIM_Base_SetConfig+0x11c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d013      	beq.n	8005052 <TIM_Base_SetConfig+0x9a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <TIM_Base_SetConfig+0x120>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00f      	beq.n	8005052 <TIM_Base_SetConfig+0x9a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a29      	ldr	r2, [pc, #164]	; (80050dc <TIM_Base_SetConfig+0x124>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00b      	beq.n	8005052 <TIM_Base_SetConfig+0x9a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a28      	ldr	r2, [pc, #160]	; (80050e0 <TIM_Base_SetConfig+0x128>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <TIM_Base_SetConfig+0x9a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a27      	ldr	r2, [pc, #156]	; (80050e4 <TIM_Base_SetConfig+0x12c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_Base_SetConfig+0x9a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a26      	ldr	r2, [pc, #152]	; (80050e8 <TIM_Base_SetConfig+0x130>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d108      	bne.n	8005064 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a10      	ldr	r2, [pc, #64]	; (80050cc <TIM_Base_SetConfig+0x114>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00f      	beq.n	80050b0 <TIM_Base_SetConfig+0xf8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a12      	ldr	r2, [pc, #72]	; (80050dc <TIM_Base_SetConfig+0x124>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00b      	beq.n	80050b0 <TIM_Base_SetConfig+0xf8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <TIM_Base_SetConfig+0x128>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d007      	beq.n	80050b0 <TIM_Base_SetConfig+0xf8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a10      	ldr	r2, [pc, #64]	; (80050e4 <TIM_Base_SetConfig+0x12c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_Base_SetConfig+0xf8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a0f      	ldr	r2, [pc, #60]	; (80050e8 <TIM_Base_SetConfig+0x130>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d103      	bne.n	80050b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	615a      	str	r2, [r3, #20]
}
 80050be:	bf00      	nop
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	40013400 	.word	0x40013400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800

080050ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005100:	2302      	movs	r3, #2
 8005102:	e068      	b.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a2e      	ldr	r2, [pc, #184]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a2d      	ldr	r2, [pc, #180]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d108      	bne.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800513e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005150:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01d      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005176:	d018      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1b      	ldr	r2, [pc, #108]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1a      	ldr	r2, [pc, #104]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d009      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10c      	bne.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40013400 	.word	0x40013400
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40014000 	.word	0x40014000

080051fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e040      	b.n	80052cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fb fd1a 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8c0 	bl	80053fc <UART_SetConfig>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e022      	b.n	80052cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fb6c 	bl	800596c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fbf3 	bl	8005ab0 <UART_CheckIdleState>
 80052ca:	4603      	mov	r3, r0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	f040 8082 	bne.w	80053f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_UART_Transmit+0x26>
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e07a      	b.n	80053f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_UART_Transmit+0x38>
 8005308:	2302      	movs	r3, #2
 800530a:	e073      	b.n	80053f4 <HAL_UART_Transmit+0x120>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2221      	movs	r2, #33	; 0x21
 8005320:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005322:	f7fb fead 	bl	8001080 <HAL_GetTick>
 8005326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005340:	d108      	bne.n	8005354 <HAL_UART_Transmit+0x80>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	e003      	b.n	800535c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005364:	e02d      	b.n	80053c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2200      	movs	r2, #0
 800536e:	2180      	movs	r1, #128	; 0x80
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 fbe6 	bl	8005b42 <UART_WaitOnFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e039      	b.n	80053f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	881a      	ldrh	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005392:	b292      	uxth	r2, r2
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	3302      	adds	r3, #2
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	e008      	b.n	80053b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	b292      	uxth	r2, r2
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3301      	adds	r3, #1
 80053ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1cb      	bne.n	8005366 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2200      	movs	r2, #0
 80053d6:	2140      	movs	r1, #64	; 0x40
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 fbb2 	bl	8005b42 <UART_WaitOnFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e005      	b.n	80053f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
  }
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005400:	b08a      	sub	sp, #40	; 0x28
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	431a      	orrs	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	431a      	orrs	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	4313      	orrs	r3, r2
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4ba4      	ldr	r3, [pc, #656]	; (80056bc <UART_SetConfig+0x2c0>)
 800542c:	4013      	ands	r3, r2
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	6812      	ldr	r2, [r2, #0]
 8005432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005434:	430b      	orrs	r3, r1
 8005436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a99      	ldr	r2, [pc, #612]	; (80056c0 <UART_SetConfig+0x2c4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005464:	4313      	orrs	r3, r2
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005478:	430a      	orrs	r2, r1
 800547a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a90      	ldr	r2, [pc, #576]	; (80056c4 <UART_SetConfig+0x2c8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d126      	bne.n	80054d4 <UART_SetConfig+0xd8>
 8005486:	4b90      	ldr	r3, [pc, #576]	; (80056c8 <UART_SetConfig+0x2cc>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	2b03      	cmp	r3, #3
 8005492:	d81b      	bhi.n	80054cc <UART_SetConfig+0xd0>
 8005494:	a201      	add	r2, pc, #4	; (adr r2, 800549c <UART_SetConfig+0xa0>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	080054ad 	.word	0x080054ad
 80054a0:	080054bd 	.word	0x080054bd
 80054a4:	080054b5 	.word	0x080054b5
 80054a8:	080054c5 	.word	0x080054c5
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b2:	e116      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80054b4:	2302      	movs	r3, #2
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ba:	e112      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80054bc:	2304      	movs	r3, #4
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c2:	e10e      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80054c4:	2308      	movs	r3, #8
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ca:	e10a      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80054cc:	2310      	movs	r3, #16
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d2:	e106      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a7c      	ldr	r2, [pc, #496]	; (80056cc <UART_SetConfig+0x2d0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d138      	bne.n	8005550 <UART_SetConfig+0x154>
 80054de:	4b7a      	ldr	r3, [pc, #488]	; (80056c8 <UART_SetConfig+0x2cc>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e4:	f003 030c 	and.w	r3, r3, #12
 80054e8:	2b0c      	cmp	r3, #12
 80054ea:	d82d      	bhi.n	8005548 <UART_SetConfig+0x14c>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <UART_SetConfig+0xf8>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005529 	.word	0x08005529
 80054f8:	08005549 	.word	0x08005549
 80054fc:	08005549 	.word	0x08005549
 8005500:	08005549 	.word	0x08005549
 8005504:	08005539 	.word	0x08005539
 8005508:	08005549 	.word	0x08005549
 800550c:	08005549 	.word	0x08005549
 8005510:	08005549 	.word	0x08005549
 8005514:	08005531 	.word	0x08005531
 8005518:	08005549 	.word	0x08005549
 800551c:	08005549 	.word	0x08005549
 8005520:	08005549 	.word	0x08005549
 8005524:	08005541 	.word	0x08005541
 8005528:	2300      	movs	r3, #0
 800552a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552e:	e0d8      	b.n	80056e2 <UART_SetConfig+0x2e6>
 8005530:	2302      	movs	r3, #2
 8005532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005536:	e0d4      	b.n	80056e2 <UART_SetConfig+0x2e6>
 8005538:	2304      	movs	r3, #4
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553e:	e0d0      	b.n	80056e2 <UART_SetConfig+0x2e6>
 8005540:	2308      	movs	r3, #8
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005546:	e0cc      	b.n	80056e2 <UART_SetConfig+0x2e6>
 8005548:	2310      	movs	r3, #16
 800554a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554e:	e0c8      	b.n	80056e2 <UART_SetConfig+0x2e6>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a5e      	ldr	r2, [pc, #376]	; (80056d0 <UART_SetConfig+0x2d4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d125      	bne.n	80055a6 <UART_SetConfig+0x1aa>
 800555a:	4b5b      	ldr	r3, [pc, #364]	; (80056c8 <UART_SetConfig+0x2cc>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005564:	2b30      	cmp	r3, #48	; 0x30
 8005566:	d016      	beq.n	8005596 <UART_SetConfig+0x19a>
 8005568:	2b30      	cmp	r3, #48	; 0x30
 800556a:	d818      	bhi.n	800559e <UART_SetConfig+0x1a2>
 800556c:	2b20      	cmp	r3, #32
 800556e:	d00a      	beq.n	8005586 <UART_SetConfig+0x18a>
 8005570:	2b20      	cmp	r3, #32
 8005572:	d814      	bhi.n	800559e <UART_SetConfig+0x1a2>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <UART_SetConfig+0x182>
 8005578:	2b10      	cmp	r3, #16
 800557a:	d008      	beq.n	800558e <UART_SetConfig+0x192>
 800557c:	e00f      	b.n	800559e <UART_SetConfig+0x1a2>
 800557e:	2300      	movs	r3, #0
 8005580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005584:	e0ad      	b.n	80056e2 <UART_SetConfig+0x2e6>
 8005586:	2302      	movs	r3, #2
 8005588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800558c:	e0a9      	b.n	80056e2 <UART_SetConfig+0x2e6>
 800558e:	2304      	movs	r3, #4
 8005590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005594:	e0a5      	b.n	80056e2 <UART_SetConfig+0x2e6>
 8005596:	2308      	movs	r3, #8
 8005598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559c:	e0a1      	b.n	80056e2 <UART_SetConfig+0x2e6>
 800559e:	2310      	movs	r3, #16
 80055a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a4:	e09d      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a4a      	ldr	r2, [pc, #296]	; (80056d4 <UART_SetConfig+0x2d8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d125      	bne.n	80055fc <UART_SetConfig+0x200>
 80055b0:	4b45      	ldr	r3, [pc, #276]	; (80056c8 <UART_SetConfig+0x2cc>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055ba:	2bc0      	cmp	r3, #192	; 0xc0
 80055bc:	d016      	beq.n	80055ec <UART_SetConfig+0x1f0>
 80055be:	2bc0      	cmp	r3, #192	; 0xc0
 80055c0:	d818      	bhi.n	80055f4 <UART_SetConfig+0x1f8>
 80055c2:	2b80      	cmp	r3, #128	; 0x80
 80055c4:	d00a      	beq.n	80055dc <UART_SetConfig+0x1e0>
 80055c6:	2b80      	cmp	r3, #128	; 0x80
 80055c8:	d814      	bhi.n	80055f4 <UART_SetConfig+0x1f8>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <UART_SetConfig+0x1d8>
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d008      	beq.n	80055e4 <UART_SetConfig+0x1e8>
 80055d2:	e00f      	b.n	80055f4 <UART_SetConfig+0x1f8>
 80055d4:	2300      	movs	r3, #0
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055da:	e082      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80055dc:	2302      	movs	r3, #2
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055e2:	e07e      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80055e4:	2304      	movs	r3, #4
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ea:	e07a      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80055ec:	2308      	movs	r3, #8
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f2:	e076      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80055f4:	2310      	movs	r3, #16
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fa:	e072      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a35      	ldr	r2, [pc, #212]	; (80056d8 <UART_SetConfig+0x2dc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d12a      	bne.n	800565c <UART_SetConfig+0x260>
 8005606:	4b30      	ldr	r3, [pc, #192]	; (80056c8 <UART_SetConfig+0x2cc>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005614:	d01a      	beq.n	800564c <UART_SetConfig+0x250>
 8005616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800561a:	d81b      	bhi.n	8005654 <UART_SetConfig+0x258>
 800561c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005620:	d00c      	beq.n	800563c <UART_SetConfig+0x240>
 8005622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005626:	d815      	bhi.n	8005654 <UART_SetConfig+0x258>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <UART_SetConfig+0x238>
 800562c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005630:	d008      	beq.n	8005644 <UART_SetConfig+0x248>
 8005632:	e00f      	b.n	8005654 <UART_SetConfig+0x258>
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563a:	e052      	b.n	80056e2 <UART_SetConfig+0x2e6>
 800563c:	2302      	movs	r3, #2
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005642:	e04e      	b.n	80056e2 <UART_SetConfig+0x2e6>
 8005644:	2304      	movs	r3, #4
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e04a      	b.n	80056e2 <UART_SetConfig+0x2e6>
 800564c:	2308      	movs	r3, #8
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005652:	e046      	b.n	80056e2 <UART_SetConfig+0x2e6>
 8005654:	2310      	movs	r3, #16
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565a:	e042      	b.n	80056e2 <UART_SetConfig+0x2e6>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <UART_SetConfig+0x2c4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d13a      	bne.n	80056dc <UART_SetConfig+0x2e0>
 8005666:	4b18      	ldr	r3, [pc, #96]	; (80056c8 <UART_SetConfig+0x2cc>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005670:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005674:	d01a      	beq.n	80056ac <UART_SetConfig+0x2b0>
 8005676:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800567a:	d81b      	bhi.n	80056b4 <UART_SetConfig+0x2b8>
 800567c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005680:	d00c      	beq.n	800569c <UART_SetConfig+0x2a0>
 8005682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005686:	d815      	bhi.n	80056b4 <UART_SetConfig+0x2b8>
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <UART_SetConfig+0x298>
 800568c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005690:	d008      	beq.n	80056a4 <UART_SetConfig+0x2a8>
 8005692:	e00f      	b.n	80056b4 <UART_SetConfig+0x2b8>
 8005694:	2300      	movs	r3, #0
 8005696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569a:	e022      	b.n	80056e2 <UART_SetConfig+0x2e6>
 800569c:	2302      	movs	r3, #2
 800569e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a2:	e01e      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80056a4:	2304      	movs	r3, #4
 80056a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056aa:	e01a      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80056ac:	2308      	movs	r3, #8
 80056ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056b2:	e016      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80056b4:	2310      	movs	r3, #16
 80056b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ba:	e012      	b.n	80056e2 <UART_SetConfig+0x2e6>
 80056bc:	efff69f3 	.word	0xefff69f3
 80056c0:	40008000 	.word	0x40008000
 80056c4:	40013800 	.word	0x40013800
 80056c8:	40021000 	.word	0x40021000
 80056cc:	40004400 	.word	0x40004400
 80056d0:	40004800 	.word	0x40004800
 80056d4:	40004c00 	.word	0x40004c00
 80056d8:	40005000 	.word	0x40005000
 80056dc:	2310      	movs	r3, #16
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a9f      	ldr	r2, [pc, #636]	; (8005964 <UART_SetConfig+0x568>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d17a      	bne.n	80057e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d824      	bhi.n	800573e <UART_SetConfig+0x342>
 80056f4:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <UART_SetConfig+0x300>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	08005721 	.word	0x08005721
 8005700:	0800573f 	.word	0x0800573f
 8005704:	08005729 	.word	0x08005729
 8005708:	0800573f 	.word	0x0800573f
 800570c:	0800572f 	.word	0x0800572f
 8005710:	0800573f 	.word	0x0800573f
 8005714:	0800573f 	.word	0x0800573f
 8005718:	0800573f 	.word	0x0800573f
 800571c:	08005737 	.word	0x08005737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005720:	f7fe fcf2 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8005724:	61f8      	str	r0, [r7, #28]
        break;
 8005726:	e010      	b.n	800574a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005728:	4b8f      	ldr	r3, [pc, #572]	; (8005968 <UART_SetConfig+0x56c>)
 800572a:	61fb      	str	r3, [r7, #28]
        break;
 800572c:	e00d      	b.n	800574a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800572e:	f7fe fc53 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8005732:	61f8      	str	r0, [r7, #28]
        break;
 8005734:	e009      	b.n	800574a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800573a:	61fb      	str	r3, [r7, #28]
        break;
 800573c:	e005      	b.n	800574a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005748:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 80fb 	beq.w	8005948 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	4413      	add	r3, r2
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	429a      	cmp	r2, r3
 8005760:	d305      	bcc.n	800576e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	429a      	cmp	r2, r3
 800576c:	d903      	bls.n	8005776 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005774:	e0e8      	b.n	8005948 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2200      	movs	r2, #0
 800577a:	461c      	mov	r4, r3
 800577c:	4615      	mov	r5, r2
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	022b      	lsls	r3, r5, #8
 8005788:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800578c:	0222      	lsls	r2, r4, #8
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	6849      	ldr	r1, [r1, #4]
 8005792:	0849      	lsrs	r1, r1, #1
 8005794:	2000      	movs	r0, #0
 8005796:	4688      	mov	r8, r1
 8005798:	4681      	mov	r9, r0
 800579a:	eb12 0a08 	adds.w	sl, r2, r8
 800579e:	eb43 0b09 	adc.w	fp, r3, r9
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057b0:	4650      	mov	r0, sl
 80057b2:	4659      	mov	r1, fp
 80057b4:	f7fa fd5c 	bl	8000270 <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4613      	mov	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c6:	d308      	bcc.n	80057da <UART_SetConfig+0x3de>
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ce:	d204      	bcs.n	80057da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	60da      	str	r2, [r3, #12]
 80057d8:	e0b6      	b.n	8005948 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057e0:	e0b2      	b.n	8005948 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ea:	d15e      	bne.n	80058aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80057ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d828      	bhi.n	8005846 <UART_SetConfig+0x44a>
 80057f4:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <UART_SetConfig+0x400>)
 80057f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fa:	bf00      	nop
 80057fc:	08005821 	.word	0x08005821
 8005800:	08005829 	.word	0x08005829
 8005804:	08005831 	.word	0x08005831
 8005808:	08005847 	.word	0x08005847
 800580c:	08005837 	.word	0x08005837
 8005810:	08005847 	.word	0x08005847
 8005814:	08005847 	.word	0x08005847
 8005818:	08005847 	.word	0x08005847
 800581c:	0800583f 	.word	0x0800583f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005820:	f7fe fc72 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8005824:	61f8      	str	r0, [r7, #28]
        break;
 8005826:	e014      	b.n	8005852 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005828:	f7fe fc84 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 800582c:	61f8      	str	r0, [r7, #28]
        break;
 800582e:	e010      	b.n	8005852 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005830:	4b4d      	ldr	r3, [pc, #308]	; (8005968 <UART_SetConfig+0x56c>)
 8005832:	61fb      	str	r3, [r7, #28]
        break;
 8005834:	e00d      	b.n	8005852 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005836:	f7fe fbcf 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 800583a:	61f8      	str	r0, [r7, #28]
        break;
 800583c:	e009      	b.n	8005852 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005842:	61fb      	str	r3, [r7, #28]
        break;
 8005844:	e005      	b.n	8005852 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005850:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d077      	beq.n	8005948 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	005a      	lsls	r2, r3, #1
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	441a      	add	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	fbb2 f3f3 	udiv	r3, r2, r3
 800586c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b0f      	cmp	r3, #15
 8005872:	d916      	bls.n	80058a2 <UART_SetConfig+0x4a6>
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587a:	d212      	bcs.n	80058a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	b29b      	uxth	r3, r3
 8005880:	f023 030f 	bic.w	r3, r3, #15
 8005884:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	085b      	lsrs	r3, r3, #1
 800588a:	b29b      	uxth	r3, r3
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	b29a      	uxth	r2, r3
 8005892:	8afb      	ldrh	r3, [r7, #22]
 8005894:	4313      	orrs	r3, r2
 8005896:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	8afa      	ldrh	r2, [r7, #22]
 800589e:	60da      	str	r2, [r3, #12]
 80058a0:	e052      	b.n	8005948 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058a8:	e04e      	b.n	8005948 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d827      	bhi.n	8005902 <UART_SetConfig+0x506>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <UART_SetConfig+0x4bc>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	080058e5 	.word	0x080058e5
 80058c0:	080058ed 	.word	0x080058ed
 80058c4:	08005903 	.word	0x08005903
 80058c8:	080058f3 	.word	0x080058f3
 80058cc:	08005903 	.word	0x08005903
 80058d0:	08005903 	.word	0x08005903
 80058d4:	08005903 	.word	0x08005903
 80058d8:	080058fb 	.word	0x080058fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058dc:	f7fe fc14 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 80058e0:	61f8      	str	r0, [r7, #28]
        break;
 80058e2:	e014      	b.n	800590e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e4:	f7fe fc26 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 80058e8:	61f8      	str	r0, [r7, #28]
        break;
 80058ea:	e010      	b.n	800590e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058ec:	4b1e      	ldr	r3, [pc, #120]	; (8005968 <UART_SetConfig+0x56c>)
 80058ee:	61fb      	str	r3, [r7, #28]
        break;
 80058f0:	e00d      	b.n	800590e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f2:	f7fe fb71 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 80058f6:	61f8      	str	r0, [r7, #28]
        break;
 80058f8:	e009      	b.n	800590e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058fe:	61fb      	str	r3, [r7, #28]
        break;
 8005900:	e005      	b.n	800590e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800590c:	bf00      	nop
    }

    if (pclk != 0U)
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d019      	beq.n	8005948 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	085a      	lsrs	r2, r3, #1
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	441a      	add	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	fbb2 f3f3 	udiv	r3, r2, r3
 8005926:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	2b0f      	cmp	r3, #15
 800592c:	d909      	bls.n	8005942 <UART_SetConfig+0x546>
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005934:	d205      	bcs.n	8005942 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60da      	str	r2, [r3, #12]
 8005940:	e002      	b.n	8005948 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005954:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005958:	4618      	mov	r0, r3
 800595a:	3728      	adds	r7, #40	; 0x28
 800595c:	46bd      	mov	sp, r7
 800595e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005962:	bf00      	nop
 8005964:	40008000 	.word	0x40008000
 8005968:	00f42400 	.word	0x00f42400

0800596c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01a      	beq.n	8005a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a6a:	d10a      	bne.n	8005a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	605a      	str	r2, [r3, #4]
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ac0:	f7fb fade 	bl	8001080 <HAL_GetTick>
 8005ac4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d10e      	bne.n	8005af2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f82d 	bl	8005b42 <UART_WaitOnFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e023      	b.n	8005b3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d10e      	bne.n	8005b1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f817 	bl	8005b42 <UART_WaitOnFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e00d      	b.n	8005b3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b09c      	sub	sp, #112	; 0x70
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b52:	e0a5      	b.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5a:	f000 80a1 	beq.w	8005ca0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5e:	f7fb fa8f 	bl	8001080 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d13e      	bne.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b88:	667b      	str	r3, [r7, #100]	; 0x64
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e6      	bne.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3308      	adds	r3, #8
 8005bac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e5      	bne.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e067      	b.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d04f      	beq.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c0e:	d147      	bne.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c18:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
 8005c3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e6      	bne.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3308      	adds	r3, #8
 8005c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f023 0301 	bic.w	r3, r3, #1
 8005c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3308      	adds	r3, #8
 8005c6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c6c:	623a      	str	r2, [r7, #32]
 8005c6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	69f9      	ldr	r1, [r7, #28]
 8005c72:	6a3a      	ldr	r2, [r7, #32]
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e5      	bne.n	8005c4c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e010      	b.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69da      	ldr	r2, [r3, #28]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	f43f af4a 	beq.w	8005b54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3770      	adds	r7, #112	; 0x70
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <__errno>:
 8005ccc:	4b01      	ldr	r3, [pc, #4]	; (8005cd4 <__errno+0x8>)
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	2000000c 	.word	0x2000000c

08005cd8 <__libc_init_array>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	4d0d      	ldr	r5, [pc, #52]	; (8005d10 <__libc_init_array+0x38>)
 8005cdc:	4c0d      	ldr	r4, [pc, #52]	; (8005d14 <__libc_init_array+0x3c>)
 8005cde:	1b64      	subs	r4, r4, r5
 8005ce0:	10a4      	asrs	r4, r4, #2
 8005ce2:	2600      	movs	r6, #0
 8005ce4:	42a6      	cmp	r6, r4
 8005ce6:	d109      	bne.n	8005cfc <__libc_init_array+0x24>
 8005ce8:	4d0b      	ldr	r5, [pc, #44]	; (8005d18 <__libc_init_array+0x40>)
 8005cea:	4c0c      	ldr	r4, [pc, #48]	; (8005d1c <__libc_init_array+0x44>)
 8005cec:	f000 ffae 	bl	8006c4c <_init>
 8005cf0:	1b64      	subs	r4, r4, r5
 8005cf2:	10a4      	asrs	r4, r4, #2
 8005cf4:	2600      	movs	r6, #0
 8005cf6:	42a6      	cmp	r6, r4
 8005cf8:	d105      	bne.n	8005d06 <__libc_init_array+0x2e>
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}
 8005cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d00:	4798      	blx	r3
 8005d02:	3601      	adds	r6, #1
 8005d04:	e7ee      	b.n	8005ce4 <__libc_init_array+0xc>
 8005d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d0a:	4798      	blx	r3
 8005d0c:	3601      	adds	r6, #1
 8005d0e:	e7f2      	b.n	8005cf6 <__libc_init_array+0x1e>
 8005d10:	08006d54 	.word	0x08006d54
 8005d14:	08006d54 	.word	0x08006d54
 8005d18:	08006d54 	.word	0x08006d54
 8005d1c:	08006d58 	.word	0x08006d58

08005d20 <memset>:
 8005d20:	4402      	add	r2, r0
 8005d22:	4603      	mov	r3, r0
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d100      	bne.n	8005d2a <memset+0xa>
 8005d28:	4770      	bx	lr
 8005d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d2e:	e7f9      	b.n	8005d24 <memset+0x4>

08005d30 <iprintf>:
 8005d30:	b40f      	push	{r0, r1, r2, r3}
 8005d32:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <iprintf+0x2c>)
 8005d34:	b513      	push	{r0, r1, r4, lr}
 8005d36:	681c      	ldr	r4, [r3, #0]
 8005d38:	b124      	cbz	r4, 8005d44 <iprintf+0x14>
 8005d3a:	69a3      	ldr	r3, [r4, #24]
 8005d3c:	b913      	cbnz	r3, 8005d44 <iprintf+0x14>
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 f866 	bl	8005e10 <__sinit>
 8005d44:	ab05      	add	r3, sp, #20
 8005d46:	9a04      	ldr	r2, [sp, #16]
 8005d48:	68a1      	ldr	r1, [r4, #8]
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 f9bd 	bl	80060cc <_vfiprintf_r>
 8005d52:	b002      	add	sp, #8
 8005d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d58:	b004      	add	sp, #16
 8005d5a:	4770      	bx	lr
 8005d5c:	2000000c 	.word	0x2000000c

08005d60 <std>:
 8005d60:	2300      	movs	r3, #0
 8005d62:	b510      	push	{r4, lr}
 8005d64:	4604      	mov	r4, r0
 8005d66:	e9c0 3300 	strd	r3, r3, [r0]
 8005d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d6e:	6083      	str	r3, [r0, #8]
 8005d70:	8181      	strh	r1, [r0, #12]
 8005d72:	6643      	str	r3, [r0, #100]	; 0x64
 8005d74:	81c2      	strh	r2, [r0, #14]
 8005d76:	6183      	str	r3, [r0, #24]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	2208      	movs	r2, #8
 8005d7c:	305c      	adds	r0, #92	; 0x5c
 8005d7e:	f7ff ffcf 	bl	8005d20 <memset>
 8005d82:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <std+0x38>)
 8005d84:	6263      	str	r3, [r4, #36]	; 0x24
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <std+0x3c>)
 8005d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <std+0x40>)
 8005d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <std+0x44>)
 8005d90:	6224      	str	r4, [r4, #32]
 8005d92:	6323      	str	r3, [r4, #48]	; 0x30
 8005d94:	bd10      	pop	{r4, pc}
 8005d96:	bf00      	nop
 8005d98:	08006675 	.word	0x08006675
 8005d9c:	08006697 	.word	0x08006697
 8005da0:	080066cf 	.word	0x080066cf
 8005da4:	080066f3 	.word	0x080066f3

08005da8 <_cleanup_r>:
 8005da8:	4901      	ldr	r1, [pc, #4]	; (8005db0 <_cleanup_r+0x8>)
 8005daa:	f000 b8af 	b.w	8005f0c <_fwalk_reent>
 8005dae:	bf00      	nop
 8005db0:	080069cd 	.word	0x080069cd

08005db4 <__sfmoreglue>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	2268      	movs	r2, #104	; 0x68
 8005db8:	1e4d      	subs	r5, r1, #1
 8005dba:	4355      	muls	r5, r2
 8005dbc:	460e      	mov	r6, r1
 8005dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dc2:	f000 f8e5 	bl	8005f90 <_malloc_r>
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	b140      	cbz	r0, 8005ddc <__sfmoreglue+0x28>
 8005dca:	2100      	movs	r1, #0
 8005dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8005dd0:	300c      	adds	r0, #12
 8005dd2:	60a0      	str	r0, [r4, #8]
 8005dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005dd8:	f7ff ffa2 	bl	8005d20 <memset>
 8005ddc:	4620      	mov	r0, r4
 8005dde:	bd70      	pop	{r4, r5, r6, pc}

08005de0 <__sfp_lock_acquire>:
 8005de0:	4801      	ldr	r0, [pc, #4]	; (8005de8 <__sfp_lock_acquire+0x8>)
 8005de2:	f000 b8b3 	b.w	8005f4c <__retarget_lock_acquire_recursive>
 8005de6:	bf00      	nop
 8005de8:	20000239 	.word	0x20000239

08005dec <__sfp_lock_release>:
 8005dec:	4801      	ldr	r0, [pc, #4]	; (8005df4 <__sfp_lock_release+0x8>)
 8005dee:	f000 b8ae 	b.w	8005f4e <__retarget_lock_release_recursive>
 8005df2:	bf00      	nop
 8005df4:	20000239 	.word	0x20000239

08005df8 <__sinit_lock_acquire>:
 8005df8:	4801      	ldr	r0, [pc, #4]	; (8005e00 <__sinit_lock_acquire+0x8>)
 8005dfa:	f000 b8a7 	b.w	8005f4c <__retarget_lock_acquire_recursive>
 8005dfe:	bf00      	nop
 8005e00:	2000023a 	.word	0x2000023a

08005e04 <__sinit_lock_release>:
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <__sinit_lock_release+0x8>)
 8005e06:	f000 b8a2 	b.w	8005f4e <__retarget_lock_release_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	2000023a 	.word	0x2000023a

08005e10 <__sinit>:
 8005e10:	b510      	push	{r4, lr}
 8005e12:	4604      	mov	r4, r0
 8005e14:	f7ff fff0 	bl	8005df8 <__sinit_lock_acquire>
 8005e18:	69a3      	ldr	r3, [r4, #24]
 8005e1a:	b11b      	cbz	r3, 8005e24 <__sinit+0x14>
 8005e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e20:	f7ff bff0 	b.w	8005e04 <__sinit_lock_release>
 8005e24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e28:	6523      	str	r3, [r4, #80]	; 0x50
 8005e2a:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <__sinit+0x68>)
 8005e2c:	4a13      	ldr	r2, [pc, #76]	; (8005e7c <__sinit+0x6c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e32:	42a3      	cmp	r3, r4
 8005e34:	bf04      	itt	eq
 8005e36:	2301      	moveq	r3, #1
 8005e38:	61a3      	streq	r3, [r4, #24]
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 f820 	bl	8005e80 <__sfp>
 8005e40:	6060      	str	r0, [r4, #4]
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 f81c 	bl	8005e80 <__sfp>
 8005e48:	60a0      	str	r0, [r4, #8]
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f000 f818 	bl	8005e80 <__sfp>
 8005e50:	2200      	movs	r2, #0
 8005e52:	60e0      	str	r0, [r4, #12]
 8005e54:	2104      	movs	r1, #4
 8005e56:	6860      	ldr	r0, [r4, #4]
 8005e58:	f7ff ff82 	bl	8005d60 <std>
 8005e5c:	68a0      	ldr	r0, [r4, #8]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	2109      	movs	r1, #9
 8005e62:	f7ff ff7d 	bl	8005d60 <std>
 8005e66:	68e0      	ldr	r0, [r4, #12]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	2112      	movs	r1, #18
 8005e6c:	f7ff ff78 	bl	8005d60 <std>
 8005e70:	2301      	movs	r3, #1
 8005e72:	61a3      	str	r3, [r4, #24]
 8005e74:	e7d2      	b.n	8005e1c <__sinit+0xc>
 8005e76:	bf00      	nop
 8005e78:	08006cb4 	.word	0x08006cb4
 8005e7c:	08005da9 	.word	0x08005da9

08005e80 <__sfp>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	4607      	mov	r7, r0
 8005e84:	f7ff ffac 	bl	8005de0 <__sfp_lock_acquire>
 8005e88:	4b1e      	ldr	r3, [pc, #120]	; (8005f04 <__sfp+0x84>)
 8005e8a:	681e      	ldr	r6, [r3, #0]
 8005e8c:	69b3      	ldr	r3, [r6, #24]
 8005e8e:	b913      	cbnz	r3, 8005e96 <__sfp+0x16>
 8005e90:	4630      	mov	r0, r6
 8005e92:	f7ff ffbd 	bl	8005e10 <__sinit>
 8005e96:	3648      	adds	r6, #72	; 0x48
 8005e98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	d503      	bpl.n	8005ea8 <__sfp+0x28>
 8005ea0:	6833      	ldr	r3, [r6, #0]
 8005ea2:	b30b      	cbz	r3, 8005ee8 <__sfp+0x68>
 8005ea4:	6836      	ldr	r6, [r6, #0]
 8005ea6:	e7f7      	b.n	8005e98 <__sfp+0x18>
 8005ea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005eac:	b9d5      	cbnz	r5, 8005ee4 <__sfp+0x64>
 8005eae:	4b16      	ldr	r3, [pc, #88]	; (8005f08 <__sfp+0x88>)
 8005eb0:	60e3      	str	r3, [r4, #12]
 8005eb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005eb6:	6665      	str	r5, [r4, #100]	; 0x64
 8005eb8:	f000 f847 	bl	8005f4a <__retarget_lock_init_recursive>
 8005ebc:	f7ff ff96 	bl	8005dec <__sfp_lock_release>
 8005ec0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ec4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ec8:	6025      	str	r5, [r4, #0]
 8005eca:	61a5      	str	r5, [r4, #24]
 8005ecc:	2208      	movs	r2, #8
 8005ece:	4629      	mov	r1, r5
 8005ed0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ed4:	f7ff ff24 	bl	8005d20 <memset>
 8005ed8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005edc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee4:	3468      	adds	r4, #104	; 0x68
 8005ee6:	e7d9      	b.n	8005e9c <__sfp+0x1c>
 8005ee8:	2104      	movs	r1, #4
 8005eea:	4638      	mov	r0, r7
 8005eec:	f7ff ff62 	bl	8005db4 <__sfmoreglue>
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	6030      	str	r0, [r6, #0]
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d1d5      	bne.n	8005ea4 <__sfp+0x24>
 8005ef8:	f7ff ff78 	bl	8005dec <__sfp_lock_release>
 8005efc:	230c      	movs	r3, #12
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	e7ee      	b.n	8005ee0 <__sfp+0x60>
 8005f02:	bf00      	nop
 8005f04:	08006cb4 	.word	0x08006cb4
 8005f08:	ffff0001 	.word	0xffff0001

08005f0c <_fwalk_reent>:
 8005f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f10:	4606      	mov	r6, r0
 8005f12:	4688      	mov	r8, r1
 8005f14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f18:	2700      	movs	r7, #0
 8005f1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f1e:	f1b9 0901 	subs.w	r9, r9, #1
 8005f22:	d505      	bpl.n	8005f30 <_fwalk_reent+0x24>
 8005f24:	6824      	ldr	r4, [r4, #0]
 8005f26:	2c00      	cmp	r4, #0
 8005f28:	d1f7      	bne.n	8005f1a <_fwalk_reent+0xe>
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f30:	89ab      	ldrh	r3, [r5, #12]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d907      	bls.n	8005f46 <_fwalk_reent+0x3a>
 8005f36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	d003      	beq.n	8005f46 <_fwalk_reent+0x3a>
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4630      	mov	r0, r6
 8005f42:	47c0      	blx	r8
 8005f44:	4307      	orrs	r7, r0
 8005f46:	3568      	adds	r5, #104	; 0x68
 8005f48:	e7e9      	b.n	8005f1e <_fwalk_reent+0x12>

08005f4a <__retarget_lock_init_recursive>:
 8005f4a:	4770      	bx	lr

08005f4c <__retarget_lock_acquire_recursive>:
 8005f4c:	4770      	bx	lr

08005f4e <__retarget_lock_release_recursive>:
 8005f4e:	4770      	bx	lr

08005f50 <sbrk_aligned>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	4e0e      	ldr	r6, [pc, #56]	; (8005f8c <sbrk_aligned+0x3c>)
 8005f54:	460c      	mov	r4, r1
 8005f56:	6831      	ldr	r1, [r6, #0]
 8005f58:	4605      	mov	r5, r0
 8005f5a:	b911      	cbnz	r1, 8005f62 <sbrk_aligned+0x12>
 8005f5c:	f000 fb7a 	bl	8006654 <_sbrk_r>
 8005f60:	6030      	str	r0, [r6, #0]
 8005f62:	4621      	mov	r1, r4
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 fb75 	bl	8006654 <_sbrk_r>
 8005f6a:	1c43      	adds	r3, r0, #1
 8005f6c:	d00a      	beq.n	8005f84 <sbrk_aligned+0x34>
 8005f6e:	1cc4      	adds	r4, r0, #3
 8005f70:	f024 0403 	bic.w	r4, r4, #3
 8005f74:	42a0      	cmp	r0, r4
 8005f76:	d007      	beq.n	8005f88 <sbrk_aligned+0x38>
 8005f78:	1a21      	subs	r1, r4, r0
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f000 fb6a 	bl	8006654 <_sbrk_r>
 8005f80:	3001      	adds	r0, #1
 8005f82:	d101      	bne.n	8005f88 <sbrk_aligned+0x38>
 8005f84:	f04f 34ff 	mov.w	r4, #4294967295
 8005f88:	4620      	mov	r0, r4
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	20000240 	.word	0x20000240

08005f90 <_malloc_r>:
 8005f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f94:	1ccd      	adds	r5, r1, #3
 8005f96:	f025 0503 	bic.w	r5, r5, #3
 8005f9a:	3508      	adds	r5, #8
 8005f9c:	2d0c      	cmp	r5, #12
 8005f9e:	bf38      	it	cc
 8005fa0:	250c      	movcc	r5, #12
 8005fa2:	2d00      	cmp	r5, #0
 8005fa4:	4607      	mov	r7, r0
 8005fa6:	db01      	blt.n	8005fac <_malloc_r+0x1c>
 8005fa8:	42a9      	cmp	r1, r5
 8005faa:	d905      	bls.n	8005fb8 <_malloc_r+0x28>
 8005fac:	230c      	movs	r3, #12
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb8:	4e2e      	ldr	r6, [pc, #184]	; (8006074 <_malloc_r+0xe4>)
 8005fba:	f000 fdbb 	bl	8006b34 <__malloc_lock>
 8005fbe:	6833      	ldr	r3, [r6, #0]
 8005fc0:	461c      	mov	r4, r3
 8005fc2:	bb34      	cbnz	r4, 8006012 <_malloc_r+0x82>
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	f7ff ffc2 	bl	8005f50 <sbrk_aligned>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	4604      	mov	r4, r0
 8005fd0:	d14d      	bne.n	800606e <_malloc_r+0xde>
 8005fd2:	6834      	ldr	r4, [r6, #0]
 8005fd4:	4626      	mov	r6, r4
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	d140      	bne.n	800605c <_malloc_r+0xcc>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4638      	mov	r0, r7
 8005fe0:	eb04 0803 	add.w	r8, r4, r3
 8005fe4:	f000 fb36 	bl	8006654 <_sbrk_r>
 8005fe8:	4580      	cmp	r8, r0
 8005fea:	d13a      	bne.n	8006062 <_malloc_r+0xd2>
 8005fec:	6821      	ldr	r1, [r4, #0]
 8005fee:	3503      	adds	r5, #3
 8005ff0:	1a6d      	subs	r5, r5, r1
 8005ff2:	f025 0503 	bic.w	r5, r5, #3
 8005ff6:	3508      	adds	r5, #8
 8005ff8:	2d0c      	cmp	r5, #12
 8005ffa:	bf38      	it	cc
 8005ffc:	250c      	movcc	r5, #12
 8005ffe:	4629      	mov	r1, r5
 8006000:	4638      	mov	r0, r7
 8006002:	f7ff ffa5 	bl	8005f50 <sbrk_aligned>
 8006006:	3001      	adds	r0, #1
 8006008:	d02b      	beq.n	8006062 <_malloc_r+0xd2>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	442b      	add	r3, r5
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	e00e      	b.n	8006030 <_malloc_r+0xa0>
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	1b52      	subs	r2, r2, r5
 8006016:	d41e      	bmi.n	8006056 <_malloc_r+0xc6>
 8006018:	2a0b      	cmp	r2, #11
 800601a:	d916      	bls.n	800604a <_malloc_r+0xba>
 800601c:	1961      	adds	r1, r4, r5
 800601e:	42a3      	cmp	r3, r4
 8006020:	6025      	str	r5, [r4, #0]
 8006022:	bf18      	it	ne
 8006024:	6059      	strne	r1, [r3, #4]
 8006026:	6863      	ldr	r3, [r4, #4]
 8006028:	bf08      	it	eq
 800602a:	6031      	streq	r1, [r6, #0]
 800602c:	5162      	str	r2, [r4, r5]
 800602e:	604b      	str	r3, [r1, #4]
 8006030:	4638      	mov	r0, r7
 8006032:	f104 060b 	add.w	r6, r4, #11
 8006036:	f000 fd83 	bl	8006b40 <__malloc_unlock>
 800603a:	f026 0607 	bic.w	r6, r6, #7
 800603e:	1d23      	adds	r3, r4, #4
 8006040:	1af2      	subs	r2, r6, r3
 8006042:	d0b6      	beq.n	8005fb2 <_malloc_r+0x22>
 8006044:	1b9b      	subs	r3, r3, r6
 8006046:	50a3      	str	r3, [r4, r2]
 8006048:	e7b3      	b.n	8005fb2 <_malloc_r+0x22>
 800604a:	6862      	ldr	r2, [r4, #4]
 800604c:	42a3      	cmp	r3, r4
 800604e:	bf0c      	ite	eq
 8006050:	6032      	streq	r2, [r6, #0]
 8006052:	605a      	strne	r2, [r3, #4]
 8006054:	e7ec      	b.n	8006030 <_malloc_r+0xa0>
 8006056:	4623      	mov	r3, r4
 8006058:	6864      	ldr	r4, [r4, #4]
 800605a:	e7b2      	b.n	8005fc2 <_malloc_r+0x32>
 800605c:	4634      	mov	r4, r6
 800605e:	6876      	ldr	r6, [r6, #4]
 8006060:	e7b9      	b.n	8005fd6 <_malloc_r+0x46>
 8006062:	230c      	movs	r3, #12
 8006064:	603b      	str	r3, [r7, #0]
 8006066:	4638      	mov	r0, r7
 8006068:	f000 fd6a 	bl	8006b40 <__malloc_unlock>
 800606c:	e7a1      	b.n	8005fb2 <_malloc_r+0x22>
 800606e:	6025      	str	r5, [r4, #0]
 8006070:	e7de      	b.n	8006030 <_malloc_r+0xa0>
 8006072:	bf00      	nop
 8006074:	2000023c 	.word	0x2000023c

08006078 <__sfputc_r>:
 8006078:	6893      	ldr	r3, [r2, #8]
 800607a:	3b01      	subs	r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	b410      	push	{r4}
 8006080:	6093      	str	r3, [r2, #8]
 8006082:	da08      	bge.n	8006096 <__sfputc_r+0x1e>
 8006084:	6994      	ldr	r4, [r2, #24]
 8006086:	42a3      	cmp	r3, r4
 8006088:	db01      	blt.n	800608e <__sfputc_r+0x16>
 800608a:	290a      	cmp	r1, #10
 800608c:	d103      	bne.n	8006096 <__sfputc_r+0x1e>
 800608e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006092:	f000 bb33 	b.w	80066fc <__swbuf_r>
 8006096:	6813      	ldr	r3, [r2, #0]
 8006098:	1c58      	adds	r0, r3, #1
 800609a:	6010      	str	r0, [r2, #0]
 800609c:	7019      	strb	r1, [r3, #0]
 800609e:	4608      	mov	r0, r1
 80060a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <__sfputs_r>:
 80060a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a8:	4606      	mov	r6, r0
 80060aa:	460f      	mov	r7, r1
 80060ac:	4614      	mov	r4, r2
 80060ae:	18d5      	adds	r5, r2, r3
 80060b0:	42ac      	cmp	r4, r5
 80060b2:	d101      	bne.n	80060b8 <__sfputs_r+0x12>
 80060b4:	2000      	movs	r0, #0
 80060b6:	e007      	b.n	80060c8 <__sfputs_r+0x22>
 80060b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060bc:	463a      	mov	r2, r7
 80060be:	4630      	mov	r0, r6
 80060c0:	f7ff ffda 	bl	8006078 <__sfputc_r>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d1f3      	bne.n	80060b0 <__sfputs_r+0xa>
 80060c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060cc <_vfiprintf_r>:
 80060cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d0:	460d      	mov	r5, r1
 80060d2:	b09d      	sub	sp, #116	; 0x74
 80060d4:	4614      	mov	r4, r2
 80060d6:	4698      	mov	r8, r3
 80060d8:	4606      	mov	r6, r0
 80060da:	b118      	cbz	r0, 80060e4 <_vfiprintf_r+0x18>
 80060dc:	6983      	ldr	r3, [r0, #24]
 80060de:	b90b      	cbnz	r3, 80060e4 <_vfiprintf_r+0x18>
 80060e0:	f7ff fe96 	bl	8005e10 <__sinit>
 80060e4:	4b89      	ldr	r3, [pc, #548]	; (800630c <_vfiprintf_r+0x240>)
 80060e6:	429d      	cmp	r5, r3
 80060e8:	d11b      	bne.n	8006122 <_vfiprintf_r+0x56>
 80060ea:	6875      	ldr	r5, [r6, #4]
 80060ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060ee:	07d9      	lsls	r1, r3, #31
 80060f0:	d405      	bmi.n	80060fe <_vfiprintf_r+0x32>
 80060f2:	89ab      	ldrh	r3, [r5, #12]
 80060f4:	059a      	lsls	r2, r3, #22
 80060f6:	d402      	bmi.n	80060fe <_vfiprintf_r+0x32>
 80060f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060fa:	f7ff ff27 	bl	8005f4c <__retarget_lock_acquire_recursive>
 80060fe:	89ab      	ldrh	r3, [r5, #12]
 8006100:	071b      	lsls	r3, r3, #28
 8006102:	d501      	bpl.n	8006108 <_vfiprintf_r+0x3c>
 8006104:	692b      	ldr	r3, [r5, #16]
 8006106:	b9eb      	cbnz	r3, 8006144 <_vfiprintf_r+0x78>
 8006108:	4629      	mov	r1, r5
 800610a:	4630      	mov	r0, r6
 800610c:	f000 fb5a 	bl	80067c4 <__swsetup_r>
 8006110:	b1c0      	cbz	r0, 8006144 <_vfiprintf_r+0x78>
 8006112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006114:	07dc      	lsls	r4, r3, #31
 8006116:	d50e      	bpl.n	8006136 <_vfiprintf_r+0x6a>
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	b01d      	add	sp, #116	; 0x74
 800611e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006122:	4b7b      	ldr	r3, [pc, #492]	; (8006310 <_vfiprintf_r+0x244>)
 8006124:	429d      	cmp	r5, r3
 8006126:	d101      	bne.n	800612c <_vfiprintf_r+0x60>
 8006128:	68b5      	ldr	r5, [r6, #8]
 800612a:	e7df      	b.n	80060ec <_vfiprintf_r+0x20>
 800612c:	4b79      	ldr	r3, [pc, #484]	; (8006314 <_vfiprintf_r+0x248>)
 800612e:	429d      	cmp	r5, r3
 8006130:	bf08      	it	eq
 8006132:	68f5      	ldreq	r5, [r6, #12]
 8006134:	e7da      	b.n	80060ec <_vfiprintf_r+0x20>
 8006136:	89ab      	ldrh	r3, [r5, #12]
 8006138:	0598      	lsls	r0, r3, #22
 800613a:	d4ed      	bmi.n	8006118 <_vfiprintf_r+0x4c>
 800613c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800613e:	f7ff ff06 	bl	8005f4e <__retarget_lock_release_recursive>
 8006142:	e7e9      	b.n	8006118 <_vfiprintf_r+0x4c>
 8006144:	2300      	movs	r3, #0
 8006146:	9309      	str	r3, [sp, #36]	; 0x24
 8006148:	2320      	movs	r3, #32
 800614a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800614e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006152:	2330      	movs	r3, #48	; 0x30
 8006154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006318 <_vfiprintf_r+0x24c>
 8006158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800615c:	f04f 0901 	mov.w	r9, #1
 8006160:	4623      	mov	r3, r4
 8006162:	469a      	mov	sl, r3
 8006164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006168:	b10a      	cbz	r2, 800616e <_vfiprintf_r+0xa2>
 800616a:	2a25      	cmp	r2, #37	; 0x25
 800616c:	d1f9      	bne.n	8006162 <_vfiprintf_r+0x96>
 800616e:	ebba 0b04 	subs.w	fp, sl, r4
 8006172:	d00b      	beq.n	800618c <_vfiprintf_r+0xc0>
 8006174:	465b      	mov	r3, fp
 8006176:	4622      	mov	r2, r4
 8006178:	4629      	mov	r1, r5
 800617a:	4630      	mov	r0, r6
 800617c:	f7ff ff93 	bl	80060a6 <__sfputs_r>
 8006180:	3001      	adds	r0, #1
 8006182:	f000 80aa 	beq.w	80062da <_vfiprintf_r+0x20e>
 8006186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006188:	445a      	add	r2, fp
 800618a:	9209      	str	r2, [sp, #36]	; 0x24
 800618c:	f89a 3000 	ldrb.w	r3, [sl]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 80a2 	beq.w	80062da <_vfiprintf_r+0x20e>
 8006196:	2300      	movs	r3, #0
 8006198:	f04f 32ff 	mov.w	r2, #4294967295
 800619c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061a0:	f10a 0a01 	add.w	sl, sl, #1
 80061a4:	9304      	str	r3, [sp, #16]
 80061a6:	9307      	str	r3, [sp, #28]
 80061a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061ac:	931a      	str	r3, [sp, #104]	; 0x68
 80061ae:	4654      	mov	r4, sl
 80061b0:	2205      	movs	r2, #5
 80061b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b6:	4858      	ldr	r0, [pc, #352]	; (8006318 <_vfiprintf_r+0x24c>)
 80061b8:	f7fa f80a 	bl	80001d0 <memchr>
 80061bc:	9a04      	ldr	r2, [sp, #16]
 80061be:	b9d8      	cbnz	r0, 80061f8 <_vfiprintf_r+0x12c>
 80061c0:	06d1      	lsls	r1, r2, #27
 80061c2:	bf44      	itt	mi
 80061c4:	2320      	movmi	r3, #32
 80061c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ca:	0713      	lsls	r3, r2, #28
 80061cc:	bf44      	itt	mi
 80061ce:	232b      	movmi	r3, #43	; 0x2b
 80061d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061d4:	f89a 3000 	ldrb.w	r3, [sl]
 80061d8:	2b2a      	cmp	r3, #42	; 0x2a
 80061da:	d015      	beq.n	8006208 <_vfiprintf_r+0x13c>
 80061dc:	9a07      	ldr	r2, [sp, #28]
 80061de:	4654      	mov	r4, sl
 80061e0:	2000      	movs	r0, #0
 80061e2:	f04f 0c0a 	mov.w	ip, #10
 80061e6:	4621      	mov	r1, r4
 80061e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061ec:	3b30      	subs	r3, #48	; 0x30
 80061ee:	2b09      	cmp	r3, #9
 80061f0:	d94e      	bls.n	8006290 <_vfiprintf_r+0x1c4>
 80061f2:	b1b0      	cbz	r0, 8006222 <_vfiprintf_r+0x156>
 80061f4:	9207      	str	r2, [sp, #28]
 80061f6:	e014      	b.n	8006222 <_vfiprintf_r+0x156>
 80061f8:	eba0 0308 	sub.w	r3, r0, r8
 80061fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006200:	4313      	orrs	r3, r2
 8006202:	9304      	str	r3, [sp, #16]
 8006204:	46a2      	mov	sl, r4
 8006206:	e7d2      	b.n	80061ae <_vfiprintf_r+0xe2>
 8006208:	9b03      	ldr	r3, [sp, #12]
 800620a:	1d19      	adds	r1, r3, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	9103      	str	r1, [sp, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	bfbb      	ittet	lt
 8006214:	425b      	neglt	r3, r3
 8006216:	f042 0202 	orrlt.w	r2, r2, #2
 800621a:	9307      	strge	r3, [sp, #28]
 800621c:	9307      	strlt	r3, [sp, #28]
 800621e:	bfb8      	it	lt
 8006220:	9204      	strlt	r2, [sp, #16]
 8006222:	7823      	ldrb	r3, [r4, #0]
 8006224:	2b2e      	cmp	r3, #46	; 0x2e
 8006226:	d10c      	bne.n	8006242 <_vfiprintf_r+0x176>
 8006228:	7863      	ldrb	r3, [r4, #1]
 800622a:	2b2a      	cmp	r3, #42	; 0x2a
 800622c:	d135      	bne.n	800629a <_vfiprintf_r+0x1ce>
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	1d1a      	adds	r2, r3, #4
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	9203      	str	r2, [sp, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	bfb8      	it	lt
 800623a:	f04f 33ff 	movlt.w	r3, #4294967295
 800623e:	3402      	adds	r4, #2
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006328 <_vfiprintf_r+0x25c>
 8006246:	7821      	ldrb	r1, [r4, #0]
 8006248:	2203      	movs	r2, #3
 800624a:	4650      	mov	r0, sl
 800624c:	f7f9 ffc0 	bl	80001d0 <memchr>
 8006250:	b140      	cbz	r0, 8006264 <_vfiprintf_r+0x198>
 8006252:	2340      	movs	r3, #64	; 0x40
 8006254:	eba0 000a 	sub.w	r0, r0, sl
 8006258:	fa03 f000 	lsl.w	r0, r3, r0
 800625c:	9b04      	ldr	r3, [sp, #16]
 800625e:	4303      	orrs	r3, r0
 8006260:	3401      	adds	r4, #1
 8006262:	9304      	str	r3, [sp, #16]
 8006264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006268:	482c      	ldr	r0, [pc, #176]	; (800631c <_vfiprintf_r+0x250>)
 800626a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800626e:	2206      	movs	r2, #6
 8006270:	f7f9 ffae 	bl	80001d0 <memchr>
 8006274:	2800      	cmp	r0, #0
 8006276:	d03f      	beq.n	80062f8 <_vfiprintf_r+0x22c>
 8006278:	4b29      	ldr	r3, [pc, #164]	; (8006320 <_vfiprintf_r+0x254>)
 800627a:	bb1b      	cbnz	r3, 80062c4 <_vfiprintf_r+0x1f8>
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	3307      	adds	r3, #7
 8006280:	f023 0307 	bic.w	r3, r3, #7
 8006284:	3308      	adds	r3, #8
 8006286:	9303      	str	r3, [sp, #12]
 8006288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628a:	443b      	add	r3, r7
 800628c:	9309      	str	r3, [sp, #36]	; 0x24
 800628e:	e767      	b.n	8006160 <_vfiprintf_r+0x94>
 8006290:	fb0c 3202 	mla	r2, ip, r2, r3
 8006294:	460c      	mov	r4, r1
 8006296:	2001      	movs	r0, #1
 8006298:	e7a5      	b.n	80061e6 <_vfiprintf_r+0x11a>
 800629a:	2300      	movs	r3, #0
 800629c:	3401      	adds	r4, #1
 800629e:	9305      	str	r3, [sp, #20]
 80062a0:	4619      	mov	r1, r3
 80062a2:	f04f 0c0a 	mov.w	ip, #10
 80062a6:	4620      	mov	r0, r4
 80062a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ac:	3a30      	subs	r2, #48	; 0x30
 80062ae:	2a09      	cmp	r2, #9
 80062b0:	d903      	bls.n	80062ba <_vfiprintf_r+0x1ee>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0c5      	beq.n	8006242 <_vfiprintf_r+0x176>
 80062b6:	9105      	str	r1, [sp, #20]
 80062b8:	e7c3      	b.n	8006242 <_vfiprintf_r+0x176>
 80062ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80062be:	4604      	mov	r4, r0
 80062c0:	2301      	movs	r3, #1
 80062c2:	e7f0      	b.n	80062a6 <_vfiprintf_r+0x1da>
 80062c4:	ab03      	add	r3, sp, #12
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	462a      	mov	r2, r5
 80062ca:	4b16      	ldr	r3, [pc, #88]	; (8006324 <_vfiprintf_r+0x258>)
 80062cc:	a904      	add	r1, sp, #16
 80062ce:	4630      	mov	r0, r6
 80062d0:	f3af 8000 	nop.w
 80062d4:	4607      	mov	r7, r0
 80062d6:	1c78      	adds	r0, r7, #1
 80062d8:	d1d6      	bne.n	8006288 <_vfiprintf_r+0x1bc>
 80062da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062dc:	07d9      	lsls	r1, r3, #31
 80062de:	d405      	bmi.n	80062ec <_vfiprintf_r+0x220>
 80062e0:	89ab      	ldrh	r3, [r5, #12]
 80062e2:	059a      	lsls	r2, r3, #22
 80062e4:	d402      	bmi.n	80062ec <_vfiprintf_r+0x220>
 80062e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062e8:	f7ff fe31 	bl	8005f4e <__retarget_lock_release_recursive>
 80062ec:	89ab      	ldrh	r3, [r5, #12]
 80062ee:	065b      	lsls	r3, r3, #25
 80062f0:	f53f af12 	bmi.w	8006118 <_vfiprintf_r+0x4c>
 80062f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062f6:	e711      	b.n	800611c <_vfiprintf_r+0x50>
 80062f8:	ab03      	add	r3, sp, #12
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	462a      	mov	r2, r5
 80062fe:	4b09      	ldr	r3, [pc, #36]	; (8006324 <_vfiprintf_r+0x258>)
 8006300:	a904      	add	r1, sp, #16
 8006302:	4630      	mov	r0, r6
 8006304:	f000 f880 	bl	8006408 <_printf_i>
 8006308:	e7e4      	b.n	80062d4 <_vfiprintf_r+0x208>
 800630a:	bf00      	nop
 800630c:	08006cd8 	.word	0x08006cd8
 8006310:	08006cf8 	.word	0x08006cf8
 8006314:	08006cb8 	.word	0x08006cb8
 8006318:	08006d18 	.word	0x08006d18
 800631c:	08006d22 	.word	0x08006d22
 8006320:	00000000 	.word	0x00000000
 8006324:	080060a7 	.word	0x080060a7
 8006328:	08006d1e 	.word	0x08006d1e

0800632c <_printf_common>:
 800632c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006330:	4616      	mov	r6, r2
 8006332:	4699      	mov	r9, r3
 8006334:	688a      	ldr	r2, [r1, #8]
 8006336:	690b      	ldr	r3, [r1, #16]
 8006338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800633c:	4293      	cmp	r3, r2
 800633e:	bfb8      	it	lt
 8006340:	4613      	movlt	r3, r2
 8006342:	6033      	str	r3, [r6, #0]
 8006344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006348:	4607      	mov	r7, r0
 800634a:	460c      	mov	r4, r1
 800634c:	b10a      	cbz	r2, 8006352 <_printf_common+0x26>
 800634e:	3301      	adds	r3, #1
 8006350:	6033      	str	r3, [r6, #0]
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	0699      	lsls	r1, r3, #26
 8006356:	bf42      	ittt	mi
 8006358:	6833      	ldrmi	r3, [r6, #0]
 800635a:	3302      	addmi	r3, #2
 800635c:	6033      	strmi	r3, [r6, #0]
 800635e:	6825      	ldr	r5, [r4, #0]
 8006360:	f015 0506 	ands.w	r5, r5, #6
 8006364:	d106      	bne.n	8006374 <_printf_common+0x48>
 8006366:	f104 0a19 	add.w	sl, r4, #25
 800636a:	68e3      	ldr	r3, [r4, #12]
 800636c:	6832      	ldr	r2, [r6, #0]
 800636e:	1a9b      	subs	r3, r3, r2
 8006370:	42ab      	cmp	r3, r5
 8006372:	dc26      	bgt.n	80063c2 <_printf_common+0x96>
 8006374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006378:	1e13      	subs	r3, r2, #0
 800637a:	6822      	ldr	r2, [r4, #0]
 800637c:	bf18      	it	ne
 800637e:	2301      	movne	r3, #1
 8006380:	0692      	lsls	r2, r2, #26
 8006382:	d42b      	bmi.n	80063dc <_printf_common+0xb0>
 8006384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006388:	4649      	mov	r1, r9
 800638a:	4638      	mov	r0, r7
 800638c:	47c0      	blx	r8
 800638e:	3001      	adds	r0, #1
 8006390:	d01e      	beq.n	80063d0 <_printf_common+0xa4>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	68e5      	ldr	r5, [r4, #12]
 8006396:	6832      	ldr	r2, [r6, #0]
 8006398:	f003 0306 	and.w	r3, r3, #6
 800639c:	2b04      	cmp	r3, #4
 800639e:	bf08      	it	eq
 80063a0:	1aad      	subeq	r5, r5, r2
 80063a2:	68a3      	ldr	r3, [r4, #8]
 80063a4:	6922      	ldr	r2, [r4, #16]
 80063a6:	bf0c      	ite	eq
 80063a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063ac:	2500      	movne	r5, #0
 80063ae:	4293      	cmp	r3, r2
 80063b0:	bfc4      	itt	gt
 80063b2:	1a9b      	subgt	r3, r3, r2
 80063b4:	18ed      	addgt	r5, r5, r3
 80063b6:	2600      	movs	r6, #0
 80063b8:	341a      	adds	r4, #26
 80063ba:	42b5      	cmp	r5, r6
 80063bc:	d11a      	bne.n	80063f4 <_printf_common+0xc8>
 80063be:	2000      	movs	r0, #0
 80063c0:	e008      	b.n	80063d4 <_printf_common+0xa8>
 80063c2:	2301      	movs	r3, #1
 80063c4:	4652      	mov	r2, sl
 80063c6:	4649      	mov	r1, r9
 80063c8:	4638      	mov	r0, r7
 80063ca:	47c0      	blx	r8
 80063cc:	3001      	adds	r0, #1
 80063ce:	d103      	bne.n	80063d8 <_printf_common+0xac>
 80063d0:	f04f 30ff 	mov.w	r0, #4294967295
 80063d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d8:	3501      	adds	r5, #1
 80063da:	e7c6      	b.n	800636a <_printf_common+0x3e>
 80063dc:	18e1      	adds	r1, r4, r3
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	2030      	movs	r0, #48	; 0x30
 80063e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063e6:	4422      	add	r2, r4
 80063e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063f0:	3302      	adds	r3, #2
 80063f2:	e7c7      	b.n	8006384 <_printf_common+0x58>
 80063f4:	2301      	movs	r3, #1
 80063f6:	4622      	mov	r2, r4
 80063f8:	4649      	mov	r1, r9
 80063fa:	4638      	mov	r0, r7
 80063fc:	47c0      	blx	r8
 80063fe:	3001      	adds	r0, #1
 8006400:	d0e6      	beq.n	80063d0 <_printf_common+0xa4>
 8006402:	3601      	adds	r6, #1
 8006404:	e7d9      	b.n	80063ba <_printf_common+0x8e>
	...

08006408 <_printf_i>:
 8006408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800640c:	7e0f      	ldrb	r7, [r1, #24]
 800640e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006410:	2f78      	cmp	r7, #120	; 0x78
 8006412:	4691      	mov	r9, r2
 8006414:	4680      	mov	r8, r0
 8006416:	460c      	mov	r4, r1
 8006418:	469a      	mov	sl, r3
 800641a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800641e:	d807      	bhi.n	8006430 <_printf_i+0x28>
 8006420:	2f62      	cmp	r7, #98	; 0x62
 8006422:	d80a      	bhi.n	800643a <_printf_i+0x32>
 8006424:	2f00      	cmp	r7, #0
 8006426:	f000 80d8 	beq.w	80065da <_printf_i+0x1d2>
 800642a:	2f58      	cmp	r7, #88	; 0x58
 800642c:	f000 80a3 	beq.w	8006576 <_printf_i+0x16e>
 8006430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006438:	e03a      	b.n	80064b0 <_printf_i+0xa8>
 800643a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800643e:	2b15      	cmp	r3, #21
 8006440:	d8f6      	bhi.n	8006430 <_printf_i+0x28>
 8006442:	a101      	add	r1, pc, #4	; (adr r1, 8006448 <_printf_i+0x40>)
 8006444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006448:	080064a1 	.word	0x080064a1
 800644c:	080064b5 	.word	0x080064b5
 8006450:	08006431 	.word	0x08006431
 8006454:	08006431 	.word	0x08006431
 8006458:	08006431 	.word	0x08006431
 800645c:	08006431 	.word	0x08006431
 8006460:	080064b5 	.word	0x080064b5
 8006464:	08006431 	.word	0x08006431
 8006468:	08006431 	.word	0x08006431
 800646c:	08006431 	.word	0x08006431
 8006470:	08006431 	.word	0x08006431
 8006474:	080065c1 	.word	0x080065c1
 8006478:	080064e5 	.word	0x080064e5
 800647c:	080065a3 	.word	0x080065a3
 8006480:	08006431 	.word	0x08006431
 8006484:	08006431 	.word	0x08006431
 8006488:	080065e3 	.word	0x080065e3
 800648c:	08006431 	.word	0x08006431
 8006490:	080064e5 	.word	0x080064e5
 8006494:	08006431 	.word	0x08006431
 8006498:	08006431 	.word	0x08006431
 800649c:	080065ab 	.word	0x080065ab
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	1d1a      	adds	r2, r3, #4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	602a      	str	r2, [r5, #0]
 80064a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064b0:	2301      	movs	r3, #1
 80064b2:	e0a3      	b.n	80065fc <_printf_i+0x1f4>
 80064b4:	6820      	ldr	r0, [r4, #0]
 80064b6:	6829      	ldr	r1, [r5, #0]
 80064b8:	0606      	lsls	r6, r0, #24
 80064ba:	f101 0304 	add.w	r3, r1, #4
 80064be:	d50a      	bpl.n	80064d6 <_printf_i+0xce>
 80064c0:	680e      	ldr	r6, [r1, #0]
 80064c2:	602b      	str	r3, [r5, #0]
 80064c4:	2e00      	cmp	r6, #0
 80064c6:	da03      	bge.n	80064d0 <_printf_i+0xc8>
 80064c8:	232d      	movs	r3, #45	; 0x2d
 80064ca:	4276      	negs	r6, r6
 80064cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d0:	485e      	ldr	r0, [pc, #376]	; (800664c <_printf_i+0x244>)
 80064d2:	230a      	movs	r3, #10
 80064d4:	e019      	b.n	800650a <_printf_i+0x102>
 80064d6:	680e      	ldr	r6, [r1, #0]
 80064d8:	602b      	str	r3, [r5, #0]
 80064da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064de:	bf18      	it	ne
 80064e0:	b236      	sxthne	r6, r6
 80064e2:	e7ef      	b.n	80064c4 <_printf_i+0xbc>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	6820      	ldr	r0, [r4, #0]
 80064e8:	1d19      	adds	r1, r3, #4
 80064ea:	6029      	str	r1, [r5, #0]
 80064ec:	0601      	lsls	r1, r0, #24
 80064ee:	d501      	bpl.n	80064f4 <_printf_i+0xec>
 80064f0:	681e      	ldr	r6, [r3, #0]
 80064f2:	e002      	b.n	80064fa <_printf_i+0xf2>
 80064f4:	0646      	lsls	r6, r0, #25
 80064f6:	d5fb      	bpl.n	80064f0 <_printf_i+0xe8>
 80064f8:	881e      	ldrh	r6, [r3, #0]
 80064fa:	4854      	ldr	r0, [pc, #336]	; (800664c <_printf_i+0x244>)
 80064fc:	2f6f      	cmp	r7, #111	; 0x6f
 80064fe:	bf0c      	ite	eq
 8006500:	2308      	moveq	r3, #8
 8006502:	230a      	movne	r3, #10
 8006504:	2100      	movs	r1, #0
 8006506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800650a:	6865      	ldr	r5, [r4, #4]
 800650c:	60a5      	str	r5, [r4, #8]
 800650e:	2d00      	cmp	r5, #0
 8006510:	bfa2      	ittt	ge
 8006512:	6821      	ldrge	r1, [r4, #0]
 8006514:	f021 0104 	bicge.w	r1, r1, #4
 8006518:	6021      	strge	r1, [r4, #0]
 800651a:	b90e      	cbnz	r6, 8006520 <_printf_i+0x118>
 800651c:	2d00      	cmp	r5, #0
 800651e:	d04d      	beq.n	80065bc <_printf_i+0x1b4>
 8006520:	4615      	mov	r5, r2
 8006522:	fbb6 f1f3 	udiv	r1, r6, r3
 8006526:	fb03 6711 	mls	r7, r3, r1, r6
 800652a:	5dc7      	ldrb	r7, [r0, r7]
 800652c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006530:	4637      	mov	r7, r6
 8006532:	42bb      	cmp	r3, r7
 8006534:	460e      	mov	r6, r1
 8006536:	d9f4      	bls.n	8006522 <_printf_i+0x11a>
 8006538:	2b08      	cmp	r3, #8
 800653a:	d10b      	bne.n	8006554 <_printf_i+0x14c>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	07de      	lsls	r6, r3, #31
 8006540:	d508      	bpl.n	8006554 <_printf_i+0x14c>
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	6861      	ldr	r1, [r4, #4]
 8006546:	4299      	cmp	r1, r3
 8006548:	bfde      	ittt	le
 800654a:	2330      	movle	r3, #48	; 0x30
 800654c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006550:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006554:	1b52      	subs	r2, r2, r5
 8006556:	6122      	str	r2, [r4, #16]
 8006558:	f8cd a000 	str.w	sl, [sp]
 800655c:	464b      	mov	r3, r9
 800655e:	aa03      	add	r2, sp, #12
 8006560:	4621      	mov	r1, r4
 8006562:	4640      	mov	r0, r8
 8006564:	f7ff fee2 	bl	800632c <_printf_common>
 8006568:	3001      	adds	r0, #1
 800656a:	d14c      	bne.n	8006606 <_printf_i+0x1fe>
 800656c:	f04f 30ff 	mov.w	r0, #4294967295
 8006570:	b004      	add	sp, #16
 8006572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006576:	4835      	ldr	r0, [pc, #212]	; (800664c <_printf_i+0x244>)
 8006578:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800657c:	6829      	ldr	r1, [r5, #0]
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	f851 6b04 	ldr.w	r6, [r1], #4
 8006584:	6029      	str	r1, [r5, #0]
 8006586:	061d      	lsls	r5, r3, #24
 8006588:	d514      	bpl.n	80065b4 <_printf_i+0x1ac>
 800658a:	07df      	lsls	r7, r3, #31
 800658c:	bf44      	itt	mi
 800658e:	f043 0320 	orrmi.w	r3, r3, #32
 8006592:	6023      	strmi	r3, [r4, #0]
 8006594:	b91e      	cbnz	r6, 800659e <_printf_i+0x196>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	f023 0320 	bic.w	r3, r3, #32
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	2310      	movs	r3, #16
 80065a0:	e7b0      	b.n	8006504 <_printf_i+0xfc>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	f043 0320 	orr.w	r3, r3, #32
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	2378      	movs	r3, #120	; 0x78
 80065ac:	4828      	ldr	r0, [pc, #160]	; (8006650 <_printf_i+0x248>)
 80065ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065b2:	e7e3      	b.n	800657c <_printf_i+0x174>
 80065b4:	0659      	lsls	r1, r3, #25
 80065b6:	bf48      	it	mi
 80065b8:	b2b6      	uxthmi	r6, r6
 80065ba:	e7e6      	b.n	800658a <_printf_i+0x182>
 80065bc:	4615      	mov	r5, r2
 80065be:	e7bb      	b.n	8006538 <_printf_i+0x130>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	6826      	ldr	r6, [r4, #0]
 80065c4:	6961      	ldr	r1, [r4, #20]
 80065c6:	1d18      	adds	r0, r3, #4
 80065c8:	6028      	str	r0, [r5, #0]
 80065ca:	0635      	lsls	r5, r6, #24
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	d501      	bpl.n	80065d4 <_printf_i+0x1cc>
 80065d0:	6019      	str	r1, [r3, #0]
 80065d2:	e002      	b.n	80065da <_printf_i+0x1d2>
 80065d4:	0670      	lsls	r0, r6, #25
 80065d6:	d5fb      	bpl.n	80065d0 <_printf_i+0x1c8>
 80065d8:	8019      	strh	r1, [r3, #0]
 80065da:	2300      	movs	r3, #0
 80065dc:	6123      	str	r3, [r4, #16]
 80065de:	4615      	mov	r5, r2
 80065e0:	e7ba      	b.n	8006558 <_printf_i+0x150>
 80065e2:	682b      	ldr	r3, [r5, #0]
 80065e4:	1d1a      	adds	r2, r3, #4
 80065e6:	602a      	str	r2, [r5, #0]
 80065e8:	681d      	ldr	r5, [r3, #0]
 80065ea:	6862      	ldr	r2, [r4, #4]
 80065ec:	2100      	movs	r1, #0
 80065ee:	4628      	mov	r0, r5
 80065f0:	f7f9 fdee 	bl	80001d0 <memchr>
 80065f4:	b108      	cbz	r0, 80065fa <_printf_i+0x1f2>
 80065f6:	1b40      	subs	r0, r0, r5
 80065f8:	6060      	str	r0, [r4, #4]
 80065fa:	6863      	ldr	r3, [r4, #4]
 80065fc:	6123      	str	r3, [r4, #16]
 80065fe:	2300      	movs	r3, #0
 8006600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006604:	e7a8      	b.n	8006558 <_printf_i+0x150>
 8006606:	6923      	ldr	r3, [r4, #16]
 8006608:	462a      	mov	r2, r5
 800660a:	4649      	mov	r1, r9
 800660c:	4640      	mov	r0, r8
 800660e:	47d0      	blx	sl
 8006610:	3001      	adds	r0, #1
 8006612:	d0ab      	beq.n	800656c <_printf_i+0x164>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	079b      	lsls	r3, r3, #30
 8006618:	d413      	bmi.n	8006642 <_printf_i+0x23a>
 800661a:	68e0      	ldr	r0, [r4, #12]
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	4298      	cmp	r0, r3
 8006620:	bfb8      	it	lt
 8006622:	4618      	movlt	r0, r3
 8006624:	e7a4      	b.n	8006570 <_printf_i+0x168>
 8006626:	2301      	movs	r3, #1
 8006628:	4632      	mov	r2, r6
 800662a:	4649      	mov	r1, r9
 800662c:	4640      	mov	r0, r8
 800662e:	47d0      	blx	sl
 8006630:	3001      	adds	r0, #1
 8006632:	d09b      	beq.n	800656c <_printf_i+0x164>
 8006634:	3501      	adds	r5, #1
 8006636:	68e3      	ldr	r3, [r4, #12]
 8006638:	9903      	ldr	r1, [sp, #12]
 800663a:	1a5b      	subs	r3, r3, r1
 800663c:	42ab      	cmp	r3, r5
 800663e:	dcf2      	bgt.n	8006626 <_printf_i+0x21e>
 8006640:	e7eb      	b.n	800661a <_printf_i+0x212>
 8006642:	2500      	movs	r5, #0
 8006644:	f104 0619 	add.w	r6, r4, #25
 8006648:	e7f5      	b.n	8006636 <_printf_i+0x22e>
 800664a:	bf00      	nop
 800664c:	08006d29 	.word	0x08006d29
 8006650:	08006d3a 	.word	0x08006d3a

08006654 <_sbrk_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d06      	ldr	r5, [pc, #24]	; (8006670 <_sbrk_r+0x1c>)
 8006658:	2300      	movs	r3, #0
 800665a:	4604      	mov	r4, r0
 800665c:	4608      	mov	r0, r1
 800665e:	602b      	str	r3, [r5, #0]
 8006660:	f7fa fc2c 	bl	8000ebc <_sbrk>
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	d102      	bne.n	800666e <_sbrk_r+0x1a>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	b103      	cbz	r3, 800666e <_sbrk_r+0x1a>
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	bd38      	pop	{r3, r4, r5, pc}
 8006670:	20000244 	.word	0x20000244

08006674 <__sread>:
 8006674:	b510      	push	{r4, lr}
 8006676:	460c      	mov	r4, r1
 8006678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667c:	f000 fab2 	bl	8006be4 <_read_r>
 8006680:	2800      	cmp	r0, #0
 8006682:	bfab      	itete	ge
 8006684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006686:	89a3      	ldrhlt	r3, [r4, #12]
 8006688:	181b      	addge	r3, r3, r0
 800668a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800668e:	bfac      	ite	ge
 8006690:	6563      	strge	r3, [r4, #84]	; 0x54
 8006692:	81a3      	strhlt	r3, [r4, #12]
 8006694:	bd10      	pop	{r4, pc}

08006696 <__swrite>:
 8006696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800669a:	461f      	mov	r7, r3
 800669c:	898b      	ldrh	r3, [r1, #12]
 800669e:	05db      	lsls	r3, r3, #23
 80066a0:	4605      	mov	r5, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	4616      	mov	r6, r2
 80066a6:	d505      	bpl.n	80066b4 <__swrite+0x1e>
 80066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ac:	2302      	movs	r3, #2
 80066ae:	2200      	movs	r2, #0
 80066b0:	f000 f9c8 	bl	8006a44 <_lseek_r>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	4632      	mov	r2, r6
 80066c2:	463b      	mov	r3, r7
 80066c4:	4628      	mov	r0, r5
 80066c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ca:	f000 b869 	b.w	80067a0 <_write_r>

080066ce <__sseek>:
 80066ce:	b510      	push	{r4, lr}
 80066d0:	460c      	mov	r4, r1
 80066d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d6:	f000 f9b5 	bl	8006a44 <_lseek_r>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	bf15      	itete	ne
 80066e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80066e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066ea:	81a3      	strheq	r3, [r4, #12]
 80066ec:	bf18      	it	ne
 80066ee:	81a3      	strhne	r3, [r4, #12]
 80066f0:	bd10      	pop	{r4, pc}

080066f2 <__sclose>:
 80066f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f6:	f000 b8d3 	b.w	80068a0 <_close_r>
	...

080066fc <__swbuf_r>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	460e      	mov	r6, r1
 8006700:	4614      	mov	r4, r2
 8006702:	4605      	mov	r5, r0
 8006704:	b118      	cbz	r0, 800670e <__swbuf_r+0x12>
 8006706:	6983      	ldr	r3, [r0, #24]
 8006708:	b90b      	cbnz	r3, 800670e <__swbuf_r+0x12>
 800670a:	f7ff fb81 	bl	8005e10 <__sinit>
 800670e:	4b21      	ldr	r3, [pc, #132]	; (8006794 <__swbuf_r+0x98>)
 8006710:	429c      	cmp	r4, r3
 8006712:	d12b      	bne.n	800676c <__swbuf_r+0x70>
 8006714:	686c      	ldr	r4, [r5, #4]
 8006716:	69a3      	ldr	r3, [r4, #24]
 8006718:	60a3      	str	r3, [r4, #8]
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	071a      	lsls	r2, r3, #28
 800671e:	d52f      	bpl.n	8006780 <__swbuf_r+0x84>
 8006720:	6923      	ldr	r3, [r4, #16]
 8006722:	b36b      	cbz	r3, 8006780 <__swbuf_r+0x84>
 8006724:	6923      	ldr	r3, [r4, #16]
 8006726:	6820      	ldr	r0, [r4, #0]
 8006728:	1ac0      	subs	r0, r0, r3
 800672a:	6963      	ldr	r3, [r4, #20]
 800672c:	b2f6      	uxtb	r6, r6
 800672e:	4283      	cmp	r3, r0
 8006730:	4637      	mov	r7, r6
 8006732:	dc04      	bgt.n	800673e <__swbuf_r+0x42>
 8006734:	4621      	mov	r1, r4
 8006736:	4628      	mov	r0, r5
 8006738:	f000 f948 	bl	80069cc <_fflush_r>
 800673c:	bb30      	cbnz	r0, 800678c <__swbuf_r+0x90>
 800673e:	68a3      	ldr	r3, [r4, #8]
 8006740:	3b01      	subs	r3, #1
 8006742:	60a3      	str	r3, [r4, #8]
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	6022      	str	r2, [r4, #0]
 800674a:	701e      	strb	r6, [r3, #0]
 800674c:	6963      	ldr	r3, [r4, #20]
 800674e:	3001      	adds	r0, #1
 8006750:	4283      	cmp	r3, r0
 8006752:	d004      	beq.n	800675e <__swbuf_r+0x62>
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	07db      	lsls	r3, r3, #31
 8006758:	d506      	bpl.n	8006768 <__swbuf_r+0x6c>
 800675a:	2e0a      	cmp	r6, #10
 800675c:	d104      	bne.n	8006768 <__swbuf_r+0x6c>
 800675e:	4621      	mov	r1, r4
 8006760:	4628      	mov	r0, r5
 8006762:	f000 f933 	bl	80069cc <_fflush_r>
 8006766:	b988      	cbnz	r0, 800678c <__swbuf_r+0x90>
 8006768:	4638      	mov	r0, r7
 800676a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <__swbuf_r+0x9c>)
 800676e:	429c      	cmp	r4, r3
 8006770:	d101      	bne.n	8006776 <__swbuf_r+0x7a>
 8006772:	68ac      	ldr	r4, [r5, #8]
 8006774:	e7cf      	b.n	8006716 <__swbuf_r+0x1a>
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <__swbuf_r+0xa0>)
 8006778:	429c      	cmp	r4, r3
 800677a:	bf08      	it	eq
 800677c:	68ec      	ldreq	r4, [r5, #12]
 800677e:	e7ca      	b.n	8006716 <__swbuf_r+0x1a>
 8006780:	4621      	mov	r1, r4
 8006782:	4628      	mov	r0, r5
 8006784:	f000 f81e 	bl	80067c4 <__swsetup_r>
 8006788:	2800      	cmp	r0, #0
 800678a:	d0cb      	beq.n	8006724 <__swbuf_r+0x28>
 800678c:	f04f 37ff 	mov.w	r7, #4294967295
 8006790:	e7ea      	b.n	8006768 <__swbuf_r+0x6c>
 8006792:	bf00      	nop
 8006794:	08006cd8 	.word	0x08006cd8
 8006798:	08006cf8 	.word	0x08006cf8
 800679c:	08006cb8 	.word	0x08006cb8

080067a0 <_write_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4d07      	ldr	r5, [pc, #28]	; (80067c0 <_write_r+0x20>)
 80067a4:	4604      	mov	r4, r0
 80067a6:	4608      	mov	r0, r1
 80067a8:	4611      	mov	r1, r2
 80067aa:	2200      	movs	r2, #0
 80067ac:	602a      	str	r2, [r5, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f7fa fb33 	bl	8000e1a <_write>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d102      	bne.n	80067be <_write_r+0x1e>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	b103      	cbz	r3, 80067be <_write_r+0x1e>
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	bd38      	pop	{r3, r4, r5, pc}
 80067c0:	20000244 	.word	0x20000244

080067c4 <__swsetup_r>:
 80067c4:	4b32      	ldr	r3, [pc, #200]	; (8006890 <__swsetup_r+0xcc>)
 80067c6:	b570      	push	{r4, r5, r6, lr}
 80067c8:	681d      	ldr	r5, [r3, #0]
 80067ca:	4606      	mov	r6, r0
 80067cc:	460c      	mov	r4, r1
 80067ce:	b125      	cbz	r5, 80067da <__swsetup_r+0x16>
 80067d0:	69ab      	ldr	r3, [r5, #24]
 80067d2:	b913      	cbnz	r3, 80067da <__swsetup_r+0x16>
 80067d4:	4628      	mov	r0, r5
 80067d6:	f7ff fb1b 	bl	8005e10 <__sinit>
 80067da:	4b2e      	ldr	r3, [pc, #184]	; (8006894 <__swsetup_r+0xd0>)
 80067dc:	429c      	cmp	r4, r3
 80067de:	d10f      	bne.n	8006800 <__swsetup_r+0x3c>
 80067e0:	686c      	ldr	r4, [r5, #4]
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067e8:	0719      	lsls	r1, r3, #28
 80067ea:	d42c      	bmi.n	8006846 <__swsetup_r+0x82>
 80067ec:	06dd      	lsls	r5, r3, #27
 80067ee:	d411      	bmi.n	8006814 <__swsetup_r+0x50>
 80067f0:	2309      	movs	r3, #9
 80067f2:	6033      	str	r3, [r6, #0]
 80067f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	f04f 30ff 	mov.w	r0, #4294967295
 80067fe:	e03e      	b.n	800687e <__swsetup_r+0xba>
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <__swsetup_r+0xd4>)
 8006802:	429c      	cmp	r4, r3
 8006804:	d101      	bne.n	800680a <__swsetup_r+0x46>
 8006806:	68ac      	ldr	r4, [r5, #8]
 8006808:	e7eb      	b.n	80067e2 <__swsetup_r+0x1e>
 800680a:	4b24      	ldr	r3, [pc, #144]	; (800689c <__swsetup_r+0xd8>)
 800680c:	429c      	cmp	r4, r3
 800680e:	bf08      	it	eq
 8006810:	68ec      	ldreq	r4, [r5, #12]
 8006812:	e7e6      	b.n	80067e2 <__swsetup_r+0x1e>
 8006814:	0758      	lsls	r0, r3, #29
 8006816:	d512      	bpl.n	800683e <__swsetup_r+0x7a>
 8006818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800681a:	b141      	cbz	r1, 800682e <__swsetup_r+0x6a>
 800681c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006820:	4299      	cmp	r1, r3
 8006822:	d002      	beq.n	800682a <__swsetup_r+0x66>
 8006824:	4630      	mov	r0, r6
 8006826:	f000 f991 	bl	8006b4c <_free_r>
 800682a:	2300      	movs	r3, #0
 800682c:	6363      	str	r3, [r4, #52]	; 0x34
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006834:	81a3      	strh	r3, [r4, #12]
 8006836:	2300      	movs	r3, #0
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	f043 0308 	orr.w	r3, r3, #8
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	6923      	ldr	r3, [r4, #16]
 8006848:	b94b      	cbnz	r3, 800685e <__swsetup_r+0x9a>
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006854:	d003      	beq.n	800685e <__swsetup_r+0x9a>
 8006856:	4621      	mov	r1, r4
 8006858:	4630      	mov	r0, r6
 800685a:	f000 f92b 	bl	8006ab4 <__smakebuf_r>
 800685e:	89a0      	ldrh	r0, [r4, #12]
 8006860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006864:	f010 0301 	ands.w	r3, r0, #1
 8006868:	d00a      	beq.n	8006880 <__swsetup_r+0xbc>
 800686a:	2300      	movs	r3, #0
 800686c:	60a3      	str	r3, [r4, #8]
 800686e:	6963      	ldr	r3, [r4, #20]
 8006870:	425b      	negs	r3, r3
 8006872:	61a3      	str	r3, [r4, #24]
 8006874:	6923      	ldr	r3, [r4, #16]
 8006876:	b943      	cbnz	r3, 800688a <__swsetup_r+0xc6>
 8006878:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800687c:	d1ba      	bne.n	80067f4 <__swsetup_r+0x30>
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	0781      	lsls	r1, r0, #30
 8006882:	bf58      	it	pl
 8006884:	6963      	ldrpl	r3, [r4, #20]
 8006886:	60a3      	str	r3, [r4, #8]
 8006888:	e7f4      	b.n	8006874 <__swsetup_r+0xb0>
 800688a:	2000      	movs	r0, #0
 800688c:	e7f7      	b.n	800687e <__swsetup_r+0xba>
 800688e:	bf00      	nop
 8006890:	2000000c 	.word	0x2000000c
 8006894:	08006cd8 	.word	0x08006cd8
 8006898:	08006cf8 	.word	0x08006cf8
 800689c:	08006cb8 	.word	0x08006cb8

080068a0 <_close_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4d06      	ldr	r5, [pc, #24]	; (80068bc <_close_r+0x1c>)
 80068a4:	2300      	movs	r3, #0
 80068a6:	4604      	mov	r4, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	f7fa fad1 	bl	8000e52 <_close>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d102      	bne.n	80068ba <_close_r+0x1a>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	b103      	cbz	r3, 80068ba <_close_r+0x1a>
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	20000244 	.word	0x20000244

080068c0 <__sflush_r>:
 80068c0:	898a      	ldrh	r2, [r1, #12]
 80068c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c6:	4605      	mov	r5, r0
 80068c8:	0710      	lsls	r0, r2, #28
 80068ca:	460c      	mov	r4, r1
 80068cc:	d458      	bmi.n	8006980 <__sflush_r+0xc0>
 80068ce:	684b      	ldr	r3, [r1, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dc05      	bgt.n	80068e0 <__sflush_r+0x20>
 80068d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dc02      	bgt.n	80068e0 <__sflush_r+0x20>
 80068da:	2000      	movs	r0, #0
 80068dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068e2:	2e00      	cmp	r6, #0
 80068e4:	d0f9      	beq.n	80068da <__sflush_r+0x1a>
 80068e6:	2300      	movs	r3, #0
 80068e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068ec:	682f      	ldr	r7, [r5, #0]
 80068ee:	602b      	str	r3, [r5, #0]
 80068f0:	d032      	beq.n	8006958 <__sflush_r+0x98>
 80068f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	075a      	lsls	r2, r3, #29
 80068f8:	d505      	bpl.n	8006906 <__sflush_r+0x46>
 80068fa:	6863      	ldr	r3, [r4, #4]
 80068fc:	1ac0      	subs	r0, r0, r3
 80068fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006900:	b10b      	cbz	r3, 8006906 <__sflush_r+0x46>
 8006902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006904:	1ac0      	subs	r0, r0, r3
 8006906:	2300      	movs	r3, #0
 8006908:	4602      	mov	r2, r0
 800690a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800690c:	6a21      	ldr	r1, [r4, #32]
 800690e:	4628      	mov	r0, r5
 8006910:	47b0      	blx	r6
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	d106      	bne.n	8006926 <__sflush_r+0x66>
 8006918:	6829      	ldr	r1, [r5, #0]
 800691a:	291d      	cmp	r1, #29
 800691c:	d82c      	bhi.n	8006978 <__sflush_r+0xb8>
 800691e:	4a2a      	ldr	r2, [pc, #168]	; (80069c8 <__sflush_r+0x108>)
 8006920:	40ca      	lsrs	r2, r1
 8006922:	07d6      	lsls	r6, r2, #31
 8006924:	d528      	bpl.n	8006978 <__sflush_r+0xb8>
 8006926:	2200      	movs	r2, #0
 8006928:	6062      	str	r2, [r4, #4]
 800692a:	04d9      	lsls	r1, r3, #19
 800692c:	6922      	ldr	r2, [r4, #16]
 800692e:	6022      	str	r2, [r4, #0]
 8006930:	d504      	bpl.n	800693c <__sflush_r+0x7c>
 8006932:	1c42      	adds	r2, r0, #1
 8006934:	d101      	bne.n	800693a <__sflush_r+0x7a>
 8006936:	682b      	ldr	r3, [r5, #0]
 8006938:	b903      	cbnz	r3, 800693c <__sflush_r+0x7c>
 800693a:	6560      	str	r0, [r4, #84]	; 0x54
 800693c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800693e:	602f      	str	r7, [r5, #0]
 8006940:	2900      	cmp	r1, #0
 8006942:	d0ca      	beq.n	80068da <__sflush_r+0x1a>
 8006944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006948:	4299      	cmp	r1, r3
 800694a:	d002      	beq.n	8006952 <__sflush_r+0x92>
 800694c:	4628      	mov	r0, r5
 800694e:	f000 f8fd 	bl	8006b4c <_free_r>
 8006952:	2000      	movs	r0, #0
 8006954:	6360      	str	r0, [r4, #52]	; 0x34
 8006956:	e7c1      	b.n	80068dc <__sflush_r+0x1c>
 8006958:	6a21      	ldr	r1, [r4, #32]
 800695a:	2301      	movs	r3, #1
 800695c:	4628      	mov	r0, r5
 800695e:	47b0      	blx	r6
 8006960:	1c41      	adds	r1, r0, #1
 8006962:	d1c7      	bne.n	80068f4 <__sflush_r+0x34>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0c4      	beq.n	80068f4 <__sflush_r+0x34>
 800696a:	2b1d      	cmp	r3, #29
 800696c:	d001      	beq.n	8006972 <__sflush_r+0xb2>
 800696e:	2b16      	cmp	r3, #22
 8006970:	d101      	bne.n	8006976 <__sflush_r+0xb6>
 8006972:	602f      	str	r7, [r5, #0]
 8006974:	e7b1      	b.n	80068da <__sflush_r+0x1a>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	e7ad      	b.n	80068dc <__sflush_r+0x1c>
 8006980:	690f      	ldr	r7, [r1, #16]
 8006982:	2f00      	cmp	r7, #0
 8006984:	d0a9      	beq.n	80068da <__sflush_r+0x1a>
 8006986:	0793      	lsls	r3, r2, #30
 8006988:	680e      	ldr	r6, [r1, #0]
 800698a:	bf08      	it	eq
 800698c:	694b      	ldreq	r3, [r1, #20]
 800698e:	600f      	str	r7, [r1, #0]
 8006990:	bf18      	it	ne
 8006992:	2300      	movne	r3, #0
 8006994:	eba6 0807 	sub.w	r8, r6, r7
 8006998:	608b      	str	r3, [r1, #8]
 800699a:	f1b8 0f00 	cmp.w	r8, #0
 800699e:	dd9c      	ble.n	80068da <__sflush_r+0x1a>
 80069a0:	6a21      	ldr	r1, [r4, #32]
 80069a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069a4:	4643      	mov	r3, r8
 80069a6:	463a      	mov	r2, r7
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b0      	blx	r6
 80069ac:	2800      	cmp	r0, #0
 80069ae:	dc06      	bgt.n	80069be <__sflush_r+0xfe>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295
 80069bc:	e78e      	b.n	80068dc <__sflush_r+0x1c>
 80069be:	4407      	add	r7, r0
 80069c0:	eba8 0800 	sub.w	r8, r8, r0
 80069c4:	e7e9      	b.n	800699a <__sflush_r+0xda>
 80069c6:	bf00      	nop
 80069c8:	20400001 	.word	0x20400001

080069cc <_fflush_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	690b      	ldr	r3, [r1, #16]
 80069d0:	4605      	mov	r5, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	b913      	cbnz	r3, 80069dc <_fflush_r+0x10>
 80069d6:	2500      	movs	r5, #0
 80069d8:	4628      	mov	r0, r5
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	b118      	cbz	r0, 80069e6 <_fflush_r+0x1a>
 80069de:	6983      	ldr	r3, [r0, #24]
 80069e0:	b90b      	cbnz	r3, 80069e6 <_fflush_r+0x1a>
 80069e2:	f7ff fa15 	bl	8005e10 <__sinit>
 80069e6:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <_fflush_r+0x6c>)
 80069e8:	429c      	cmp	r4, r3
 80069ea:	d11b      	bne.n	8006a24 <_fflush_r+0x58>
 80069ec:	686c      	ldr	r4, [r5, #4]
 80069ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0ef      	beq.n	80069d6 <_fflush_r+0xa>
 80069f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069f8:	07d0      	lsls	r0, r2, #31
 80069fa:	d404      	bmi.n	8006a06 <_fflush_r+0x3a>
 80069fc:	0599      	lsls	r1, r3, #22
 80069fe:	d402      	bmi.n	8006a06 <_fflush_r+0x3a>
 8006a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a02:	f7ff faa3 	bl	8005f4c <__retarget_lock_acquire_recursive>
 8006a06:	4628      	mov	r0, r5
 8006a08:	4621      	mov	r1, r4
 8006a0a:	f7ff ff59 	bl	80068c0 <__sflush_r>
 8006a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a10:	07da      	lsls	r2, r3, #31
 8006a12:	4605      	mov	r5, r0
 8006a14:	d4e0      	bmi.n	80069d8 <_fflush_r+0xc>
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	059b      	lsls	r3, r3, #22
 8006a1a:	d4dd      	bmi.n	80069d8 <_fflush_r+0xc>
 8006a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a1e:	f7ff fa96 	bl	8005f4e <__retarget_lock_release_recursive>
 8006a22:	e7d9      	b.n	80069d8 <_fflush_r+0xc>
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <_fflush_r+0x70>)
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d101      	bne.n	8006a2e <_fflush_r+0x62>
 8006a2a:	68ac      	ldr	r4, [r5, #8]
 8006a2c:	e7df      	b.n	80069ee <_fflush_r+0x22>
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <_fflush_r+0x74>)
 8006a30:	429c      	cmp	r4, r3
 8006a32:	bf08      	it	eq
 8006a34:	68ec      	ldreq	r4, [r5, #12]
 8006a36:	e7da      	b.n	80069ee <_fflush_r+0x22>
 8006a38:	08006cd8 	.word	0x08006cd8
 8006a3c:	08006cf8 	.word	0x08006cf8
 8006a40:	08006cb8 	.word	0x08006cb8

08006a44 <_lseek_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4d07      	ldr	r5, [pc, #28]	; (8006a64 <_lseek_r+0x20>)
 8006a48:	4604      	mov	r4, r0
 8006a4a:	4608      	mov	r0, r1
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	2200      	movs	r2, #0
 8006a50:	602a      	str	r2, [r5, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f7fa fa24 	bl	8000ea0 <_lseek>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d102      	bne.n	8006a62 <_lseek_r+0x1e>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	b103      	cbz	r3, 8006a62 <_lseek_r+0x1e>
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	20000244 	.word	0x20000244

08006a68 <__swhatbuf_r>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	460e      	mov	r6, r1
 8006a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a70:	2900      	cmp	r1, #0
 8006a72:	b096      	sub	sp, #88	; 0x58
 8006a74:	4614      	mov	r4, r2
 8006a76:	461d      	mov	r5, r3
 8006a78:	da08      	bge.n	8006a8c <__swhatbuf_r+0x24>
 8006a7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	602a      	str	r2, [r5, #0]
 8006a82:	061a      	lsls	r2, r3, #24
 8006a84:	d410      	bmi.n	8006aa8 <__swhatbuf_r+0x40>
 8006a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a8a:	e00e      	b.n	8006aaa <__swhatbuf_r+0x42>
 8006a8c:	466a      	mov	r2, sp
 8006a8e:	f000 f8bb 	bl	8006c08 <_fstat_r>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	dbf1      	blt.n	8006a7a <__swhatbuf_r+0x12>
 8006a96:	9a01      	ldr	r2, [sp, #4]
 8006a98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006aa0:	425a      	negs	r2, r3
 8006aa2:	415a      	adcs	r2, r3
 8006aa4:	602a      	str	r2, [r5, #0]
 8006aa6:	e7ee      	b.n	8006a86 <__swhatbuf_r+0x1e>
 8006aa8:	2340      	movs	r3, #64	; 0x40
 8006aaa:	2000      	movs	r0, #0
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	b016      	add	sp, #88	; 0x58
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ab4 <__smakebuf_r>:
 8006ab4:	898b      	ldrh	r3, [r1, #12]
 8006ab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ab8:	079d      	lsls	r5, r3, #30
 8006aba:	4606      	mov	r6, r0
 8006abc:	460c      	mov	r4, r1
 8006abe:	d507      	bpl.n	8006ad0 <__smakebuf_r+0x1c>
 8006ac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	6123      	str	r3, [r4, #16]
 8006ac8:	2301      	movs	r3, #1
 8006aca:	6163      	str	r3, [r4, #20]
 8006acc:	b002      	add	sp, #8
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	ab01      	add	r3, sp, #4
 8006ad2:	466a      	mov	r2, sp
 8006ad4:	f7ff ffc8 	bl	8006a68 <__swhatbuf_r>
 8006ad8:	9900      	ldr	r1, [sp, #0]
 8006ada:	4605      	mov	r5, r0
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7ff fa57 	bl	8005f90 <_malloc_r>
 8006ae2:	b948      	cbnz	r0, 8006af8 <__smakebuf_r+0x44>
 8006ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae8:	059a      	lsls	r2, r3, #22
 8006aea:	d4ef      	bmi.n	8006acc <__smakebuf_r+0x18>
 8006aec:	f023 0303 	bic.w	r3, r3, #3
 8006af0:	f043 0302 	orr.w	r3, r3, #2
 8006af4:	81a3      	strh	r3, [r4, #12]
 8006af6:	e7e3      	b.n	8006ac0 <__smakebuf_r+0xc>
 8006af8:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <__smakebuf_r+0x7c>)
 8006afa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	6020      	str	r0, [r4, #0]
 8006b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	9b00      	ldr	r3, [sp, #0]
 8006b08:	6163      	str	r3, [r4, #20]
 8006b0a:	9b01      	ldr	r3, [sp, #4]
 8006b0c:	6120      	str	r0, [r4, #16]
 8006b0e:	b15b      	cbz	r3, 8006b28 <__smakebuf_r+0x74>
 8006b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b14:	4630      	mov	r0, r6
 8006b16:	f000 f889 	bl	8006c2c <_isatty_r>
 8006b1a:	b128      	cbz	r0, 8006b28 <__smakebuf_r+0x74>
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	f023 0303 	bic.w	r3, r3, #3
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	81a3      	strh	r3, [r4, #12]
 8006b28:	89a0      	ldrh	r0, [r4, #12]
 8006b2a:	4305      	orrs	r5, r0
 8006b2c:	81a5      	strh	r5, [r4, #12]
 8006b2e:	e7cd      	b.n	8006acc <__smakebuf_r+0x18>
 8006b30:	08005da9 	.word	0x08005da9

08006b34 <__malloc_lock>:
 8006b34:	4801      	ldr	r0, [pc, #4]	; (8006b3c <__malloc_lock+0x8>)
 8006b36:	f7ff ba09 	b.w	8005f4c <__retarget_lock_acquire_recursive>
 8006b3a:	bf00      	nop
 8006b3c:	20000238 	.word	0x20000238

08006b40 <__malloc_unlock>:
 8006b40:	4801      	ldr	r0, [pc, #4]	; (8006b48 <__malloc_unlock+0x8>)
 8006b42:	f7ff ba04 	b.w	8005f4e <__retarget_lock_release_recursive>
 8006b46:	bf00      	nop
 8006b48:	20000238 	.word	0x20000238

08006b4c <_free_r>:
 8006b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b4e:	2900      	cmp	r1, #0
 8006b50:	d044      	beq.n	8006bdc <_free_r+0x90>
 8006b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b56:	9001      	str	r0, [sp, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b5e:	bfb8      	it	lt
 8006b60:	18e4      	addlt	r4, r4, r3
 8006b62:	f7ff ffe7 	bl	8006b34 <__malloc_lock>
 8006b66:	4a1e      	ldr	r2, [pc, #120]	; (8006be0 <_free_r+0x94>)
 8006b68:	9801      	ldr	r0, [sp, #4]
 8006b6a:	6813      	ldr	r3, [r2, #0]
 8006b6c:	b933      	cbnz	r3, 8006b7c <_free_r+0x30>
 8006b6e:	6063      	str	r3, [r4, #4]
 8006b70:	6014      	str	r4, [r2, #0]
 8006b72:	b003      	add	sp, #12
 8006b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b78:	f7ff bfe2 	b.w	8006b40 <__malloc_unlock>
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	d908      	bls.n	8006b92 <_free_r+0x46>
 8006b80:	6825      	ldr	r5, [r4, #0]
 8006b82:	1961      	adds	r1, r4, r5
 8006b84:	428b      	cmp	r3, r1
 8006b86:	bf01      	itttt	eq
 8006b88:	6819      	ldreq	r1, [r3, #0]
 8006b8a:	685b      	ldreq	r3, [r3, #4]
 8006b8c:	1949      	addeq	r1, r1, r5
 8006b8e:	6021      	streq	r1, [r4, #0]
 8006b90:	e7ed      	b.n	8006b6e <_free_r+0x22>
 8006b92:	461a      	mov	r2, r3
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	b10b      	cbz	r3, 8006b9c <_free_r+0x50>
 8006b98:	42a3      	cmp	r3, r4
 8006b9a:	d9fa      	bls.n	8006b92 <_free_r+0x46>
 8006b9c:	6811      	ldr	r1, [r2, #0]
 8006b9e:	1855      	adds	r5, r2, r1
 8006ba0:	42a5      	cmp	r5, r4
 8006ba2:	d10b      	bne.n	8006bbc <_free_r+0x70>
 8006ba4:	6824      	ldr	r4, [r4, #0]
 8006ba6:	4421      	add	r1, r4
 8006ba8:	1854      	adds	r4, r2, r1
 8006baa:	42a3      	cmp	r3, r4
 8006bac:	6011      	str	r1, [r2, #0]
 8006bae:	d1e0      	bne.n	8006b72 <_free_r+0x26>
 8006bb0:	681c      	ldr	r4, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	6053      	str	r3, [r2, #4]
 8006bb6:	4421      	add	r1, r4
 8006bb8:	6011      	str	r1, [r2, #0]
 8006bba:	e7da      	b.n	8006b72 <_free_r+0x26>
 8006bbc:	d902      	bls.n	8006bc4 <_free_r+0x78>
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	6003      	str	r3, [r0, #0]
 8006bc2:	e7d6      	b.n	8006b72 <_free_r+0x26>
 8006bc4:	6825      	ldr	r5, [r4, #0]
 8006bc6:	1961      	adds	r1, r4, r5
 8006bc8:	428b      	cmp	r3, r1
 8006bca:	bf04      	itt	eq
 8006bcc:	6819      	ldreq	r1, [r3, #0]
 8006bce:	685b      	ldreq	r3, [r3, #4]
 8006bd0:	6063      	str	r3, [r4, #4]
 8006bd2:	bf04      	itt	eq
 8006bd4:	1949      	addeq	r1, r1, r5
 8006bd6:	6021      	streq	r1, [r4, #0]
 8006bd8:	6054      	str	r4, [r2, #4]
 8006bda:	e7ca      	b.n	8006b72 <_free_r+0x26>
 8006bdc:	b003      	add	sp, #12
 8006bde:	bd30      	pop	{r4, r5, pc}
 8006be0:	2000023c 	.word	0x2000023c

08006be4 <_read_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d07      	ldr	r5, [pc, #28]	; (8006c04 <_read_r+0x20>)
 8006be8:	4604      	mov	r4, r0
 8006bea:	4608      	mov	r0, r1
 8006bec:	4611      	mov	r1, r2
 8006bee:	2200      	movs	r2, #0
 8006bf0:	602a      	str	r2, [r5, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f7fa f8f4 	bl	8000de0 <_read>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_read_r+0x1e>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_read_r+0x1e>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	20000244 	.word	0x20000244

08006c08 <_fstat_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4d07      	ldr	r5, [pc, #28]	; (8006c28 <_fstat_r+0x20>)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4604      	mov	r4, r0
 8006c10:	4608      	mov	r0, r1
 8006c12:	4611      	mov	r1, r2
 8006c14:	602b      	str	r3, [r5, #0]
 8006c16:	f7fa f928 	bl	8000e6a <_fstat>
 8006c1a:	1c43      	adds	r3, r0, #1
 8006c1c:	d102      	bne.n	8006c24 <_fstat_r+0x1c>
 8006c1e:	682b      	ldr	r3, [r5, #0]
 8006c20:	b103      	cbz	r3, 8006c24 <_fstat_r+0x1c>
 8006c22:	6023      	str	r3, [r4, #0]
 8006c24:	bd38      	pop	{r3, r4, r5, pc}
 8006c26:	bf00      	nop
 8006c28:	20000244 	.word	0x20000244

08006c2c <_isatty_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4d06      	ldr	r5, [pc, #24]	; (8006c48 <_isatty_r+0x1c>)
 8006c30:	2300      	movs	r3, #0
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	f7fa f927 	bl	8000e8a <_isatty>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_isatty_r+0x1a>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_isatty_r+0x1a>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	20000244 	.word	0x20000244

08006c4c <_init>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	bf00      	nop
 8006c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c52:	bc08      	pop	{r3}
 8006c54:	469e      	mov	lr, r3
 8006c56:	4770      	bx	lr

08006c58 <_fini>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	bf00      	nop
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr
