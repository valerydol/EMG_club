
UartReceiveAndCmdProcessing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004864  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bfc  08004bfc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c04  08004c04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c04  08004c04  00014c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  08004c7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004c7c  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1c5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a17  00000000  00000000  0002b265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a28  00000000  00000000  0002def8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b295  00000000  00000000  00054920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eadbb  00000000  00000000  0005fbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fc8  00000000  00000000  0014a9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049dc 	.word	0x080049dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080049dc 	.word	0x080049dc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <ledTask>:
enum LedTaskState ledState;
int ledCount;
int ledMaxCount;

void ledTask()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	if (ledState == LedOn)
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <ledTask+0x34>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d110      	bne.n	80005d2 <ledTask+0x2e>
	{
		if (ledCount++ >= ledMaxCount)
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <ledTask+0x38>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	4909      	ldr	r1, [pc, #36]	; (80005dc <ledTask+0x38>)
 80005b8:	600a      	str	r2, [r1, #0]
 80005ba:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <ledTask+0x3c>)
 80005bc:	6812      	ldr	r2, [r2, #0]
 80005be:	4293      	cmp	r3, r2
 80005c0:	db07      	blt.n	80005d2 <ledTask+0x2e>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005c2:	2120      	movs	r1, #32
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f000 fe80 	bl	80012cc <HAL_GPIO_TogglePin>
			ledCount = 0;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <ledTask+0x38>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
	}
	else if (ledState == LedOff)
	{
		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
	}
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000110 	.word	0x20000110
 80005dc:	20000114 	.word	0x20000114
 80005e0:	20000118 	.word	0x20000118

080005e4 <ledStart>:

void ledStart(int maxCount)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	ledState = LedOn;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <ledStart+0x20>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
	ledMaxCount = maxCount;
 80005f2:	4a05      	ldr	r2, [pc, #20]	; (8000608 <ledStart+0x24>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	20000110 	.word	0x20000110
 8000608:	20000118 	.word	0x20000118

0800060c <ledStop>:

void ledStop()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	ledState = LedOff;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <ledStop+0x1c>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f000 fe3d 	bl	800129c <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000110 	.word	0x20000110

0800062c <commTask>:
int cmdcountTemp = 0;

int cmdcount = 0;

int commTask()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	uint8_t ch;

	//HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 0);

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10000);
 8000632:	1db9      	adds	r1, r7, #6
 8000634:	f242 7310 	movw	r3, #10000	; 0x2710
 8000638:	2201      	movs	r2, #1
 800063a:	482c      	ldr	r0, [pc, #176]	; (80006ec <commTask+0xc0>)
 800063c:	f002 fa62 	bl	8002b04 <HAL_UART_Receive>
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK) {
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00c      	beq.n	8000664 <commTask+0x38>
		if (Status == HAL_TIMEOUT)
		{
			//cmdbuffer[cmdcount++] = ch;
			//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);
		}
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 800064a:	4b28      	ldr	r3, [pc, #160]	; (80006ec <commTask+0xc0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	2b00      	cmp	r3, #0
 8000656:	d003      	beq.n	8000660 <commTask+0x34>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <commTask+0xc0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2208      	movs	r2, #8
 800065e:	621a      	str	r2, [r3, #32]
		}

		return 0;
 8000660:	2300      	movs	r3, #0
 8000662:	e03e      	b.n	80006e2 <commTask+0xb6>
	}
	if( (Status == HAL_OK) && (ch != '\r' && ch != '\n'))
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d10d      	bne.n	8000686 <commTask+0x5a>
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	2b0d      	cmp	r3, #13
 800066e:	d00a      	beq.n	8000686 <commTask+0x5a>
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d007      	beq.n	8000686 <commTask+0x5a>
	{
		cmdbufferTemp[cmdcountTemp++]=ch;
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <commTask+0xc4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	491c      	ldr	r1, [pc, #112]	; (80006f0 <commTask+0xc4>)
 800067e:	600a      	str	r2, [r1, #0]
 8000680:	79b9      	ldrb	r1, [r7, #6]
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <commTask+0xc8>)
 8000684:	54d1      	strb	r1, [r2, r3]
	}

	if (ch != '\r' && ch != '\n')
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	2b0d      	cmp	r3, #13
 800068a:	d01a      	beq.n	80006c2 <commTask+0x96>
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	2b0a      	cmp	r3, #10
 8000690:	d017      	beq.n	80006c2 <commTask+0x96>
	{
		HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);
 8000692:	1db9      	adds	r1, r7, #6
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	2201      	movs	r2, #1
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <commTask+0xc0>)
 800069c:	f002 f99e 	bl	80029dc <HAL_UART_Transmit>

		if (cmdcount >= MAX_BUFFER_LENGTH)
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <commTask+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b63      	cmp	r3, #99	; 0x63
 80006a6:	dd02      	ble.n	80006ae <commTask+0x82>
		{
			cmdcount = 0;
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <commTask+0xcc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <commTask+0xcc>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	4910      	ldr	r1, [pc, #64]	; (80006f8 <commTask+0xcc>)
 80006b6:	600a      	str	r2, [r1, #0]
 80006b8:	79b9      	ldrb	r1, [r7, #6]
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <commTask+0xd0>)
 80006bc:	54d1      	strb	r1, [r2, r3]
		return 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	e00f      	b.n	80006e2 <commTask+0xb6>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 80006c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c6:	2202      	movs	r2, #2
 80006c8:	490d      	ldr	r1, [pc, #52]	; (8000700 <commTask+0xd4>)
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <commTask+0xc0>)
 80006cc:	f002 f986 	bl	80029dc <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <commTask+0xcc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <commTask+0xd0>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <commTask+0xcc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
	return 1;
 80006e0:	2301      	movs	r3, #1
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	200001e4 	.word	0x200001e4
 80006f4:	20000180 	.word	0x20000180
 80006f8:	200001e8 	.word	0x200001e8
 80006fc:	2000011c 	.word	0x2000011c
 8000700:	080049f4 	.word	0x080049f4

08000704 <handleCommand>:

void handleCommand()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  char cmd[20];
  int maxCount;

  int params = sscanf((const char*)cmdbuffer, "%s %d", cmd, &maxCount);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	f107 0208 	add.w	r2, r7, #8
 8000710:	4914      	ldr	r1, [pc, #80]	; (8000764 <handleCommand+0x60>)
 8000712:	4815      	ldr	r0, [pc, #84]	; (8000768 <handleCommand+0x64>)
 8000714:	f002 ffd8 	bl	80036c8 <siscanf>
 8000718:	61f8      	str	r0, [r7, #28]

  if (params == 0)
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d01d      	beq.n	800075c <handleCommand+0x58>
  {
	  return;
  }

  if (strcmp(cmd, "start") == 0)
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	4911      	ldr	r1, [pc, #68]	; (800076c <handleCommand+0x68>)
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd52 	bl	80001d0 <strcmp>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d104      	bne.n	800073c <handleCommand+0x38>
  {
	  ledStart(maxCount);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff55 	bl	80005e4 <ledStart>
 800073a:	e010      	b.n	800075e <handleCommand+0x5a>
  }
  else if (strcmp(cmd, "stop") == 0)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	490b      	ldr	r1, [pc, #44]	; (8000770 <handleCommand+0x6c>)
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fd44 	bl	80001d0 <strcmp>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d102      	bne.n	8000754 <handleCommand+0x50>
  {
	  ledStop();
 800074e:	f7ff ff5d 	bl	800060c <ledStop>
 8000752:	e004      	b.n	800075e <handleCommand+0x5a>
  }
  else
  {
	  printf("Invalid command\r\n");
 8000754:	4807      	ldr	r0, [pc, #28]	; (8000774 <handleCommand+0x70>)
 8000756:	f002 ffaf 	bl	80036b8 <puts>
 800075a:	e000      	b.n	800075e <handleCommand+0x5a>
	  return;
 800075c:	bf00      	nop
  }
}
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	080049f8 	.word	0x080049f8
 8000768:	2000011c 	.word	0x2000011c
 800076c:	08004a00 	.word	0x08004a00
 8000770:	08004a08 	.word	0x08004a08
 8000774:	08004a10 	.word	0x08004a10

08000778 <_write>:

/////////////////////////////////////////////////////////////////////////
// Redirecting printf to UART
/////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b29a      	uxth	r2, r3
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <_write+0x28>)
 8000790:	f002 f924 	bl	80029dc <HAL_UART_Transmit>
    return len;
 8000794:	687b      	ldr	r3, [r7, #4]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000008c 	.word	0x2000008c

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fa6c 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f80e 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 f88e 	bl	80008d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007b4:	f000 f85c 	bl	8000870 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ledTask();
 80007b8:	f7ff fef4 	bl	80005a4 <ledTask>
	  if (commTask())
 80007bc:	f7ff ff36 	bl	800062c <commTask>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f8      	beq.n	80007b8 <main+0x14>
	  {
		  handleCommand();
 80007c6:	f7ff ff9d 	bl	8000704 <handleCommand>
	  ledTask();
 80007ca:	e7f5      	b.n	80007b8 <main+0x14>

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b096      	sub	sp, #88	; 0x58
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2244      	movs	r2, #68	; 0x44
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fef6 	bl	80035cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007f2:	f000 fd93 	bl	800131c <HAL_PWREx_ControlVoltageScaling>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007fc:	f000 f8ce 	bl	800099c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000808:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080a:	2310      	movs	r3, #16
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000812:	2302      	movs	r3, #2
 8000814:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800081a:	230a      	movs	r3, #10
 800081c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800081e:	2307      	movs	r3, #7
 8000820:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000822:	2302      	movs	r3, #2
 8000824:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000826:	2302      	movs	r3, #2
 8000828:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fdca 	bl	80013c8 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800083a:	f000 f8af 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2303      	movs	r3, #3
 8000844:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	2104      	movs	r1, #4
 8000856:	4618      	mov	r0, r3
 8000858:	f001 f992 	bl	8001b80 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000862:	f000 f89b 	bl	800099c <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3758      	adds	r7, #88	; 0x58
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART2_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008b4:	f002 f844 	bl	8002940 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f86d 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <MX_GPIO_Init+0xc4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a2a      	ldr	r2, [pc, #168]	; (8000994 <MX_GPIO_Init+0xc4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b28      	ldr	r3, [pc, #160]	; (8000994 <MX_GPIO_Init+0xc4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	4b25      	ldr	r3, [pc, #148]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a24      	ldr	r2, [pc, #144]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b22      	ldr	r3, [pc, #136]	; (8000994 <MX_GPIO_Init+0xc4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <MX_GPIO_Init+0xc4>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_GPIO_Init+0xc4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094e:	f000 fca5 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000958:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <MX_GPIO_Init+0xc8>)
 800096a:	f000 faed 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800096e:	2320      	movs	r3, #32
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f000 fade 	bl	8000f48 <HAL_GPIO_Init>

}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	; 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40021000 	.word	0x40021000
 8000998:	48000800 	.word	0x48000800

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x44>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <HAL_MspInit+0x44>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <HAL_MspInit+0x44>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_MspInit+0x44>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_MspInit+0x44>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6593      	str	r3, [r2, #88]	; 0x58
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_MspInit+0x44>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0ac      	sub	sp, #176	; 0xb0
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2288      	movs	r2, #136	; 0x88
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fddb 	bl	80035cc <memset>
  if(huart->Instance==USART2)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <HAL_UART_MspInit+0xb0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d13b      	bne.n	8000a98 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 facb 	bl	8001fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a38:	f7ff ffb0 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_UART_MspInit+0xb4>)
 8000a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a40:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <HAL_UART_MspInit+0xb4>)
 8000a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a46:	6593      	str	r3, [r2, #88]	; 0x58
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_UART_MspInit+0xb4>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <HAL_UART_MspInit+0xb4>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a58:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <HAL_UART_MspInit+0xb4>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_UART_MspInit+0xb4>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a84:	2307      	movs	r3, #7
 8000a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 fa58 	bl	8000f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	37b0      	adds	r7, #176	; 0xb0
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f922 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00a      	b.n	8000b24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b0e:	f3af 8000 	nop.w
 8000b12:	4601      	mov	r1, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf0      	blt.n	8000b0e <_read+0x12>
	}

return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f002 fcd2 	bl	8003578 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20018000 	.word	0x20018000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	200001ec 	.word	0x200001ec
 8000c08:	20000208 	.word	0x20000208

08000c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c34:	f7ff ffea 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	; (8000c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <LoopForever+0xe>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	; (8000c7c <LoopForever+0x16>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f002 fc91 	bl	8003584 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c62:	f7ff fd9f 	bl	80007a4 <main>

08000c66 <LoopForever>:

LoopForever:
    b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c74:	08004c0c 	.word	0x08004c0c
  ldr r2, =_sbss
 8000c78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c7c:	20000204 	.word	0x20000204

08000c80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC1_2_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_Init+0x3c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <HAL_Init+0x3c>)
 8000c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	f000 f920 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 f80f 	bl	8000cc4 <HAL_InitTick>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	e001      	b.n	8000cb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb2:	f7ff fe79 	bl	80009a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40022000 	.word	0x40022000

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_InitTick+0x6c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d023      	beq.n	8000d20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_InitTick+0x70>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_InitTick+0x6c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f91d 	bl	8000f2e <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10f      	bne.n	8000d1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d809      	bhi.n	8000d14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f8f5 	bl	8000ef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_InitTick+0x74>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e007      	b.n	8000d24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	73fb      	strb	r3, [r7, #15]
 8000d18:	e004      	b.n	8000d24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e001      	b.n	8000d24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200001f0 	.word	0x200001f0

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200001f0 	.word	0x200001f0

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f7ff ff8e 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff47 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff5c 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff8e 	bl	8000e34 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5d 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffb0 	bl	8000e9c <SysTick_Config>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f56:	e17f      	b.n	8001258 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8171 	beq.w	8001252 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d005      	beq.n	8000f88 <HAL_GPIO_Init+0x40>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d130      	bne.n	8000fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f003 0201 	and.w	r2, r3, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d118      	bne.n	8001028 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	f003 0201 	and.w	r2, r3, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b03      	cmp	r3, #3
 8001032:	d017      	beq.n	8001064 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d123      	bne.n	80010b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	08da      	lsrs	r2, r3, #3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3208      	adds	r2, #8
 8001078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	220f      	movs	r2, #15
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	6939      	ldr	r1, [r7, #16]
 80010b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0203 	and.w	r2, r3, #3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80ac 	beq.w	8001252 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <HAL_GPIO_Init+0x330>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fe:	4a5e      	ldr	r2, [pc, #376]	; (8001278 <HAL_GPIO_Init+0x330>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6613      	str	r3, [r2, #96]	; 0x60
 8001106:	4b5c      	ldr	r3, [pc, #368]	; (8001278 <HAL_GPIO_Init+0x330>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001112:	4a5a      	ldr	r2, [pc, #360]	; (800127c <HAL_GPIO_Init+0x334>)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800113c:	d025      	beq.n	800118a <HAL_GPIO_Init+0x242>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4f      	ldr	r2, [pc, #316]	; (8001280 <HAL_GPIO_Init+0x338>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d01f      	beq.n	8001186 <HAL_GPIO_Init+0x23e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4e      	ldr	r2, [pc, #312]	; (8001284 <HAL_GPIO_Init+0x33c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x23a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4d      	ldr	r2, [pc, #308]	; (8001288 <HAL_GPIO_Init+0x340>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x236>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4c      	ldr	r2, [pc, #304]	; (800128c <HAL_GPIO_Init+0x344>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x232>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4b      	ldr	r2, [pc, #300]	; (8001290 <HAL_GPIO_Init+0x348>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x22e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4a      	ldr	r2, [pc, #296]	; (8001294 <HAL_GPIO_Init+0x34c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x22a>
 800116e:	2306      	movs	r3, #6
 8001170:	e00c      	b.n	800118c <HAL_GPIO_Init+0x244>
 8001172:	2307      	movs	r3, #7
 8001174:	e00a      	b.n	800118c <HAL_GPIO_Init+0x244>
 8001176:	2305      	movs	r3, #5
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x244>
 800117a:	2304      	movs	r3, #4
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x244>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x244>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x244>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x244>
 800118a:	2300      	movs	r3, #0
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800119c:	4937      	ldr	r1, [pc, #220]	; (800127c <HAL_GPIO_Init+0x334>)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ce:	4a32      	ldr	r2, [pc, #200]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011f8:	4a27      	ldr	r2, [pc, #156]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_GPIO_Init+0x350>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_GPIO_Init+0x350>)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_GPIO_Init+0x350>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800124c:	4a12      	ldr	r2, [pc, #72]	; (8001298 <HAL_GPIO_Init+0x350>)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa22 f303 	lsr.w	r3, r2, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	f47f ae78 	bne.w	8000f58 <HAL_GPIO_Init+0x10>
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000
 8001280:	48000400 	.word	0x48000400
 8001284:	48000800 	.word	0x48000800
 8001288:	48000c00 	.word	0x48000c00
 800128c:	48001000 	.word	0x48001000
 8001290:	48001400 	.word	0x48001400
 8001294:	48001800 	.word	0x48001800
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4013      	ands	r3, r2
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43d9      	mvns	r1, r3
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	400b      	ands	r3, r1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <HAL_PWREx_GetVoltageRange+0x18>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40007000 	.word	0x40007000

0800131c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800132a:	d130      	bne.n	800138e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001338:	d038      	beq.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001348:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2232      	movs	r2, #50	; 0x32
 8001350:	fb02 f303 	mul.w	r3, r2, r3
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	0c9b      	lsrs	r3, r3, #18
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001360:	e002      	b.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3b01      	subs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001374:	d102      	bne.n	800137c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f2      	bne.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001388:	d110      	bne.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e00f      	b.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800139a:	d007      	beq.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a4:	4a05      	ldr	r2, [pc, #20]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40007000 	.word	0x40007000
 80013c0:	20000000 	.word	0x20000000
 80013c4:	431bde83 	.word	0x431bde83

080013c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e3ca      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013da:	4b97      	ldr	r3, [pc, #604]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e4:	4b94      	ldr	r3, [pc, #592]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80e4 	beq.w	80015c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_RCC_OscConfig+0x4a>
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	f040 808b 	bne.w	8001520 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b01      	cmp	r3, #1
 800140e:	f040 8087 	bne.w	8001520 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001412:	4b89      	ldr	r3, [pc, #548]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x62>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e3a2      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1a      	ldr	r2, [r3, #32]
 800142e:	4b82      	ldr	r3, [pc, #520]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <HAL_RCC_OscConfig+0x7c>
 800143a:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001442:	e005      	b.n	8001450 <HAL_RCC_OscConfig+0x88>
 8001444:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001450:	4293      	cmp	r3, r2
 8001452:	d223      	bcs.n	800149c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fd55 	bl	8001f08 <RCC_SetFlashLatencyFromMSIRange>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e383      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001468:	4b73      	ldr	r3, [pc, #460]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a72      	ldr	r2, [pc, #456]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800146e:	f043 0308 	orr.w	r3, r3, #8
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b70      	ldr	r3, [pc, #448]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	496d      	ldr	r1, [pc, #436]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001486:	4b6c      	ldr	r3, [pc, #432]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	4968      	ldr	r1, [pc, #416]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
 800149a:	e025      	b.n	80014e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149c:	4b66      	ldr	r3, [pc, #408]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a65      	ldr	r2, [pc, #404]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4960      	ldr	r1, [pc, #384]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ba:	4b5f      	ldr	r3, [pc, #380]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	495b      	ldr	r1, [pc, #364]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fd15 	bl	8001f08 <RCC_SetFlashLatencyFromMSIRange>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e343      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014e8:	f000 fc4a 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b52      	ldr	r3, [pc, #328]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	4950      	ldr	r1, [pc, #320]	; (800163c <HAL_RCC_OscConfig+0x274>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	4a4e      	ldr	r2, [pc, #312]	; (8001640 <HAL_RCC_OscConfig+0x278>)
 8001506:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001508:	4b4e      	ldr	r3, [pc, #312]	; (8001644 <HAL_RCC_OscConfig+0x27c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fbd9 	bl	8000cc4 <HAL_InitTick>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d052      	beq.n	80015c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	e327      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d032      	beq.n	800158e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001528:	4b43      	ldr	r3, [pc, #268]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a42      	ldr	r2, [pc, #264]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001534:	f7ff fc16 	bl	8000d64 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800153c:	f7ff fc12 	bl	8000d64 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e310      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155a:	4b37      	ldr	r3, [pc, #220]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a36      	ldr	r2, [pc, #216]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4931      	ldr	r1, [pc, #196]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001578:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	492c      	ldr	r1, [pc, #176]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e01a      	b.n	80015c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a29      	ldr	r2, [pc, #164]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800159a:	f7ff fbe3 	bl	8000d64 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a2:	f7ff fbdf 	bl	8000d64 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e2dd      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x1da>
 80015c0:	e000      	b.n	80015c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d074      	beq.n	80016ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x21a>
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b0c      	cmp	r3, #12
 80015da:	d10e      	bne.n	80015fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d10b      	bne.n	80015fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d064      	beq.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d160      	bne.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e2ba      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x24a>
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e026      	b.n	8001660 <HAL_RCC_OscConfig+0x298>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800161a:	d115      	bne.n	8001648 <HAL_RCC_OscConfig+0x280>
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a05      	ldr	r2, [pc, #20]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 8001622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a02      	ldr	r2, [pc, #8]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800162e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e014      	b.n	8001660 <HAL_RCC_OscConfig+0x298>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	08004a30 	.word	0x08004a30
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004
 8001648:	4ba0      	ldr	r3, [pc, #640]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a9f      	ldr	r2, [pc, #636]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b9d      	ldr	r3, [pc, #628]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a9c      	ldr	r2, [pc, #624]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb7c 	bl	8000d64 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fb78 	bl	8000d64 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e276      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001682:	4b92      	ldr	r3, [pc, #584]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x2a8>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fb68 	bl	8000d64 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fb64 	bl	8000d64 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e262      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016aa:	4b88      	ldr	r3, [pc, #544]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x2d0>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d060      	beq.n	8001788 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_OscConfig+0x310>
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d119      	bne.n	8001706 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d116      	bne.n	8001706 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d8:	4b7c      	ldr	r3, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x328>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e23f      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b76      	ldr	r3, [pc, #472]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	4973      	ldr	r1, [pc, #460]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001704:	e040      	b.n	8001788 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d023      	beq.n	8001756 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170e:	4b6f      	ldr	r3, [pc, #444]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6e      	ldr	r2, [pc, #440]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fb23 	bl	8000d64 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fb1f 	bl	8000d64 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e21d      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001734:	4b65      	ldr	r3, [pc, #404]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b62      	ldr	r3, [pc, #392]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	495f      	ldr	r1, [pc, #380]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
 8001754:	e018      	b.n	8001788 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001756:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a5c      	ldr	r2, [pc, #368]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800175c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff faff 	bl	8000d64 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fafb 	bl	8000d64 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1f9      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d03c      	beq.n	800180e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179c:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800179e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a2:	4a4a      	ldr	r2, [pc, #296]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fada 	bl	8000d64 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fad6 	bl	8000d64 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1d4      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c6:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80017c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ef      	beq.n	80017b4 <HAL_RCC_OscConfig+0x3ec>
 80017d4:	e01b      	b.n	800180e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80017d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017dc:	4a3b      	ldr	r2, [pc, #236]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff fabd 	bl	8000d64 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff fab9 	bl	8000d64 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e1b7      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1ef      	bne.n	80017ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80a6 	beq.w	8001968 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10d      	bne.n	8001848 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	4a26      	ldr	r2, [pc, #152]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001836:	6593      	str	r3, [r2, #88]	; 0x58
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001844:	2301      	movs	r3, #1
 8001846:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_RCC_OscConfig+0x508>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d118      	bne.n	8001886 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_RCC_OscConfig+0x508>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_RCC_OscConfig+0x508>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001860:	f7ff fa80 	bl	8000d64 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001868:	f7ff fa7c 	bl	8000d64 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e17a      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_RCC_OscConfig+0x508>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d108      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4d8>
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189e:	e029      	b.n	80018f4 <HAL_RCC_OscConfig+0x52c>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d115      	bne.n	80018d4 <HAL_RCC_OscConfig+0x50c>
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80018aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018be:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_RCC_OscConfig+0x504>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c8:	e014      	b.n	80018f4 <HAL_RCC_OscConfig+0x52c>
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40007000 	.word	0x40007000
 80018d4:	4b9c      	ldr	r3, [pc, #624]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018da:	4a9b      	ldr	r2, [pc, #620]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e4:	4b98      	ldr	r3, [pc, #608]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	4a97      	ldr	r2, [pc, #604]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d016      	beq.n	800192a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fa32 	bl	8000d64 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff fa2e 	bl	8000d64 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e12a      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800191a:	4b8b      	ldr	r3, [pc, #556]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ed      	beq.n	8001904 <HAL_RCC_OscConfig+0x53c>
 8001928:	e015      	b.n	8001956 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff fa1b 	bl	8000d64 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7ff fa17 	bl	8000d64 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e113      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001948:	4b7f      	ldr	r3, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ed      	bne.n	8001932 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b7a      	ldr	r3, [pc, #488]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	4a79      	ldr	r2, [pc, #484]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001966:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80fe 	beq.w	8001b6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	2b02      	cmp	r3, #2
 8001978:	f040 80d0 	bne.w	8001b1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800197c:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	429a      	cmp	r2, r3
 800198e:	d130      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	3b01      	subs	r3, #1
 800199c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d127      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d11f      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019bc:	2a07      	cmp	r2, #7
 80019be:	bf14      	ite	ne
 80019c0:	2201      	movne	r2, #1
 80019c2:	2200      	moveq	r2, #0
 80019c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d113      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	3b01      	subs	r3, #1
 80019d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d06e      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	d069      	beq.n	8001acc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019f8:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0ad      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a14:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a20:	f7ff f9a0 	bl	8000d64 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f99c 	bl	8000d64 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e09a      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	4b40      	ldr	r3, [pc, #256]	; (8001b4c <HAL_RCC_OscConfig+0x784>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a56:	3a01      	subs	r2, #1
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	4311      	orrs	r1, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a60:	0212      	lsls	r2, r2, #8
 8001a62:	4311      	orrs	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a68:	0852      	lsrs	r2, r2, #1
 8001a6a:	3a01      	subs	r2, #1
 8001a6c:	0552      	lsls	r2, r2, #21
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a74:	0852      	lsrs	r2, r2, #1
 8001a76:	3a01      	subs	r2, #1
 8001a78:	0652      	lsls	r2, r2, #25
 8001a7a:	4311      	orrs	r1, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a80:	0912      	lsrs	r2, r2, #4
 8001a82:	0452      	lsls	r2, r2, #17
 8001a84:	430a      	orrs	r2, r1
 8001a86:	4930      	ldr	r1, [pc, #192]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a2a      	ldr	r2, [pc, #168]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aa4:	f7ff f95e 	bl	8000d64 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f95a 	bl	8000d64 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e058      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aca:	e050      	b.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e04f      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d148      	bne.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001af4:	f7ff f936 	bl	8000d64 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff f932 	bl	8000d64 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e030      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x734>
 8001b1a:	e028      	b.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d023      	beq.n	8001b6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_RCC_OscConfig+0x780>)
 8001b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f919 	bl	8000d64 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	e00c      	b.n	8001b50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff f915 	bl	8000d64 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d905      	bls.n	8001b50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e013      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_OscConfig+0x7b0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ec      	bne.n	8001b36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_OscConfig+0x7b0>)
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	4905      	ldr	r1, [pc, #20]	; (8001b78 <HAL_RCC_OscConfig+0x7b0>)
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_RCC_OscConfig+0x7b4>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
 8001b68:	e001      	b.n	8001b6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	feeefffc 	.word	0xfeeefffc

08001b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0e7      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b94:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d910      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 0207 	bic.w	r2, r3, #7
 8001baa:	4970      	ldr	r1, [pc, #448]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0cf      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d010      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d908      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4960      	ldr	r1, [pc, #384]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d04c      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	4b5a      	ldr	r3, [pc, #360]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d121      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0a6      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1e:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d115      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e09a      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c36:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e08e      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c46:	4b4a      	ldr	r3, [pc, #296]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e086      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f023 0203 	bic.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4943      	ldr	r1, [pc, #268]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c68:	f7ff f87c 	bl	8000d64 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c70:	f7ff f878 	bl	8000d64 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e06e      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 020c 	and.w	r2, r3, #12
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1eb      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d010      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d208      	bcs.n	8001cc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	492b      	ldr	r1, [pc, #172]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc6:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d210      	bcs.n	8001cf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 0207 	bic.w	r2, r3, #7
 8001cdc:	4923      	ldr	r1, [pc, #140]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e036      	b.n	8001d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4918      	ldr	r1, [pc, #96]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4910      	ldr	r1, [pc, #64]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d34:	f000 f824 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	490b      	ldr	r1, [pc, #44]	; (8001d74 <HAL_RCC_ClockConfig+0x1f4>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_ClockConfig+0x1fc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe ffb3 	bl	8000cc4 <HAL_InitTick>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d62:	7afb      	ldrb	r3, [r7, #11]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08004a30 	.word	0x08004a30
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d98:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x34>
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d121      	bne.n	8001df2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d11e      	bne.n	8001df2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001db4:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e005      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10d      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d102      	bne.n	8001dfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	e004      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d134      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d003      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0xac>
 8001e24:	e005      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e28:	617b      	str	r3, [r7, #20]
      break;
 8001e2a:	e005      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e2e:	617b      	str	r3, [r7, #20]
      break;
 8001e30:	e002      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	617b      	str	r3, [r7, #20]
      break;
 8001e36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	3301      	adds	r3, #1
 8001e44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	fb03 f202 	mul.w	r2, r3, r2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	0e5b      	lsrs	r3, r3, #25
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e78:	69bb      	ldr	r3, [r7, #24]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08004a48 	.word	0x08004a48
 8001e90:	00f42400 	.word	0x00f42400
 8001e94:	007a1200 	.word	0x007a1200

08001e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000000 	.word	0x20000000

08001eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eb4:	f7ff fff0 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4904      	ldr	r1, [pc, #16]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08004a40 	.word	0x08004a40

08001edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ee0:	f7ff ffda 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0adb      	lsrs	r3, r3, #11
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4904      	ldr	r1, [pc, #16]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08004a40 	.word	0x08004a40

08001f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f20:	f7ff f9ee 	bl	8001300 <HAL_PWREx_GetVoltageRange>
 8001f24:	6178      	str	r0, [r7, #20]
 8001f26:	e014      	b.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	4a24      	ldr	r2, [pc, #144]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6593      	str	r3, [r2, #88]	; 0x58
 8001f34:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f40:	f7ff f9de 	bl	8001300 <HAL_PWREx_GetVoltageRange>
 8001f44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f58:	d10b      	bne.n	8001f72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b80      	cmp	r3, #128	; 0x80
 8001f5e:	d919      	bls.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2ba0      	cmp	r3, #160	; 0xa0
 8001f64:	d902      	bls.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f66:	2302      	movs	r3, #2
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	e013      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	e010      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b80      	cmp	r3, #128	; 0x80
 8001f76:	d902      	bls.n	8001f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f78:	2303      	movs	r3, #3
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	e00a      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b80      	cmp	r3, #128	; 0x80
 8001f82:	d102      	bne.n	8001f8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f84:	2302      	movs	r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	e004      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b70      	cmp	r3, #112	; 0x70
 8001f8e:	d101      	bne.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f90:	2301      	movs	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 0207 	bic.w	r2, r3, #7
 8001f9c:	4909      	ldr	r1, [pc, #36]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d001      	beq.n	8001fb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40022000 	.word	0x40022000

08001fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d041      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fec:	d02a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ff2:	d824      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ff4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ff8:	d008      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ffa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ffe:	d81e      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002008:	d010      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800200a:	e018      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800200c:	4b86      	ldr	r3, [pc, #536]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a85      	ldr	r2, [pc, #532]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002016:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002018:	e015      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3304      	adds	r3, #4
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fabb 	bl	800259c <RCCEx_PLLSAI1_Config>
 8002026:	4603      	mov	r3, r0
 8002028:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800202a:	e00c      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3320      	adds	r3, #32
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fba6 	bl	8002784 <RCCEx_PLLSAI2_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800203c:	e003      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	74fb      	strb	r3, [r7, #19]
      break;
 8002042:	e000      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10b      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800204c:	4b76      	ldr	r3, [pc, #472]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800205a:	4973      	ldr	r1, [pc, #460]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002062:	e001      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d041      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002078:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800207c:	d02a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800207e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002082:	d824      	bhi.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002088:	d008      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800208a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800208e:	d81e      	bhi.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d010      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800209a:	e018      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800209c:	4b62      	ldr	r3, [pc, #392]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a61      	ldr	r2, [pc, #388]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020a8:	e015      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fa73 	bl	800259c <RCCEx_PLLSAI1_Config>
 80020b6:	4603      	mov	r3, r0
 80020b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ba:	e00c      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3320      	adds	r3, #32
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fb5e 	bl	8002784 <RCCEx_PLLSAI2_Config>
 80020c8:	4603      	mov	r3, r0
 80020ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020cc:	e003      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	74fb      	strb	r3, [r7, #19]
      break;
 80020d2:	e000      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020dc:	4b52      	ldr	r3, [pc, #328]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ea:	494f      	ldr	r1, [pc, #316]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020f2:	e001      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a0 	beq.w	8002246 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800210a:	4b47      	ldr	r3, [pc, #284]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800211a:	2300      	movs	r3, #0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	4a40      	ldr	r2, [pc, #256]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
 800212c:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002138:	2301      	movs	r3, #1
 800213a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a3a      	ldr	r2, [pc, #232]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002146:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002148:	f7fe fe0c 	bl	8000d64 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800214e:	e009      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002150:	f7fe fe08 	bl	8000d64 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d902      	bls.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	74fb      	strb	r3, [r7, #19]
        break;
 8002162:	e005      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002164:	4b31      	ldr	r3, [pc, #196]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ef      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d15c      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002176:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002180:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01f      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	d019      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002194:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021a0:	4b21      	ldr	r3, [pc, #132]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	4a20      	ldr	r2, [pc, #128]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021c0:	4a19      	ldr	r2, [pc, #100]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d016      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7fe fdc7 	bl	8000d64 <HAL_GetTick>
 80021d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d8:	e00b      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7fe fdc3 	bl	8000d64 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d902      	bls.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	74fb      	strb	r3, [r7, #19]
            break;
 80021f0:	e006      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ec      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10c      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002216:	4904      	ldr	r1, [pc, #16]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800221e:	e009      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	74bb      	strb	r3, [r7, #18]
 8002224:	e006      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002234:	7c7b      	ldrb	r3, [r7, #17]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223a:	4b9e      	ldr	r3, [pc, #632]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	4a9d      	ldr	r2, [pc, #628]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002244:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002252:	4b98      	ldr	r3, [pc, #608]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f023 0203 	bic.w	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	4994      	ldr	r1, [pc, #592]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002274:	4b8f      	ldr	r3, [pc, #572]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f023 020c 	bic.w	r2, r3, #12
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	498c      	ldr	r1, [pc, #560]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002296:	4b87      	ldr	r3, [pc, #540]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	4983      	ldr	r1, [pc, #524]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b8:	4b7e      	ldr	r3, [pc, #504]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	497b      	ldr	r1, [pc, #492]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022da:	4b76      	ldr	r3, [pc, #472]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e8:	4972      	ldr	r1, [pc, #456]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022fc:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	496a      	ldr	r1, [pc, #424]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800231e:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	4961      	ldr	r1, [pc, #388]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002340:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234e:	4959      	ldr	r1, [pc, #356]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002362:	4b54      	ldr	r3, [pc, #336]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002370:	4950      	ldr	r1, [pc, #320]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002384:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	4948      	ldr	r1, [pc, #288]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023a6:	4b43      	ldr	r3, [pc, #268]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	493f      	ldr	r1, [pc, #252]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d028      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c8:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d6:	4937      	ldr	r1, [pc, #220]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e6:	d106      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e8:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a31      	ldr	r2, [pc, #196]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f2:	60d3      	str	r3, [r2, #12]
 80023f4:	e011      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023fe:	d10c      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	2101      	movs	r1, #1
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f8c8 	bl	800259c <RCCEx_PLLSAI1_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d028      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002426:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	491f      	ldr	r1, [pc, #124]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002444:	d106      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002450:	60d3      	str	r3, [r2, #12]
 8002452:	e011      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800245c:	d10c      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	2101      	movs	r1, #1
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f899 	bl	800259c <RCCEx_PLLSAI1_Config>
 800246a:	4603      	mov	r3, r0
 800246c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02b      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002492:	4908      	ldr	r1, [pc, #32]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a2:	d109      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a02      	ldr	r2, [pc, #8]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ae:	60d3      	str	r3, [r2, #12]
 80024b0:	e014      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2101      	movs	r1, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f867 	bl	800259c <RCCEx_PLLSAI1_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d2:	7cfb      	ldrb	r3, [r7, #19]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02f      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024f6:	4928      	ldr	r1, [pc, #160]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002506:	d10d      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3304      	adds	r3, #4
 800250c:	2102      	movs	r1, #2
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f844 	bl	800259c <RCCEx_PLLSAI1_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d014      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	74bb      	strb	r3, [r7, #18]
 8002522:	e011      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800252c:	d10c      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3320      	adds	r3, #32
 8002532:	2102      	movs	r1, #2
 8002534:	4618      	mov	r0, r3
 8002536:	f000 f925 	bl	8002784 <RCCEx_PLLSAI2_Config>
 800253a:	4603      	mov	r3, r0
 800253c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002562:	490d      	ldr	r1, [pc, #52]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002586:	4904      	ldr	r1, [pc, #16]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800258e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000

0800259c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025aa:	4b75      	ldr	r3, [pc, #468]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d018      	beq.n	80025e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025b6:	4b72      	ldr	r3, [pc, #456]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0203 	and.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d10d      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025ce:	4b6c      	ldr	r3, [pc, #432]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
       ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d047      	beq.n	8002672 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	e044      	b.n	8002672 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d018      	beq.n	8002622 <RCCEx_PLLSAI1_Config+0x86>
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d825      	bhi.n	8002640 <RCCEx_PLLSAI1_Config+0xa4>
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d002      	beq.n	80025fe <RCCEx_PLLSAI1_Config+0x62>
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d009      	beq.n	8002610 <RCCEx_PLLSAI1_Config+0x74>
 80025fc:	e020      	b.n	8002640 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025fe:	4b60      	ldr	r3, [pc, #384]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d11d      	bne.n	8002646 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260e:	e01a      	b.n	8002646 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002610:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d116      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002620:	e013      	b.n	800264a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002622:	4b57      	ldr	r3, [pc, #348]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800262e:	4b54      	ldr	r3, [pc, #336]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800263e:	e006      	b.n	800264e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      break;
 8002644:	e004      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002646:	bf00      	nop
 8002648:	e002      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264a:	bf00      	nop
 800264c:	e000      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10d      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002656:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	430b      	orrs	r3, r1
 800266c:	4944      	ldr	r1, [pc, #272]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d17d      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002678:	4b41      	ldr	r3, [pc, #260]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a40      	ldr	r2, [pc, #256]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002684:	f7fe fb6e 	bl	8000d64 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800268a:	e009      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800268c:	f7fe fb6a 	bl	8000d64 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d902      	bls.n	80026a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	73fb      	strb	r3, [r7, #15]
        break;
 800269e:	e005      	b.n	80026ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026a0:	4b37      	ldr	r3, [pc, #220]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ef      	bne.n	800268c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d160      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d111      	bne.n	80026dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6892      	ldr	r2, [r2, #8]
 80026c8:	0211      	lsls	r1, r2, #8
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68d2      	ldr	r2, [r2, #12]
 80026ce:	0912      	lsrs	r2, r2, #4
 80026d0:	0452      	lsls	r2, r2, #17
 80026d2:	430a      	orrs	r2, r1
 80026d4:	492a      	ldr	r1, [pc, #168]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	610b      	str	r3, [r1, #16]
 80026da:	e027      	b.n	800272c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d112      	bne.n	8002708 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e2:	4b27      	ldr	r3, [pc, #156]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6892      	ldr	r2, [r2, #8]
 80026f2:	0211      	lsls	r1, r2, #8
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6912      	ldr	r2, [r2, #16]
 80026f8:	0852      	lsrs	r2, r2, #1
 80026fa:	3a01      	subs	r2, #1
 80026fc:	0552      	lsls	r2, r2, #21
 80026fe:	430a      	orrs	r2, r1
 8002700:	491f      	ldr	r1, [pc, #124]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	610b      	str	r3, [r1, #16]
 8002706:	e011      	b.n	800272c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002710:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6892      	ldr	r2, [r2, #8]
 8002718:	0211      	lsls	r1, r2, #8
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6952      	ldr	r2, [r2, #20]
 800271e:	0852      	lsrs	r2, r2, #1
 8002720:	3a01      	subs	r2, #1
 8002722:	0652      	lsls	r2, r2, #25
 8002724:	430a      	orrs	r2, r1
 8002726:	4916      	ldr	r1, [pc, #88]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe fb14 	bl	8000d64 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800273e:	e009      	b.n	8002754 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002740:	f7fe fb10 	bl	8000d64 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	73fb      	strb	r3, [r7, #15]
          break;
 8002752:	e005      	b.n	8002760 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	4904      	ldr	r1, [pc, #16]	; (8002780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000

08002784 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002792:	4b6a      	ldr	r3, [pc, #424]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d018      	beq.n	80027d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0203 	and.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d10d      	bne.n	80027ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
       ||
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027b6:	4b61      	ldr	r3, [pc, #388]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
       ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d047      	beq.n	800285a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e044      	b.n	800285a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d018      	beq.n	800280a <RCCEx_PLLSAI2_Config+0x86>
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d825      	bhi.n	8002828 <RCCEx_PLLSAI2_Config+0xa4>
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d002      	beq.n	80027e6 <RCCEx_PLLSAI2_Config+0x62>
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d009      	beq.n	80027f8 <RCCEx_PLLSAI2_Config+0x74>
 80027e4:	e020      	b.n	8002828 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027e6:	4b55      	ldr	r3, [pc, #340]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11d      	bne.n	800282e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f6:	e01a      	b.n	800282e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d116      	bne.n	8002832 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002808:	e013      	b.n	8002832 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800280a:	4b4c      	ldr	r3, [pc, #304]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002816:	4b49      	ldr	r3, [pc, #292]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002826:	e006      	b.n	8002836 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      break;
 800282c:	e004      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002836:	bf00      	nop
    }

    if(status == HAL_OK)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800283e:	4b3f      	ldr	r3, [pc, #252]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	430b      	orrs	r3, r1
 8002854:	4939      	ldr	r1, [pc, #228]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002856:	4313      	orrs	r3, r2
 8002858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d167      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a35      	ldr	r2, [pc, #212]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286c:	f7fe fa7a 	bl	8000d64 <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002872:	e009      	b.n	8002888 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002874:	f7fe fa76 	bl	8000d64 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d902      	bls.n	8002888 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	73fb      	strb	r3, [r7, #15]
        break;
 8002886:	e005      	b.n	8002894 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002888:	4b2c      	ldr	r3, [pc, #176]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ef      	bne.n	8002874 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d14a      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a0:	4b26      	ldr	r3, [pc, #152]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6892      	ldr	r2, [r2, #8]
 80028b0:	0211      	lsls	r1, r2, #8
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	0912      	lsrs	r2, r2, #4
 80028b8:	0452      	lsls	r2, r2, #17
 80028ba:	430a      	orrs	r2, r1
 80028bc:	491f      	ldr	r1, [pc, #124]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	614b      	str	r3, [r1, #20]
 80028c2:	e011      	b.n	80028e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6892      	ldr	r2, [r2, #8]
 80028d4:	0211      	lsls	r1, r2, #8
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6912      	ldr	r2, [r2, #16]
 80028da:	0852      	lsrs	r2, r2, #1
 80028dc:	3a01      	subs	r2, #1
 80028de:	0652      	lsls	r2, r2, #25
 80028e0:	430a      	orrs	r2, r1
 80028e2:	4916      	ldr	r1, [pc, #88]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a13      	ldr	r2, [pc, #76]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe fa36 	bl	8000d64 <HAL_GetTick>
 80028f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028fa:	e009      	b.n	8002910 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028fc:	f7fe fa32 	bl	8000d64 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d902      	bls.n	8002910 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	73fb      	strb	r3, [r7, #15]
          break;
 800290e:	e005      	b.n	800291c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ef      	beq.n	80028fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	4904      	ldr	r1, [pc, #16]	; (800293c <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	4313      	orrs	r3, r2
 800292e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000

08002940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e040      	b.n	80029d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe f844 	bl	80009f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f992 	bl	8002ca8 <UART_SetConfig>
 8002984:	4603      	mov	r3, r0
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e022      	b.n	80029d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fc3e 	bl	8003218 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fcc5 	bl	800335c <UART_CheckIdleState>
 80029d2:	4603      	mov	r3, r0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	f040 8082 	bne.w	8002afa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_UART_Transmit+0x26>
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07a      	b.n	8002afc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Transmit+0x38>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e073      	b.n	8002afc <HAL_UART_Transmit+0x120>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2221      	movs	r2, #33	; 0x21
 8002a28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a2a:	f7fe f99b 	bl	8000d64 <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	88fa      	ldrh	r2, [r7, #6]
 8002a3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a48:	d108      	bne.n	8002a5c <HAL_UART_Transmit+0x80>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	e003      	b.n	8002a64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a6c:	e02d      	b.n	8002aca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fcb8 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e039      	b.n	8002afc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	881a      	ldrh	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a9a:	b292      	uxth	r2, r2
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	e008      	b.n	8002ab8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	b292      	uxth	r2, r2
 8002ab0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1cb      	bne.n	8002a6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2140      	movs	r1, #64	; 0x40
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fc84 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e005      	b.n	8002afc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
  }
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	f040 80bf 	bne.w	8002c9c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_UART_Receive+0x26>
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0b7      	b.n	8002c9e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_UART_Receive+0x38>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e0b0      	b.n	8002c9e <HAL_UART_Receive+0x19a>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2222      	movs	r2, #34	; 0x22
 8002b50:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b58:	f7fe f904 	bl	8000d64 <HAL_GetTick>
 8002b5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	88fa      	ldrh	r2, [r7, #6]
 8002b62:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b76:	d10e      	bne.n	8002b96 <HAL_UART_Receive+0x92>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_UART_Receive+0x88>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b8a:	e02d      	b.n	8002be8 <HAL_UART_Receive+0xe4>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	22ff      	movs	r2, #255	; 0xff
 8002b90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b94:	e028      	b.n	8002be8 <HAL_UART_Receive+0xe4>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10d      	bne.n	8002bba <HAL_UART_Receive+0xb6>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d104      	bne.n	8002bb0 <HAL_UART_Receive+0xac>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bae:	e01b      	b.n	8002be8 <HAL_UART_Receive+0xe4>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	227f      	movs	r2, #127	; 0x7f
 8002bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bb8:	e016      	b.n	8002be8 <HAL_UART_Receive+0xe4>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc2:	d10d      	bne.n	8002be0 <HAL_UART_Receive+0xdc>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d104      	bne.n	8002bd6 <HAL_UART_Receive+0xd2>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	227f      	movs	r2, #127	; 0x7f
 8002bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bd4:	e008      	b.n	8002be8 <HAL_UART_Receive+0xe4>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	223f      	movs	r2, #63	; 0x3f
 8002bda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bde:	e003      	b.n	8002be8 <HAL_UART_Receive+0xe4>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002bee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf8:	d108      	bne.n	8002c0c <HAL_UART_Receive+0x108>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d104      	bne.n	8002c0c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	e003      	b.n	8002c14 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c1c:	e033      	b.n	8002c86 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2120      	movs	r1, #32
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fbe0 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e032      	b.n	8002c9e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10c      	bne.n	8002c58 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	8a7b      	ldrh	r3, [r7, #18]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	3302      	adds	r3, #2
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	e00d      	b.n	8002c74 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	8a7b      	ldrh	r3, [r7, #18]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	4013      	ands	r3, r2
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3301      	adds	r3, #1
 8002c72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1c5      	bne.n	8002c1e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
  }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3720      	adds	r7, #32
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cac:	b08a      	sub	sp, #40	; 0x28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4ba4      	ldr	r3, [pc, #656]	; (8002f68 <UART_SetConfig+0x2c0>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a99      	ldr	r2, [pc, #612]	; (8002f6c <UART_SetConfig+0x2c4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d004      	beq.n	8002d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d10:	4313      	orrs	r3, r2
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d24:	430a      	orrs	r2, r1
 8002d26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a90      	ldr	r2, [pc, #576]	; (8002f70 <UART_SetConfig+0x2c8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d126      	bne.n	8002d80 <UART_SetConfig+0xd8>
 8002d32:	4b90      	ldr	r3, [pc, #576]	; (8002f74 <UART_SetConfig+0x2cc>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d81b      	bhi.n	8002d78 <UART_SetConfig+0xd0>
 8002d40:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <UART_SetConfig+0xa0>)
 8002d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d46:	bf00      	nop
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d69 	.word	0x08002d69
 8002d50:	08002d61 	.word	0x08002d61
 8002d54:	08002d71 	.word	0x08002d71
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d5e:	e116      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002d60:	2302      	movs	r3, #2
 8002d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d66:	e112      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6e:	e10e      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002d70:	2308      	movs	r3, #8
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d76:	e10a      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002d78:	2310      	movs	r3, #16
 8002d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d7e:	e106      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a7c      	ldr	r2, [pc, #496]	; (8002f78 <UART_SetConfig+0x2d0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d138      	bne.n	8002dfc <UART_SetConfig+0x154>
 8002d8a:	4b7a      	ldr	r3, [pc, #488]	; (8002f74 <UART_SetConfig+0x2cc>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d82d      	bhi.n	8002df4 <UART_SetConfig+0x14c>
 8002d98:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <UART_SetConfig+0xf8>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002dd5 	.word	0x08002dd5
 8002da4:	08002df5 	.word	0x08002df5
 8002da8:	08002df5 	.word	0x08002df5
 8002dac:	08002df5 	.word	0x08002df5
 8002db0:	08002de5 	.word	0x08002de5
 8002db4:	08002df5 	.word	0x08002df5
 8002db8:	08002df5 	.word	0x08002df5
 8002dbc:	08002df5 	.word	0x08002df5
 8002dc0:	08002ddd 	.word	0x08002ddd
 8002dc4:	08002df5 	.word	0x08002df5
 8002dc8:	08002df5 	.word	0x08002df5
 8002dcc:	08002df5 	.word	0x08002df5
 8002dd0:	08002ded 	.word	0x08002ded
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dda:	e0d8      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002de2:	e0d4      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002de4:	2304      	movs	r3, #4
 8002de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dea:	e0d0      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002dec:	2308      	movs	r3, #8
 8002dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002df2:	e0cc      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002df4:	2310      	movs	r3, #16
 8002df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dfa:	e0c8      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5e      	ldr	r2, [pc, #376]	; (8002f7c <UART_SetConfig+0x2d4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d125      	bne.n	8002e52 <UART_SetConfig+0x1aa>
 8002e06:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <UART_SetConfig+0x2cc>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e10:	2b30      	cmp	r3, #48	; 0x30
 8002e12:	d016      	beq.n	8002e42 <UART_SetConfig+0x19a>
 8002e14:	2b30      	cmp	r3, #48	; 0x30
 8002e16:	d818      	bhi.n	8002e4a <UART_SetConfig+0x1a2>
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d00a      	beq.n	8002e32 <UART_SetConfig+0x18a>
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d814      	bhi.n	8002e4a <UART_SetConfig+0x1a2>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <UART_SetConfig+0x182>
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d008      	beq.n	8002e3a <UART_SetConfig+0x192>
 8002e28:	e00f      	b.n	8002e4a <UART_SetConfig+0x1a2>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e30:	e0ad      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002e32:	2302      	movs	r3, #2
 8002e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e38:	e0a9      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e40:	e0a5      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002e42:	2308      	movs	r3, #8
 8002e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e48:	e0a1      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e50:	e09d      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a4a      	ldr	r2, [pc, #296]	; (8002f80 <UART_SetConfig+0x2d8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d125      	bne.n	8002ea8 <UART_SetConfig+0x200>
 8002e5c:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <UART_SetConfig+0x2cc>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e66:	2bc0      	cmp	r3, #192	; 0xc0
 8002e68:	d016      	beq.n	8002e98 <UART_SetConfig+0x1f0>
 8002e6a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e6c:	d818      	bhi.n	8002ea0 <UART_SetConfig+0x1f8>
 8002e6e:	2b80      	cmp	r3, #128	; 0x80
 8002e70:	d00a      	beq.n	8002e88 <UART_SetConfig+0x1e0>
 8002e72:	2b80      	cmp	r3, #128	; 0x80
 8002e74:	d814      	bhi.n	8002ea0 <UART_SetConfig+0x1f8>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <UART_SetConfig+0x1d8>
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d008      	beq.n	8002e90 <UART_SetConfig+0x1e8>
 8002e7e:	e00f      	b.n	8002ea0 <UART_SetConfig+0x1f8>
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e86:	e082      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8e:	e07e      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002e90:	2304      	movs	r3, #4
 8002e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e96:	e07a      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002e98:	2308      	movs	r3, #8
 8002e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9e:	e076      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea6:	e072      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a35      	ldr	r2, [pc, #212]	; (8002f84 <UART_SetConfig+0x2dc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d12a      	bne.n	8002f08 <UART_SetConfig+0x260>
 8002eb2:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <UART_SetConfig+0x2cc>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec0:	d01a      	beq.n	8002ef8 <UART_SetConfig+0x250>
 8002ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec6:	d81b      	bhi.n	8002f00 <UART_SetConfig+0x258>
 8002ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ecc:	d00c      	beq.n	8002ee8 <UART_SetConfig+0x240>
 8002ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed2:	d815      	bhi.n	8002f00 <UART_SetConfig+0x258>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <UART_SetConfig+0x238>
 8002ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002edc:	d008      	beq.n	8002ef0 <UART_SetConfig+0x248>
 8002ede:	e00f      	b.n	8002f00 <UART_SetConfig+0x258>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee6:	e052      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eee:	e04e      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef6:	e04a      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002ef8:	2308      	movs	r3, #8
 8002efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efe:	e046      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002f00:	2310      	movs	r3, #16
 8002f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f06:	e042      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <UART_SetConfig+0x2c4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d13a      	bne.n	8002f88 <UART_SetConfig+0x2e0>
 8002f12:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <UART_SetConfig+0x2cc>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f20:	d01a      	beq.n	8002f58 <UART_SetConfig+0x2b0>
 8002f22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f26:	d81b      	bhi.n	8002f60 <UART_SetConfig+0x2b8>
 8002f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f2c:	d00c      	beq.n	8002f48 <UART_SetConfig+0x2a0>
 8002f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f32:	d815      	bhi.n	8002f60 <UART_SetConfig+0x2b8>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <UART_SetConfig+0x298>
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3c:	d008      	beq.n	8002f50 <UART_SetConfig+0x2a8>
 8002f3e:	e00f      	b.n	8002f60 <UART_SetConfig+0x2b8>
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f46:	e022      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4e:	e01e      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002f50:	2304      	movs	r3, #4
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f56:	e01a      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5e:	e016      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002f60:	2310      	movs	r3, #16
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f66:	e012      	b.n	8002f8e <UART_SetConfig+0x2e6>
 8002f68:	efff69f3 	.word	0xefff69f3
 8002f6c:	40008000 	.word	0x40008000
 8002f70:	40013800 	.word	0x40013800
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40004400 	.word	0x40004400
 8002f7c:	40004800 	.word	0x40004800
 8002f80:	40004c00 	.word	0x40004c00
 8002f84:	40005000 	.word	0x40005000
 8002f88:	2310      	movs	r3, #16
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a9f      	ldr	r2, [pc, #636]	; (8003210 <UART_SetConfig+0x568>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d17a      	bne.n	800308e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d824      	bhi.n	8002fea <UART_SetConfig+0x342>
 8002fa0:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <UART_SetConfig+0x300>)
 8002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa6:	bf00      	nop
 8002fa8:	08002fcd 	.word	0x08002fcd
 8002fac:	08002feb 	.word	0x08002feb
 8002fb0:	08002fd5 	.word	0x08002fd5
 8002fb4:	08002feb 	.word	0x08002feb
 8002fb8:	08002fdb 	.word	0x08002fdb
 8002fbc:	08002feb 	.word	0x08002feb
 8002fc0:	08002feb 	.word	0x08002feb
 8002fc4:	08002feb 	.word	0x08002feb
 8002fc8:	08002fe3 	.word	0x08002fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f7fe ff70 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 8002fd0:	61f8      	str	r0, [r7, #28]
        break;
 8002fd2:	e010      	b.n	8002ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fd4:	4b8f      	ldr	r3, [pc, #572]	; (8003214 <UART_SetConfig+0x56c>)
 8002fd6:	61fb      	str	r3, [r7, #28]
        break;
 8002fd8:	e00d      	b.n	8002ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fda:	f7fe fed1 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8002fde:	61f8      	str	r0, [r7, #28]
        break;
 8002fe0:	e009      	b.n	8002ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe6:	61fb      	str	r3, [r7, #28]
        break;
 8002fe8:	e005      	b.n	8002ff6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ff4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80fb 	beq.w	80031f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	429a      	cmp	r2, r3
 800300c:	d305      	bcc.n	800301a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	429a      	cmp	r2, r3
 8003018:	d903      	bls.n	8003022 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003020:	e0e8      	b.n	80031f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2200      	movs	r2, #0
 8003026:	461c      	mov	r4, r3
 8003028:	4615      	mov	r5, r2
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	022b      	lsls	r3, r5, #8
 8003034:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003038:	0222      	lsls	r2, r4, #8
 800303a:	68f9      	ldr	r1, [r7, #12]
 800303c:	6849      	ldr	r1, [r1, #4]
 800303e:	0849      	lsrs	r1, r1, #1
 8003040:	2000      	movs	r0, #0
 8003042:	4688      	mov	r8, r1
 8003044:	4681      	mov	r9, r0
 8003046:	eb12 0a08 	adds.w	sl, r2, r8
 800304a:	eb43 0b09 	adc.w	fp, r3, r9
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800305c:	4650      	mov	r0, sl
 800305e:	4659      	mov	r1, fp
 8003060:	f7fd f91e 	bl	80002a0 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4613      	mov	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003072:	d308      	bcc.n	8003086 <UART_SetConfig+0x3de>
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800307a:	d204      	bcs.n	8003086 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	60da      	str	r2, [r3, #12]
 8003084:	e0b6      	b.n	80031f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800308c:	e0b2      	b.n	80031f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003096:	d15e      	bne.n	8003156 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800309c:	2b08      	cmp	r3, #8
 800309e:	d828      	bhi.n	80030f2 <UART_SetConfig+0x44a>
 80030a0:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <UART_SetConfig+0x400>)
 80030a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a6:	bf00      	nop
 80030a8:	080030cd 	.word	0x080030cd
 80030ac:	080030d5 	.word	0x080030d5
 80030b0:	080030dd 	.word	0x080030dd
 80030b4:	080030f3 	.word	0x080030f3
 80030b8:	080030e3 	.word	0x080030e3
 80030bc:	080030f3 	.word	0x080030f3
 80030c0:	080030f3 	.word	0x080030f3
 80030c4:	080030f3 	.word	0x080030f3
 80030c8:	080030eb 	.word	0x080030eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030cc:	f7fe fef0 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 80030d0:	61f8      	str	r0, [r7, #28]
        break;
 80030d2:	e014      	b.n	80030fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030d4:	f7fe ff02 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 80030d8:	61f8      	str	r0, [r7, #28]
        break;
 80030da:	e010      	b.n	80030fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030dc:	4b4d      	ldr	r3, [pc, #308]	; (8003214 <UART_SetConfig+0x56c>)
 80030de:	61fb      	str	r3, [r7, #28]
        break;
 80030e0:	e00d      	b.n	80030fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e2:	f7fe fe4d 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80030e6:	61f8      	str	r0, [r7, #28]
        break;
 80030e8:	e009      	b.n	80030fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ee:	61fb      	str	r3, [r7, #28]
        break;
 80030f0:	e005      	b.n	80030fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d077      	beq.n	80031f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005a      	lsls	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	441a      	add	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b0f      	cmp	r3, #15
 800311e:	d916      	bls.n	800314e <UART_SetConfig+0x4a6>
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003126:	d212      	bcs.n	800314e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f023 030f 	bic.w	r3, r3, #15
 8003130:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	085b      	lsrs	r3, r3, #1
 8003136:	b29b      	uxth	r3, r3
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	b29a      	uxth	r2, r3
 800313e:	8afb      	ldrh	r3, [r7, #22]
 8003140:	4313      	orrs	r3, r2
 8003142:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	8afa      	ldrh	r2, [r7, #22]
 800314a:	60da      	str	r2, [r3, #12]
 800314c:	e052      	b.n	80031f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003154:	e04e      	b.n	80031f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800315a:	2b08      	cmp	r3, #8
 800315c:	d827      	bhi.n	80031ae <UART_SetConfig+0x506>
 800315e:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <UART_SetConfig+0x4bc>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003189 	.word	0x08003189
 8003168:	08003191 	.word	0x08003191
 800316c:	08003199 	.word	0x08003199
 8003170:	080031af 	.word	0x080031af
 8003174:	0800319f 	.word	0x0800319f
 8003178:	080031af 	.word	0x080031af
 800317c:	080031af 	.word	0x080031af
 8003180:	080031af 	.word	0x080031af
 8003184:	080031a7 	.word	0x080031a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003188:	f7fe fe92 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 800318c:	61f8      	str	r0, [r7, #28]
        break;
 800318e:	e014      	b.n	80031ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003190:	f7fe fea4 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 8003194:	61f8      	str	r0, [r7, #28]
        break;
 8003196:	e010      	b.n	80031ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003198:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <UART_SetConfig+0x56c>)
 800319a:	61fb      	str	r3, [r7, #28]
        break;
 800319c:	e00d      	b.n	80031ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319e:	f7fe fdef 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80031a2:	61f8      	str	r0, [r7, #28]
        break;
 80031a4:	e009      	b.n	80031ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031aa:	61fb      	str	r3, [r7, #28]
        break;
 80031ac:	e005      	b.n	80031ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031b8:	bf00      	nop
    }

    if (pclk != 0U)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d019      	beq.n	80031f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	085a      	lsrs	r2, r3, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	441a      	add	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b0f      	cmp	r3, #15
 80031d8:	d909      	bls.n	80031ee <UART_SetConfig+0x546>
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	d205      	bcs.n	80031ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60da      	str	r2, [r3, #12]
 80031ec:	e002      	b.n	80031f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003200:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003204:	4618      	mov	r0, r3
 8003206:	3728      	adds	r7, #40	; 0x28
 8003208:	46bd      	mov	sp, r7
 800320a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800320e:	bf00      	nop
 8003210:	40008000 	.word	0x40008000
 8003214:	00f42400 	.word	0x00f42400

08003218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01a      	beq.n	800332e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003316:	d10a      	bne.n	800332e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  }
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af02      	add	r7, sp, #8
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800336c:	f7fd fcfa 	bl	8000d64 <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b08      	cmp	r3, #8
 800337e:	d10e      	bne.n	800339e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f82d 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e023      	b.n	80033e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d10e      	bne.n	80033ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f817 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e00d      	b.n	80033e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b09c      	sub	sp, #112	; 0x70
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fe:	e0a5      	b.n	800354c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	f000 80a1 	beq.w	800354c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fd fcab 	bl	8000d64 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <UART_WaitOnFlagUntilTimeout+0x32>
 800341a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800341c:	2b00      	cmp	r3, #0
 800341e:	d13e      	bne.n	800349e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800342e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003430:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003434:	667b      	str	r3, [r7, #100]	; 0x64
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800343e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003440:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003444:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800344c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e6      	bne.n	8003420 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3308      	adds	r3, #8
 8003458:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	663b      	str	r3, [r7, #96]	; 0x60
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3308      	adds	r3, #8
 8003470:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003472:	64ba      	str	r2, [r7, #72]	; 0x48
 8003474:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e067      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d04f      	beq.n	800354c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ba:	d147      	bne.n	800354c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034c4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
 80034e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e6      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3308      	adds	r3, #8
 80034fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	613b      	str	r3, [r7, #16]
   return(result);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003518:	623a      	str	r2, [r7, #32]
 800351a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	69f9      	ldr	r1, [r7, #28]
 800351e:	6a3a      	ldr	r2, [r7, #32]
 8003520:	e841 2300 	strex	r3, r2, [r1]
 8003524:	61bb      	str	r3, [r7, #24]
   return(result);
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e5      	bne.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e010      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4013      	ands	r3, r2
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	429a      	cmp	r2, r3
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	429a      	cmp	r2, r3
 8003568:	f43f af4a 	beq.w	8003400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3770      	adds	r7, #112	; 0x70
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <__errno>:
 8003578:	4b01      	ldr	r3, [pc, #4]	; (8003580 <__errno+0x8>)
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	2000000c 	.word	0x2000000c

08003584 <__libc_init_array>:
 8003584:	b570      	push	{r4, r5, r6, lr}
 8003586:	4d0d      	ldr	r5, [pc, #52]	; (80035bc <__libc_init_array+0x38>)
 8003588:	4c0d      	ldr	r4, [pc, #52]	; (80035c0 <__libc_init_array+0x3c>)
 800358a:	1b64      	subs	r4, r4, r5
 800358c:	10a4      	asrs	r4, r4, #2
 800358e:	2600      	movs	r6, #0
 8003590:	42a6      	cmp	r6, r4
 8003592:	d109      	bne.n	80035a8 <__libc_init_array+0x24>
 8003594:	4d0b      	ldr	r5, [pc, #44]	; (80035c4 <__libc_init_array+0x40>)
 8003596:	4c0c      	ldr	r4, [pc, #48]	; (80035c8 <__libc_init_array+0x44>)
 8003598:	f001 fa20 	bl	80049dc <_init>
 800359c:	1b64      	subs	r4, r4, r5
 800359e:	10a4      	asrs	r4, r4, #2
 80035a0:	2600      	movs	r6, #0
 80035a2:	42a6      	cmp	r6, r4
 80035a4:	d105      	bne.n	80035b2 <__libc_init_array+0x2e>
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
 80035a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ac:	4798      	blx	r3
 80035ae:	3601      	adds	r6, #1
 80035b0:	e7ee      	b.n	8003590 <__libc_init_array+0xc>
 80035b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b6:	4798      	blx	r3
 80035b8:	3601      	adds	r6, #1
 80035ba:	e7f2      	b.n	80035a2 <__libc_init_array+0x1e>
 80035bc:	08004c04 	.word	0x08004c04
 80035c0:	08004c04 	.word	0x08004c04
 80035c4:	08004c04 	.word	0x08004c04
 80035c8:	08004c08 	.word	0x08004c08

080035cc <memset>:
 80035cc:	4402      	add	r2, r0
 80035ce:	4603      	mov	r3, r0
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d100      	bne.n	80035d6 <memset+0xa>
 80035d4:	4770      	bx	lr
 80035d6:	f803 1b01 	strb.w	r1, [r3], #1
 80035da:	e7f9      	b.n	80035d0 <memset+0x4>

080035dc <_puts_r>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	460e      	mov	r6, r1
 80035e0:	4605      	mov	r5, r0
 80035e2:	b118      	cbz	r0, 80035ec <_puts_r+0x10>
 80035e4:	6983      	ldr	r3, [r0, #24]
 80035e6:	b90b      	cbnz	r3, 80035ec <_puts_r+0x10>
 80035e8:	f000 fadc 	bl	8003ba4 <__sinit>
 80035ec:	69ab      	ldr	r3, [r5, #24]
 80035ee:	68ac      	ldr	r4, [r5, #8]
 80035f0:	b913      	cbnz	r3, 80035f8 <_puts_r+0x1c>
 80035f2:	4628      	mov	r0, r5
 80035f4:	f000 fad6 	bl	8003ba4 <__sinit>
 80035f8:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <_puts_r+0xd0>)
 80035fa:	429c      	cmp	r4, r3
 80035fc:	d120      	bne.n	8003640 <_puts_r+0x64>
 80035fe:	686c      	ldr	r4, [r5, #4]
 8003600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003602:	07db      	lsls	r3, r3, #31
 8003604:	d405      	bmi.n	8003612 <_puts_r+0x36>
 8003606:	89a3      	ldrh	r3, [r4, #12]
 8003608:	0598      	lsls	r0, r3, #22
 800360a:	d402      	bmi.n	8003612 <_puts_r+0x36>
 800360c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800360e:	f000 fb67 	bl	8003ce0 <__retarget_lock_acquire_recursive>
 8003612:	89a3      	ldrh	r3, [r4, #12]
 8003614:	0719      	lsls	r1, r3, #28
 8003616:	d51d      	bpl.n	8003654 <_puts_r+0x78>
 8003618:	6923      	ldr	r3, [r4, #16]
 800361a:	b1db      	cbz	r3, 8003654 <_puts_r+0x78>
 800361c:	3e01      	subs	r6, #1
 800361e:	68a3      	ldr	r3, [r4, #8]
 8003620:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003624:	3b01      	subs	r3, #1
 8003626:	60a3      	str	r3, [r4, #8]
 8003628:	bb39      	cbnz	r1, 800367a <_puts_r+0x9e>
 800362a:	2b00      	cmp	r3, #0
 800362c:	da38      	bge.n	80036a0 <_puts_r+0xc4>
 800362e:	4622      	mov	r2, r4
 8003630:	210a      	movs	r1, #10
 8003632:	4628      	mov	r0, r5
 8003634:	f000 f8ba 	bl	80037ac <__swbuf_r>
 8003638:	3001      	adds	r0, #1
 800363a:	d011      	beq.n	8003660 <_puts_r+0x84>
 800363c:	250a      	movs	r5, #10
 800363e:	e011      	b.n	8003664 <_puts_r+0x88>
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <_puts_r+0xd4>)
 8003642:	429c      	cmp	r4, r3
 8003644:	d101      	bne.n	800364a <_puts_r+0x6e>
 8003646:	68ac      	ldr	r4, [r5, #8]
 8003648:	e7da      	b.n	8003600 <_puts_r+0x24>
 800364a:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <_puts_r+0xd8>)
 800364c:	429c      	cmp	r4, r3
 800364e:	bf08      	it	eq
 8003650:	68ec      	ldreq	r4, [r5, #12]
 8003652:	e7d5      	b.n	8003600 <_puts_r+0x24>
 8003654:	4621      	mov	r1, r4
 8003656:	4628      	mov	r0, r5
 8003658:	f000 f90c 	bl	8003874 <__swsetup_r>
 800365c:	2800      	cmp	r0, #0
 800365e:	d0dd      	beq.n	800361c <_puts_r+0x40>
 8003660:	f04f 35ff 	mov.w	r5, #4294967295
 8003664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003666:	07da      	lsls	r2, r3, #31
 8003668:	d405      	bmi.n	8003676 <_puts_r+0x9a>
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	059b      	lsls	r3, r3, #22
 800366e:	d402      	bmi.n	8003676 <_puts_r+0x9a>
 8003670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003672:	f000 fb36 	bl	8003ce2 <__retarget_lock_release_recursive>
 8003676:	4628      	mov	r0, r5
 8003678:	bd70      	pop	{r4, r5, r6, pc}
 800367a:	2b00      	cmp	r3, #0
 800367c:	da04      	bge.n	8003688 <_puts_r+0xac>
 800367e:	69a2      	ldr	r2, [r4, #24]
 8003680:	429a      	cmp	r2, r3
 8003682:	dc06      	bgt.n	8003692 <_puts_r+0xb6>
 8003684:	290a      	cmp	r1, #10
 8003686:	d004      	beq.n	8003692 <_puts_r+0xb6>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	6022      	str	r2, [r4, #0]
 800368e:	7019      	strb	r1, [r3, #0]
 8003690:	e7c5      	b.n	800361e <_puts_r+0x42>
 8003692:	4622      	mov	r2, r4
 8003694:	4628      	mov	r0, r5
 8003696:	f000 f889 	bl	80037ac <__swbuf_r>
 800369a:	3001      	adds	r0, #1
 800369c:	d1bf      	bne.n	800361e <_puts_r+0x42>
 800369e:	e7df      	b.n	8003660 <_puts_r+0x84>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	250a      	movs	r5, #10
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	6022      	str	r2, [r4, #0]
 80036a8:	701d      	strb	r5, [r3, #0]
 80036aa:	e7db      	b.n	8003664 <_puts_r+0x88>
 80036ac:	08004a9c 	.word	0x08004a9c
 80036b0:	08004abc 	.word	0x08004abc
 80036b4:	08004a7c 	.word	0x08004a7c

080036b8 <puts>:
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <puts+0xc>)
 80036ba:	4601      	mov	r1, r0
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	f7ff bf8d 	b.w	80035dc <_puts_r>
 80036c2:	bf00      	nop
 80036c4:	2000000c 	.word	0x2000000c

080036c8 <siscanf>:
 80036c8:	b40e      	push	{r1, r2, r3}
 80036ca:	b510      	push	{r4, lr}
 80036cc:	b09f      	sub	sp, #124	; 0x7c
 80036ce:	ac21      	add	r4, sp, #132	; 0x84
 80036d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80036d4:	f854 2b04 	ldr.w	r2, [r4], #4
 80036d8:	9201      	str	r2, [sp, #4]
 80036da:	f8ad 101c 	strh.w	r1, [sp, #28]
 80036de:	9004      	str	r0, [sp, #16]
 80036e0:	9008      	str	r0, [sp, #32]
 80036e2:	f7fc fd7f 	bl	80001e4 <strlen>
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <siscanf+0x50>)
 80036e8:	9005      	str	r0, [sp, #20]
 80036ea:	9009      	str	r0, [sp, #36]	; 0x24
 80036ec:	930d      	str	r3, [sp, #52]	; 0x34
 80036ee:	480b      	ldr	r0, [pc, #44]	; (800371c <siscanf+0x54>)
 80036f0:	9a01      	ldr	r2, [sp, #4]
 80036f2:	6800      	ldr	r0, [r0, #0]
 80036f4:	9403      	str	r4, [sp, #12]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9311      	str	r3, [sp, #68]	; 0x44
 80036fa:	9316      	str	r3, [sp, #88]	; 0x58
 80036fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003700:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003704:	a904      	add	r1, sp, #16
 8003706:	4623      	mov	r3, r4
 8003708:	f000 fc9e 	bl	8004048 <__ssvfiscanf_r>
 800370c:	b01f      	add	sp, #124	; 0x7c
 800370e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003712:	b003      	add	sp, #12
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	08003743 	.word	0x08003743
 800371c:	2000000c 	.word	0x2000000c

08003720 <__sread>:
 8003720:	b510      	push	{r4, lr}
 8003722:	460c      	mov	r4, r1
 8003724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003728:	f000 ff58 	bl	80045dc <_read_r>
 800372c:	2800      	cmp	r0, #0
 800372e:	bfab      	itete	ge
 8003730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003732:	89a3      	ldrhlt	r3, [r4, #12]
 8003734:	181b      	addge	r3, r3, r0
 8003736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800373a:	bfac      	ite	ge
 800373c:	6563      	strge	r3, [r4, #84]	; 0x54
 800373e:	81a3      	strhlt	r3, [r4, #12]
 8003740:	bd10      	pop	{r4, pc}

08003742 <__seofread>:
 8003742:	2000      	movs	r0, #0
 8003744:	4770      	bx	lr

08003746 <__swrite>:
 8003746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800374a:	461f      	mov	r7, r3
 800374c:	898b      	ldrh	r3, [r1, #12]
 800374e:	05db      	lsls	r3, r3, #23
 8003750:	4605      	mov	r5, r0
 8003752:	460c      	mov	r4, r1
 8003754:	4616      	mov	r6, r2
 8003756:	d505      	bpl.n	8003764 <__swrite+0x1e>
 8003758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800375c:	2302      	movs	r3, #2
 800375e:	2200      	movs	r2, #0
 8003760:	f000 fac0 	bl	8003ce4 <_lseek_r>
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800376a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800376e:	81a3      	strh	r3, [r4, #12]
 8003770:	4632      	mov	r2, r6
 8003772:	463b      	mov	r3, r7
 8003774:	4628      	mov	r0, r5
 8003776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800377a:	f000 b869 	b.w	8003850 <_write_r>

0800377e <__sseek>:
 800377e:	b510      	push	{r4, lr}
 8003780:	460c      	mov	r4, r1
 8003782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003786:	f000 faad 	bl	8003ce4 <_lseek_r>
 800378a:	1c43      	adds	r3, r0, #1
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	bf15      	itete	ne
 8003790:	6560      	strne	r0, [r4, #84]	; 0x54
 8003792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800379a:	81a3      	strheq	r3, [r4, #12]
 800379c:	bf18      	it	ne
 800379e:	81a3      	strhne	r3, [r4, #12]
 80037a0:	bd10      	pop	{r4, pc}

080037a2 <__sclose>:
 80037a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a6:	f000 b8d3 	b.w	8003950 <_close_r>
	...

080037ac <__swbuf_r>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	460e      	mov	r6, r1
 80037b0:	4614      	mov	r4, r2
 80037b2:	4605      	mov	r5, r0
 80037b4:	b118      	cbz	r0, 80037be <__swbuf_r+0x12>
 80037b6:	6983      	ldr	r3, [r0, #24]
 80037b8:	b90b      	cbnz	r3, 80037be <__swbuf_r+0x12>
 80037ba:	f000 f9f3 	bl	8003ba4 <__sinit>
 80037be:	4b21      	ldr	r3, [pc, #132]	; (8003844 <__swbuf_r+0x98>)
 80037c0:	429c      	cmp	r4, r3
 80037c2:	d12b      	bne.n	800381c <__swbuf_r+0x70>
 80037c4:	686c      	ldr	r4, [r5, #4]
 80037c6:	69a3      	ldr	r3, [r4, #24]
 80037c8:	60a3      	str	r3, [r4, #8]
 80037ca:	89a3      	ldrh	r3, [r4, #12]
 80037cc:	071a      	lsls	r2, r3, #28
 80037ce:	d52f      	bpl.n	8003830 <__swbuf_r+0x84>
 80037d0:	6923      	ldr	r3, [r4, #16]
 80037d2:	b36b      	cbz	r3, 8003830 <__swbuf_r+0x84>
 80037d4:	6923      	ldr	r3, [r4, #16]
 80037d6:	6820      	ldr	r0, [r4, #0]
 80037d8:	1ac0      	subs	r0, r0, r3
 80037da:	6963      	ldr	r3, [r4, #20]
 80037dc:	b2f6      	uxtb	r6, r6
 80037de:	4283      	cmp	r3, r0
 80037e0:	4637      	mov	r7, r6
 80037e2:	dc04      	bgt.n	80037ee <__swbuf_r+0x42>
 80037e4:	4621      	mov	r1, r4
 80037e6:	4628      	mov	r0, r5
 80037e8:	f000 f948 	bl	8003a7c <_fflush_r>
 80037ec:	bb30      	cbnz	r0, 800383c <__swbuf_r+0x90>
 80037ee:	68a3      	ldr	r3, [r4, #8]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	60a3      	str	r3, [r4, #8]
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	6022      	str	r2, [r4, #0]
 80037fa:	701e      	strb	r6, [r3, #0]
 80037fc:	6963      	ldr	r3, [r4, #20]
 80037fe:	3001      	adds	r0, #1
 8003800:	4283      	cmp	r3, r0
 8003802:	d004      	beq.n	800380e <__swbuf_r+0x62>
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	07db      	lsls	r3, r3, #31
 8003808:	d506      	bpl.n	8003818 <__swbuf_r+0x6c>
 800380a:	2e0a      	cmp	r6, #10
 800380c:	d104      	bne.n	8003818 <__swbuf_r+0x6c>
 800380e:	4621      	mov	r1, r4
 8003810:	4628      	mov	r0, r5
 8003812:	f000 f933 	bl	8003a7c <_fflush_r>
 8003816:	b988      	cbnz	r0, 800383c <__swbuf_r+0x90>
 8003818:	4638      	mov	r0, r7
 800381a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <__swbuf_r+0x9c>)
 800381e:	429c      	cmp	r4, r3
 8003820:	d101      	bne.n	8003826 <__swbuf_r+0x7a>
 8003822:	68ac      	ldr	r4, [r5, #8]
 8003824:	e7cf      	b.n	80037c6 <__swbuf_r+0x1a>
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <__swbuf_r+0xa0>)
 8003828:	429c      	cmp	r4, r3
 800382a:	bf08      	it	eq
 800382c:	68ec      	ldreq	r4, [r5, #12]
 800382e:	e7ca      	b.n	80037c6 <__swbuf_r+0x1a>
 8003830:	4621      	mov	r1, r4
 8003832:	4628      	mov	r0, r5
 8003834:	f000 f81e 	bl	8003874 <__swsetup_r>
 8003838:	2800      	cmp	r0, #0
 800383a:	d0cb      	beq.n	80037d4 <__swbuf_r+0x28>
 800383c:	f04f 37ff 	mov.w	r7, #4294967295
 8003840:	e7ea      	b.n	8003818 <__swbuf_r+0x6c>
 8003842:	bf00      	nop
 8003844:	08004a9c 	.word	0x08004a9c
 8003848:	08004abc 	.word	0x08004abc
 800384c:	08004a7c 	.word	0x08004a7c

08003850 <_write_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4d07      	ldr	r5, [pc, #28]	; (8003870 <_write_r+0x20>)
 8003854:	4604      	mov	r4, r0
 8003856:	4608      	mov	r0, r1
 8003858:	4611      	mov	r1, r2
 800385a:	2200      	movs	r2, #0
 800385c:	602a      	str	r2, [r5, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	f7fc ff8a 	bl	8000778 <_write>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d102      	bne.n	800386e <_write_r+0x1e>
 8003868:	682b      	ldr	r3, [r5, #0]
 800386a:	b103      	cbz	r3, 800386e <_write_r+0x1e>
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	20000200 	.word	0x20000200

08003874 <__swsetup_r>:
 8003874:	4b32      	ldr	r3, [pc, #200]	; (8003940 <__swsetup_r+0xcc>)
 8003876:	b570      	push	{r4, r5, r6, lr}
 8003878:	681d      	ldr	r5, [r3, #0]
 800387a:	4606      	mov	r6, r0
 800387c:	460c      	mov	r4, r1
 800387e:	b125      	cbz	r5, 800388a <__swsetup_r+0x16>
 8003880:	69ab      	ldr	r3, [r5, #24]
 8003882:	b913      	cbnz	r3, 800388a <__swsetup_r+0x16>
 8003884:	4628      	mov	r0, r5
 8003886:	f000 f98d 	bl	8003ba4 <__sinit>
 800388a:	4b2e      	ldr	r3, [pc, #184]	; (8003944 <__swsetup_r+0xd0>)
 800388c:	429c      	cmp	r4, r3
 800388e:	d10f      	bne.n	80038b0 <__swsetup_r+0x3c>
 8003890:	686c      	ldr	r4, [r5, #4]
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003898:	0719      	lsls	r1, r3, #28
 800389a:	d42c      	bmi.n	80038f6 <__swsetup_r+0x82>
 800389c:	06dd      	lsls	r5, r3, #27
 800389e:	d411      	bmi.n	80038c4 <__swsetup_r+0x50>
 80038a0:	2309      	movs	r3, #9
 80038a2:	6033      	str	r3, [r6, #0]
 80038a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038a8:	81a3      	strh	r3, [r4, #12]
 80038aa:	f04f 30ff 	mov.w	r0, #4294967295
 80038ae:	e03e      	b.n	800392e <__swsetup_r+0xba>
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <__swsetup_r+0xd4>)
 80038b2:	429c      	cmp	r4, r3
 80038b4:	d101      	bne.n	80038ba <__swsetup_r+0x46>
 80038b6:	68ac      	ldr	r4, [r5, #8]
 80038b8:	e7eb      	b.n	8003892 <__swsetup_r+0x1e>
 80038ba:	4b24      	ldr	r3, [pc, #144]	; (800394c <__swsetup_r+0xd8>)
 80038bc:	429c      	cmp	r4, r3
 80038be:	bf08      	it	eq
 80038c0:	68ec      	ldreq	r4, [r5, #12]
 80038c2:	e7e6      	b.n	8003892 <__swsetup_r+0x1e>
 80038c4:	0758      	lsls	r0, r3, #29
 80038c6:	d512      	bpl.n	80038ee <__swsetup_r+0x7a>
 80038c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038ca:	b141      	cbz	r1, 80038de <__swsetup_r+0x6a>
 80038cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038d0:	4299      	cmp	r1, r3
 80038d2:	d002      	beq.n	80038da <__swsetup_r+0x66>
 80038d4:	4630      	mov	r0, r6
 80038d6:	f000 fa7d 	bl	8003dd4 <_free_r>
 80038da:	2300      	movs	r3, #0
 80038dc:	6363      	str	r3, [r4, #52]	; 0x34
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038e4:	81a3      	strh	r3, [r4, #12]
 80038e6:	2300      	movs	r3, #0
 80038e8:	6063      	str	r3, [r4, #4]
 80038ea:	6923      	ldr	r3, [r4, #16]
 80038ec:	6023      	str	r3, [r4, #0]
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	f043 0308 	orr.w	r3, r3, #8
 80038f4:	81a3      	strh	r3, [r4, #12]
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	b94b      	cbnz	r3, 800390e <__swsetup_r+0x9a>
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003904:	d003      	beq.n	800390e <__swsetup_r+0x9a>
 8003906:	4621      	mov	r1, r4
 8003908:	4630      	mov	r0, r6
 800390a:	f000 fa23 	bl	8003d54 <__smakebuf_r>
 800390e:	89a0      	ldrh	r0, [r4, #12]
 8003910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003914:	f010 0301 	ands.w	r3, r0, #1
 8003918:	d00a      	beq.n	8003930 <__swsetup_r+0xbc>
 800391a:	2300      	movs	r3, #0
 800391c:	60a3      	str	r3, [r4, #8]
 800391e:	6963      	ldr	r3, [r4, #20]
 8003920:	425b      	negs	r3, r3
 8003922:	61a3      	str	r3, [r4, #24]
 8003924:	6923      	ldr	r3, [r4, #16]
 8003926:	b943      	cbnz	r3, 800393a <__swsetup_r+0xc6>
 8003928:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800392c:	d1ba      	bne.n	80038a4 <__swsetup_r+0x30>
 800392e:	bd70      	pop	{r4, r5, r6, pc}
 8003930:	0781      	lsls	r1, r0, #30
 8003932:	bf58      	it	pl
 8003934:	6963      	ldrpl	r3, [r4, #20]
 8003936:	60a3      	str	r3, [r4, #8]
 8003938:	e7f4      	b.n	8003924 <__swsetup_r+0xb0>
 800393a:	2000      	movs	r0, #0
 800393c:	e7f7      	b.n	800392e <__swsetup_r+0xba>
 800393e:	bf00      	nop
 8003940:	2000000c 	.word	0x2000000c
 8003944:	08004a9c 	.word	0x08004a9c
 8003948:	08004abc 	.word	0x08004abc
 800394c:	08004a7c 	.word	0x08004a7c

08003950 <_close_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4d06      	ldr	r5, [pc, #24]	; (800396c <_close_r+0x1c>)
 8003954:	2300      	movs	r3, #0
 8003956:	4604      	mov	r4, r0
 8003958:	4608      	mov	r0, r1
 800395a:	602b      	str	r3, [r5, #0]
 800395c:	f7fd f8eb 	bl	8000b36 <_close>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d102      	bne.n	800396a <_close_r+0x1a>
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	b103      	cbz	r3, 800396a <_close_r+0x1a>
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	20000200 	.word	0x20000200

08003970 <__sflush_r>:
 8003970:	898a      	ldrh	r2, [r1, #12]
 8003972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003976:	4605      	mov	r5, r0
 8003978:	0710      	lsls	r0, r2, #28
 800397a:	460c      	mov	r4, r1
 800397c:	d458      	bmi.n	8003a30 <__sflush_r+0xc0>
 800397e:	684b      	ldr	r3, [r1, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	dc05      	bgt.n	8003990 <__sflush_r+0x20>
 8003984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	dc02      	bgt.n	8003990 <__sflush_r+0x20>
 800398a:	2000      	movs	r0, #0
 800398c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003992:	2e00      	cmp	r6, #0
 8003994:	d0f9      	beq.n	800398a <__sflush_r+0x1a>
 8003996:	2300      	movs	r3, #0
 8003998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800399c:	682f      	ldr	r7, [r5, #0]
 800399e:	602b      	str	r3, [r5, #0]
 80039a0:	d032      	beq.n	8003a08 <__sflush_r+0x98>
 80039a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039a4:	89a3      	ldrh	r3, [r4, #12]
 80039a6:	075a      	lsls	r2, r3, #29
 80039a8:	d505      	bpl.n	80039b6 <__sflush_r+0x46>
 80039aa:	6863      	ldr	r3, [r4, #4]
 80039ac:	1ac0      	subs	r0, r0, r3
 80039ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039b0:	b10b      	cbz	r3, 80039b6 <__sflush_r+0x46>
 80039b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039b4:	1ac0      	subs	r0, r0, r3
 80039b6:	2300      	movs	r3, #0
 80039b8:	4602      	mov	r2, r0
 80039ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039bc:	6a21      	ldr	r1, [r4, #32]
 80039be:	4628      	mov	r0, r5
 80039c0:	47b0      	blx	r6
 80039c2:	1c43      	adds	r3, r0, #1
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	d106      	bne.n	80039d6 <__sflush_r+0x66>
 80039c8:	6829      	ldr	r1, [r5, #0]
 80039ca:	291d      	cmp	r1, #29
 80039cc:	d82c      	bhi.n	8003a28 <__sflush_r+0xb8>
 80039ce:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <__sflush_r+0x108>)
 80039d0:	40ca      	lsrs	r2, r1
 80039d2:	07d6      	lsls	r6, r2, #31
 80039d4:	d528      	bpl.n	8003a28 <__sflush_r+0xb8>
 80039d6:	2200      	movs	r2, #0
 80039d8:	6062      	str	r2, [r4, #4]
 80039da:	04d9      	lsls	r1, r3, #19
 80039dc:	6922      	ldr	r2, [r4, #16]
 80039de:	6022      	str	r2, [r4, #0]
 80039e0:	d504      	bpl.n	80039ec <__sflush_r+0x7c>
 80039e2:	1c42      	adds	r2, r0, #1
 80039e4:	d101      	bne.n	80039ea <__sflush_r+0x7a>
 80039e6:	682b      	ldr	r3, [r5, #0]
 80039e8:	b903      	cbnz	r3, 80039ec <__sflush_r+0x7c>
 80039ea:	6560      	str	r0, [r4, #84]	; 0x54
 80039ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039ee:	602f      	str	r7, [r5, #0]
 80039f0:	2900      	cmp	r1, #0
 80039f2:	d0ca      	beq.n	800398a <__sflush_r+0x1a>
 80039f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039f8:	4299      	cmp	r1, r3
 80039fa:	d002      	beq.n	8003a02 <__sflush_r+0x92>
 80039fc:	4628      	mov	r0, r5
 80039fe:	f000 f9e9 	bl	8003dd4 <_free_r>
 8003a02:	2000      	movs	r0, #0
 8003a04:	6360      	str	r0, [r4, #52]	; 0x34
 8003a06:	e7c1      	b.n	800398c <__sflush_r+0x1c>
 8003a08:	6a21      	ldr	r1, [r4, #32]
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	47b0      	blx	r6
 8003a10:	1c41      	adds	r1, r0, #1
 8003a12:	d1c7      	bne.n	80039a4 <__sflush_r+0x34>
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0c4      	beq.n	80039a4 <__sflush_r+0x34>
 8003a1a:	2b1d      	cmp	r3, #29
 8003a1c:	d001      	beq.n	8003a22 <__sflush_r+0xb2>
 8003a1e:	2b16      	cmp	r3, #22
 8003a20:	d101      	bne.n	8003a26 <__sflush_r+0xb6>
 8003a22:	602f      	str	r7, [r5, #0]
 8003a24:	e7b1      	b.n	800398a <__sflush_r+0x1a>
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2c:	81a3      	strh	r3, [r4, #12]
 8003a2e:	e7ad      	b.n	800398c <__sflush_r+0x1c>
 8003a30:	690f      	ldr	r7, [r1, #16]
 8003a32:	2f00      	cmp	r7, #0
 8003a34:	d0a9      	beq.n	800398a <__sflush_r+0x1a>
 8003a36:	0793      	lsls	r3, r2, #30
 8003a38:	680e      	ldr	r6, [r1, #0]
 8003a3a:	bf08      	it	eq
 8003a3c:	694b      	ldreq	r3, [r1, #20]
 8003a3e:	600f      	str	r7, [r1, #0]
 8003a40:	bf18      	it	ne
 8003a42:	2300      	movne	r3, #0
 8003a44:	eba6 0807 	sub.w	r8, r6, r7
 8003a48:	608b      	str	r3, [r1, #8]
 8003a4a:	f1b8 0f00 	cmp.w	r8, #0
 8003a4e:	dd9c      	ble.n	800398a <__sflush_r+0x1a>
 8003a50:	6a21      	ldr	r1, [r4, #32]
 8003a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a54:	4643      	mov	r3, r8
 8003a56:	463a      	mov	r2, r7
 8003a58:	4628      	mov	r0, r5
 8003a5a:	47b0      	blx	r6
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	dc06      	bgt.n	8003a6e <__sflush_r+0xfe>
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a66:	81a3      	strh	r3, [r4, #12]
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	e78e      	b.n	800398c <__sflush_r+0x1c>
 8003a6e:	4407      	add	r7, r0
 8003a70:	eba8 0800 	sub.w	r8, r8, r0
 8003a74:	e7e9      	b.n	8003a4a <__sflush_r+0xda>
 8003a76:	bf00      	nop
 8003a78:	20400001 	.word	0x20400001

08003a7c <_fflush_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	690b      	ldr	r3, [r1, #16]
 8003a80:	4605      	mov	r5, r0
 8003a82:	460c      	mov	r4, r1
 8003a84:	b913      	cbnz	r3, 8003a8c <_fflush_r+0x10>
 8003a86:	2500      	movs	r5, #0
 8003a88:	4628      	mov	r0, r5
 8003a8a:	bd38      	pop	{r3, r4, r5, pc}
 8003a8c:	b118      	cbz	r0, 8003a96 <_fflush_r+0x1a>
 8003a8e:	6983      	ldr	r3, [r0, #24]
 8003a90:	b90b      	cbnz	r3, 8003a96 <_fflush_r+0x1a>
 8003a92:	f000 f887 	bl	8003ba4 <__sinit>
 8003a96:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <_fflush_r+0x6c>)
 8003a98:	429c      	cmp	r4, r3
 8003a9a:	d11b      	bne.n	8003ad4 <_fflush_r+0x58>
 8003a9c:	686c      	ldr	r4, [r5, #4]
 8003a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0ef      	beq.n	8003a86 <_fflush_r+0xa>
 8003aa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003aa8:	07d0      	lsls	r0, r2, #31
 8003aaa:	d404      	bmi.n	8003ab6 <_fflush_r+0x3a>
 8003aac:	0599      	lsls	r1, r3, #22
 8003aae:	d402      	bmi.n	8003ab6 <_fflush_r+0x3a>
 8003ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ab2:	f000 f915 	bl	8003ce0 <__retarget_lock_acquire_recursive>
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	4621      	mov	r1, r4
 8003aba:	f7ff ff59 	bl	8003970 <__sflush_r>
 8003abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ac0:	07da      	lsls	r2, r3, #31
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	d4e0      	bmi.n	8003a88 <_fflush_r+0xc>
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	059b      	lsls	r3, r3, #22
 8003aca:	d4dd      	bmi.n	8003a88 <_fflush_r+0xc>
 8003acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ace:	f000 f908 	bl	8003ce2 <__retarget_lock_release_recursive>
 8003ad2:	e7d9      	b.n	8003a88 <_fflush_r+0xc>
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <_fflush_r+0x70>)
 8003ad6:	429c      	cmp	r4, r3
 8003ad8:	d101      	bne.n	8003ade <_fflush_r+0x62>
 8003ada:	68ac      	ldr	r4, [r5, #8]
 8003adc:	e7df      	b.n	8003a9e <_fflush_r+0x22>
 8003ade:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <_fflush_r+0x74>)
 8003ae0:	429c      	cmp	r4, r3
 8003ae2:	bf08      	it	eq
 8003ae4:	68ec      	ldreq	r4, [r5, #12]
 8003ae6:	e7da      	b.n	8003a9e <_fflush_r+0x22>
 8003ae8:	08004a9c 	.word	0x08004a9c
 8003aec:	08004abc 	.word	0x08004abc
 8003af0:	08004a7c 	.word	0x08004a7c

08003af4 <std>:
 8003af4:	2300      	movs	r3, #0
 8003af6:	b510      	push	{r4, lr}
 8003af8:	4604      	mov	r4, r0
 8003afa:	e9c0 3300 	strd	r3, r3, [r0]
 8003afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b02:	6083      	str	r3, [r0, #8]
 8003b04:	8181      	strh	r1, [r0, #12]
 8003b06:	6643      	str	r3, [r0, #100]	; 0x64
 8003b08:	81c2      	strh	r2, [r0, #14]
 8003b0a:	6183      	str	r3, [r0, #24]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	2208      	movs	r2, #8
 8003b10:	305c      	adds	r0, #92	; 0x5c
 8003b12:	f7ff fd5b 	bl	80035cc <memset>
 8003b16:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <std+0x38>)
 8003b18:	6263      	str	r3, [r4, #36]	; 0x24
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <std+0x3c>)
 8003b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <std+0x40>)
 8003b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <std+0x44>)
 8003b24:	6224      	str	r4, [r4, #32]
 8003b26:	6323      	str	r3, [r4, #48]	; 0x30
 8003b28:	bd10      	pop	{r4, pc}
 8003b2a:	bf00      	nop
 8003b2c:	08003721 	.word	0x08003721
 8003b30:	08003747 	.word	0x08003747
 8003b34:	0800377f 	.word	0x0800377f
 8003b38:	080037a3 	.word	0x080037a3

08003b3c <_cleanup_r>:
 8003b3c:	4901      	ldr	r1, [pc, #4]	; (8003b44 <_cleanup_r+0x8>)
 8003b3e:	f000 b8af 	b.w	8003ca0 <_fwalk_reent>
 8003b42:	bf00      	nop
 8003b44:	08003a7d 	.word	0x08003a7d

08003b48 <__sfmoreglue>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	2268      	movs	r2, #104	; 0x68
 8003b4c:	1e4d      	subs	r5, r1, #1
 8003b4e:	4355      	muls	r5, r2
 8003b50:	460e      	mov	r6, r1
 8003b52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b56:	f000 f9a9 	bl	8003eac <_malloc_r>
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	b140      	cbz	r0, 8003b70 <__sfmoreglue+0x28>
 8003b5e:	2100      	movs	r1, #0
 8003b60:	e9c0 1600 	strd	r1, r6, [r0]
 8003b64:	300c      	adds	r0, #12
 8003b66:	60a0      	str	r0, [r4, #8]
 8003b68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b6c:	f7ff fd2e 	bl	80035cc <memset>
 8003b70:	4620      	mov	r0, r4
 8003b72:	bd70      	pop	{r4, r5, r6, pc}

08003b74 <__sfp_lock_acquire>:
 8003b74:	4801      	ldr	r0, [pc, #4]	; (8003b7c <__sfp_lock_acquire+0x8>)
 8003b76:	f000 b8b3 	b.w	8003ce0 <__retarget_lock_acquire_recursive>
 8003b7a:	bf00      	nop
 8003b7c:	200001f5 	.word	0x200001f5

08003b80 <__sfp_lock_release>:
 8003b80:	4801      	ldr	r0, [pc, #4]	; (8003b88 <__sfp_lock_release+0x8>)
 8003b82:	f000 b8ae 	b.w	8003ce2 <__retarget_lock_release_recursive>
 8003b86:	bf00      	nop
 8003b88:	200001f5 	.word	0x200001f5

08003b8c <__sinit_lock_acquire>:
 8003b8c:	4801      	ldr	r0, [pc, #4]	; (8003b94 <__sinit_lock_acquire+0x8>)
 8003b8e:	f000 b8a7 	b.w	8003ce0 <__retarget_lock_acquire_recursive>
 8003b92:	bf00      	nop
 8003b94:	200001f6 	.word	0x200001f6

08003b98 <__sinit_lock_release>:
 8003b98:	4801      	ldr	r0, [pc, #4]	; (8003ba0 <__sinit_lock_release+0x8>)
 8003b9a:	f000 b8a2 	b.w	8003ce2 <__retarget_lock_release_recursive>
 8003b9e:	bf00      	nop
 8003ba0:	200001f6 	.word	0x200001f6

08003ba4 <__sinit>:
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	f7ff fff0 	bl	8003b8c <__sinit_lock_acquire>
 8003bac:	69a3      	ldr	r3, [r4, #24]
 8003bae:	b11b      	cbz	r3, 8003bb8 <__sinit+0x14>
 8003bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb4:	f7ff bff0 	b.w	8003b98 <__sinit_lock_release>
 8003bb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003bbc:	6523      	str	r3, [r4, #80]	; 0x50
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <__sinit+0x68>)
 8003bc0:	4a13      	ldr	r2, [pc, #76]	; (8003c10 <__sinit+0x6c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003bc6:	42a3      	cmp	r3, r4
 8003bc8:	bf04      	itt	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	61a3      	streq	r3, [r4, #24]
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f000 f820 	bl	8003c14 <__sfp>
 8003bd4:	6060      	str	r0, [r4, #4]
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f000 f81c 	bl	8003c14 <__sfp>
 8003bdc:	60a0      	str	r0, [r4, #8]
 8003bde:	4620      	mov	r0, r4
 8003be0:	f000 f818 	bl	8003c14 <__sfp>
 8003be4:	2200      	movs	r2, #0
 8003be6:	60e0      	str	r0, [r4, #12]
 8003be8:	2104      	movs	r1, #4
 8003bea:	6860      	ldr	r0, [r4, #4]
 8003bec:	f7ff ff82 	bl	8003af4 <std>
 8003bf0:	68a0      	ldr	r0, [r4, #8]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	2109      	movs	r1, #9
 8003bf6:	f7ff ff7d 	bl	8003af4 <std>
 8003bfa:	68e0      	ldr	r0, [r4, #12]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	2112      	movs	r1, #18
 8003c00:	f7ff ff78 	bl	8003af4 <std>
 8003c04:	2301      	movs	r3, #1
 8003c06:	61a3      	str	r3, [r4, #24]
 8003c08:	e7d2      	b.n	8003bb0 <__sinit+0xc>
 8003c0a:	bf00      	nop
 8003c0c:	08004a78 	.word	0x08004a78
 8003c10:	08003b3d 	.word	0x08003b3d

08003c14 <__sfp>:
 8003c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c16:	4607      	mov	r7, r0
 8003c18:	f7ff ffac 	bl	8003b74 <__sfp_lock_acquire>
 8003c1c:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <__sfp+0x84>)
 8003c1e:	681e      	ldr	r6, [r3, #0]
 8003c20:	69b3      	ldr	r3, [r6, #24]
 8003c22:	b913      	cbnz	r3, 8003c2a <__sfp+0x16>
 8003c24:	4630      	mov	r0, r6
 8003c26:	f7ff ffbd 	bl	8003ba4 <__sinit>
 8003c2a:	3648      	adds	r6, #72	; 0x48
 8003c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	d503      	bpl.n	8003c3c <__sfp+0x28>
 8003c34:	6833      	ldr	r3, [r6, #0]
 8003c36:	b30b      	cbz	r3, 8003c7c <__sfp+0x68>
 8003c38:	6836      	ldr	r6, [r6, #0]
 8003c3a:	e7f7      	b.n	8003c2c <__sfp+0x18>
 8003c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c40:	b9d5      	cbnz	r5, 8003c78 <__sfp+0x64>
 8003c42:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <__sfp+0x88>)
 8003c44:	60e3      	str	r3, [r4, #12]
 8003c46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c4a:	6665      	str	r5, [r4, #100]	; 0x64
 8003c4c:	f000 f847 	bl	8003cde <__retarget_lock_init_recursive>
 8003c50:	f7ff ff96 	bl	8003b80 <__sfp_lock_release>
 8003c54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c5c:	6025      	str	r5, [r4, #0]
 8003c5e:	61a5      	str	r5, [r4, #24]
 8003c60:	2208      	movs	r2, #8
 8003c62:	4629      	mov	r1, r5
 8003c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c68:	f7ff fcb0 	bl	80035cc <memset>
 8003c6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c74:	4620      	mov	r0, r4
 8003c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c78:	3468      	adds	r4, #104	; 0x68
 8003c7a:	e7d9      	b.n	8003c30 <__sfp+0x1c>
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	4638      	mov	r0, r7
 8003c80:	f7ff ff62 	bl	8003b48 <__sfmoreglue>
 8003c84:	4604      	mov	r4, r0
 8003c86:	6030      	str	r0, [r6, #0]
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d1d5      	bne.n	8003c38 <__sfp+0x24>
 8003c8c:	f7ff ff78 	bl	8003b80 <__sfp_lock_release>
 8003c90:	230c      	movs	r3, #12
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	e7ee      	b.n	8003c74 <__sfp+0x60>
 8003c96:	bf00      	nop
 8003c98:	08004a78 	.word	0x08004a78
 8003c9c:	ffff0001 	.word	0xffff0001

08003ca0 <_fwalk_reent>:
 8003ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	4688      	mov	r8, r1
 8003ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cac:	2700      	movs	r7, #0
 8003cae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cb2:	f1b9 0901 	subs.w	r9, r9, #1
 8003cb6:	d505      	bpl.n	8003cc4 <_fwalk_reent+0x24>
 8003cb8:	6824      	ldr	r4, [r4, #0]
 8003cba:	2c00      	cmp	r4, #0
 8003cbc:	d1f7      	bne.n	8003cae <_fwalk_reent+0xe>
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cc4:	89ab      	ldrh	r3, [r5, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d907      	bls.n	8003cda <_fwalk_reent+0x3a>
 8003cca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	d003      	beq.n	8003cda <_fwalk_reent+0x3a>
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	47c0      	blx	r8
 8003cd8:	4307      	orrs	r7, r0
 8003cda:	3568      	adds	r5, #104	; 0x68
 8003cdc:	e7e9      	b.n	8003cb2 <_fwalk_reent+0x12>

08003cde <__retarget_lock_init_recursive>:
 8003cde:	4770      	bx	lr

08003ce0 <__retarget_lock_acquire_recursive>:
 8003ce0:	4770      	bx	lr

08003ce2 <__retarget_lock_release_recursive>:
 8003ce2:	4770      	bx	lr

08003ce4 <_lseek_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4d07      	ldr	r5, [pc, #28]	; (8003d04 <_lseek_r+0x20>)
 8003ce8:	4604      	mov	r4, r0
 8003cea:	4608      	mov	r0, r1
 8003cec:	4611      	mov	r1, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	602a      	str	r2, [r5, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7fc ff46 	bl	8000b84 <_lseek>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_lseek_r+0x1e>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_lseek_r+0x1e>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	20000200 	.word	0x20000200

08003d08 <__swhatbuf_r>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	460e      	mov	r6, r1
 8003d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d10:	2900      	cmp	r1, #0
 8003d12:	b096      	sub	sp, #88	; 0x58
 8003d14:	4614      	mov	r4, r2
 8003d16:	461d      	mov	r5, r3
 8003d18:	da08      	bge.n	8003d2c <__swhatbuf_r+0x24>
 8003d1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	602a      	str	r2, [r5, #0]
 8003d22:	061a      	lsls	r2, r3, #24
 8003d24:	d410      	bmi.n	8003d48 <__swhatbuf_r+0x40>
 8003d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d2a:	e00e      	b.n	8003d4a <__swhatbuf_r+0x42>
 8003d2c:	466a      	mov	r2, sp
 8003d2e:	f000 fde1 	bl	80048f4 <_fstat_r>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	dbf1      	blt.n	8003d1a <__swhatbuf_r+0x12>
 8003d36:	9a01      	ldr	r2, [sp, #4]
 8003d38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d40:	425a      	negs	r2, r3
 8003d42:	415a      	adcs	r2, r3
 8003d44:	602a      	str	r2, [r5, #0]
 8003d46:	e7ee      	b.n	8003d26 <__swhatbuf_r+0x1e>
 8003d48:	2340      	movs	r3, #64	; 0x40
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	b016      	add	sp, #88	; 0x58
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d54 <__smakebuf_r>:
 8003d54:	898b      	ldrh	r3, [r1, #12]
 8003d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d58:	079d      	lsls	r5, r3, #30
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	d507      	bpl.n	8003d70 <__smakebuf_r+0x1c>
 8003d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	6123      	str	r3, [r4, #16]
 8003d68:	2301      	movs	r3, #1
 8003d6a:	6163      	str	r3, [r4, #20]
 8003d6c:	b002      	add	sp, #8
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	ab01      	add	r3, sp, #4
 8003d72:	466a      	mov	r2, sp
 8003d74:	f7ff ffc8 	bl	8003d08 <__swhatbuf_r>
 8003d78:	9900      	ldr	r1, [sp, #0]
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f000 f895 	bl	8003eac <_malloc_r>
 8003d82:	b948      	cbnz	r0, 8003d98 <__smakebuf_r+0x44>
 8003d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d88:	059a      	lsls	r2, r3, #22
 8003d8a:	d4ef      	bmi.n	8003d6c <__smakebuf_r+0x18>
 8003d8c:	f023 0303 	bic.w	r3, r3, #3
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	81a3      	strh	r3, [r4, #12]
 8003d96:	e7e3      	b.n	8003d60 <__smakebuf_r+0xc>
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <__smakebuf_r+0x7c>)
 8003d9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	6020      	str	r0, [r4, #0]
 8003da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da4:	81a3      	strh	r3, [r4, #12]
 8003da6:	9b00      	ldr	r3, [sp, #0]
 8003da8:	6163      	str	r3, [r4, #20]
 8003daa:	9b01      	ldr	r3, [sp, #4]
 8003dac:	6120      	str	r0, [r4, #16]
 8003dae:	b15b      	cbz	r3, 8003dc8 <__smakebuf_r+0x74>
 8003db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003db4:	4630      	mov	r0, r6
 8003db6:	f000 fdaf 	bl	8004918 <_isatty_r>
 8003dba:	b128      	cbz	r0, 8003dc8 <__smakebuf_r+0x74>
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	89a0      	ldrh	r0, [r4, #12]
 8003dca:	4305      	orrs	r5, r0
 8003dcc:	81a5      	strh	r5, [r4, #12]
 8003dce:	e7cd      	b.n	8003d6c <__smakebuf_r+0x18>
 8003dd0:	08003b3d 	.word	0x08003b3d

08003dd4 <_free_r>:
 8003dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dd6:	2900      	cmp	r1, #0
 8003dd8:	d044      	beq.n	8003e64 <_free_r+0x90>
 8003dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dde:	9001      	str	r0, [sp, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f1a1 0404 	sub.w	r4, r1, #4
 8003de6:	bfb8      	it	lt
 8003de8:	18e4      	addlt	r4, r4, r3
 8003dea:	f000 fdb3 	bl	8004954 <__malloc_lock>
 8003dee:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <_free_r+0x94>)
 8003df0:	9801      	ldr	r0, [sp, #4]
 8003df2:	6813      	ldr	r3, [r2, #0]
 8003df4:	b933      	cbnz	r3, 8003e04 <_free_r+0x30>
 8003df6:	6063      	str	r3, [r4, #4]
 8003df8:	6014      	str	r4, [r2, #0]
 8003dfa:	b003      	add	sp, #12
 8003dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e00:	f000 bdae 	b.w	8004960 <__malloc_unlock>
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	d908      	bls.n	8003e1a <_free_r+0x46>
 8003e08:	6825      	ldr	r5, [r4, #0]
 8003e0a:	1961      	adds	r1, r4, r5
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	bf01      	itttt	eq
 8003e10:	6819      	ldreq	r1, [r3, #0]
 8003e12:	685b      	ldreq	r3, [r3, #4]
 8003e14:	1949      	addeq	r1, r1, r5
 8003e16:	6021      	streq	r1, [r4, #0]
 8003e18:	e7ed      	b.n	8003df6 <_free_r+0x22>
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	b10b      	cbz	r3, 8003e24 <_free_r+0x50>
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	d9fa      	bls.n	8003e1a <_free_r+0x46>
 8003e24:	6811      	ldr	r1, [r2, #0]
 8003e26:	1855      	adds	r5, r2, r1
 8003e28:	42a5      	cmp	r5, r4
 8003e2a:	d10b      	bne.n	8003e44 <_free_r+0x70>
 8003e2c:	6824      	ldr	r4, [r4, #0]
 8003e2e:	4421      	add	r1, r4
 8003e30:	1854      	adds	r4, r2, r1
 8003e32:	42a3      	cmp	r3, r4
 8003e34:	6011      	str	r1, [r2, #0]
 8003e36:	d1e0      	bne.n	8003dfa <_free_r+0x26>
 8003e38:	681c      	ldr	r4, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	6053      	str	r3, [r2, #4]
 8003e3e:	4421      	add	r1, r4
 8003e40:	6011      	str	r1, [r2, #0]
 8003e42:	e7da      	b.n	8003dfa <_free_r+0x26>
 8003e44:	d902      	bls.n	8003e4c <_free_r+0x78>
 8003e46:	230c      	movs	r3, #12
 8003e48:	6003      	str	r3, [r0, #0]
 8003e4a:	e7d6      	b.n	8003dfa <_free_r+0x26>
 8003e4c:	6825      	ldr	r5, [r4, #0]
 8003e4e:	1961      	adds	r1, r4, r5
 8003e50:	428b      	cmp	r3, r1
 8003e52:	bf04      	itt	eq
 8003e54:	6819      	ldreq	r1, [r3, #0]
 8003e56:	685b      	ldreq	r3, [r3, #4]
 8003e58:	6063      	str	r3, [r4, #4]
 8003e5a:	bf04      	itt	eq
 8003e5c:	1949      	addeq	r1, r1, r5
 8003e5e:	6021      	streq	r1, [r4, #0]
 8003e60:	6054      	str	r4, [r2, #4]
 8003e62:	e7ca      	b.n	8003dfa <_free_r+0x26>
 8003e64:	b003      	add	sp, #12
 8003e66:	bd30      	pop	{r4, r5, pc}
 8003e68:	200001f8 	.word	0x200001f8

08003e6c <sbrk_aligned>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	4e0e      	ldr	r6, [pc, #56]	; (8003ea8 <sbrk_aligned+0x3c>)
 8003e70:	460c      	mov	r4, r1
 8003e72:	6831      	ldr	r1, [r6, #0]
 8003e74:	4605      	mov	r5, r0
 8003e76:	b911      	cbnz	r1, 8003e7e <sbrk_aligned+0x12>
 8003e78:	f000 fbc2 	bl	8004600 <_sbrk_r>
 8003e7c:	6030      	str	r0, [r6, #0]
 8003e7e:	4621      	mov	r1, r4
 8003e80:	4628      	mov	r0, r5
 8003e82:	f000 fbbd 	bl	8004600 <_sbrk_r>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	d00a      	beq.n	8003ea0 <sbrk_aligned+0x34>
 8003e8a:	1cc4      	adds	r4, r0, #3
 8003e8c:	f024 0403 	bic.w	r4, r4, #3
 8003e90:	42a0      	cmp	r0, r4
 8003e92:	d007      	beq.n	8003ea4 <sbrk_aligned+0x38>
 8003e94:	1a21      	subs	r1, r4, r0
 8003e96:	4628      	mov	r0, r5
 8003e98:	f000 fbb2 	bl	8004600 <_sbrk_r>
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d101      	bne.n	8003ea4 <sbrk_aligned+0x38>
 8003ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	200001fc 	.word	0x200001fc

08003eac <_malloc_r>:
 8003eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb0:	1ccd      	adds	r5, r1, #3
 8003eb2:	f025 0503 	bic.w	r5, r5, #3
 8003eb6:	3508      	adds	r5, #8
 8003eb8:	2d0c      	cmp	r5, #12
 8003eba:	bf38      	it	cc
 8003ebc:	250c      	movcc	r5, #12
 8003ebe:	2d00      	cmp	r5, #0
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	db01      	blt.n	8003ec8 <_malloc_r+0x1c>
 8003ec4:	42a9      	cmp	r1, r5
 8003ec6:	d905      	bls.n	8003ed4 <_malloc_r+0x28>
 8003ec8:	230c      	movs	r3, #12
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	2600      	movs	r6, #0
 8003ece:	4630      	mov	r0, r6
 8003ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed4:	4e2e      	ldr	r6, [pc, #184]	; (8003f90 <_malloc_r+0xe4>)
 8003ed6:	f000 fd3d 	bl	8004954 <__malloc_lock>
 8003eda:	6833      	ldr	r3, [r6, #0]
 8003edc:	461c      	mov	r4, r3
 8003ede:	bb34      	cbnz	r4, 8003f2e <_malloc_r+0x82>
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	f7ff ffc2 	bl	8003e6c <sbrk_aligned>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	4604      	mov	r4, r0
 8003eec:	d14d      	bne.n	8003f8a <_malloc_r+0xde>
 8003eee:	6834      	ldr	r4, [r6, #0]
 8003ef0:	4626      	mov	r6, r4
 8003ef2:	2e00      	cmp	r6, #0
 8003ef4:	d140      	bne.n	8003f78 <_malloc_r+0xcc>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	4631      	mov	r1, r6
 8003efa:	4638      	mov	r0, r7
 8003efc:	eb04 0803 	add.w	r8, r4, r3
 8003f00:	f000 fb7e 	bl	8004600 <_sbrk_r>
 8003f04:	4580      	cmp	r8, r0
 8003f06:	d13a      	bne.n	8003f7e <_malloc_r+0xd2>
 8003f08:	6821      	ldr	r1, [r4, #0]
 8003f0a:	3503      	adds	r5, #3
 8003f0c:	1a6d      	subs	r5, r5, r1
 8003f0e:	f025 0503 	bic.w	r5, r5, #3
 8003f12:	3508      	adds	r5, #8
 8003f14:	2d0c      	cmp	r5, #12
 8003f16:	bf38      	it	cc
 8003f18:	250c      	movcc	r5, #12
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	f7ff ffa5 	bl	8003e6c <sbrk_aligned>
 8003f22:	3001      	adds	r0, #1
 8003f24:	d02b      	beq.n	8003f7e <_malloc_r+0xd2>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	442b      	add	r3, r5
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	e00e      	b.n	8003f4c <_malloc_r+0xa0>
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	1b52      	subs	r2, r2, r5
 8003f32:	d41e      	bmi.n	8003f72 <_malloc_r+0xc6>
 8003f34:	2a0b      	cmp	r2, #11
 8003f36:	d916      	bls.n	8003f66 <_malloc_r+0xba>
 8003f38:	1961      	adds	r1, r4, r5
 8003f3a:	42a3      	cmp	r3, r4
 8003f3c:	6025      	str	r5, [r4, #0]
 8003f3e:	bf18      	it	ne
 8003f40:	6059      	strne	r1, [r3, #4]
 8003f42:	6863      	ldr	r3, [r4, #4]
 8003f44:	bf08      	it	eq
 8003f46:	6031      	streq	r1, [r6, #0]
 8003f48:	5162      	str	r2, [r4, r5]
 8003f4a:	604b      	str	r3, [r1, #4]
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	f104 060b 	add.w	r6, r4, #11
 8003f52:	f000 fd05 	bl	8004960 <__malloc_unlock>
 8003f56:	f026 0607 	bic.w	r6, r6, #7
 8003f5a:	1d23      	adds	r3, r4, #4
 8003f5c:	1af2      	subs	r2, r6, r3
 8003f5e:	d0b6      	beq.n	8003ece <_malloc_r+0x22>
 8003f60:	1b9b      	subs	r3, r3, r6
 8003f62:	50a3      	str	r3, [r4, r2]
 8003f64:	e7b3      	b.n	8003ece <_malloc_r+0x22>
 8003f66:	6862      	ldr	r2, [r4, #4]
 8003f68:	42a3      	cmp	r3, r4
 8003f6a:	bf0c      	ite	eq
 8003f6c:	6032      	streq	r2, [r6, #0]
 8003f6e:	605a      	strne	r2, [r3, #4]
 8003f70:	e7ec      	b.n	8003f4c <_malloc_r+0xa0>
 8003f72:	4623      	mov	r3, r4
 8003f74:	6864      	ldr	r4, [r4, #4]
 8003f76:	e7b2      	b.n	8003ede <_malloc_r+0x32>
 8003f78:	4634      	mov	r4, r6
 8003f7a:	6876      	ldr	r6, [r6, #4]
 8003f7c:	e7b9      	b.n	8003ef2 <_malloc_r+0x46>
 8003f7e:	230c      	movs	r3, #12
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4638      	mov	r0, r7
 8003f84:	f000 fcec 	bl	8004960 <__malloc_unlock>
 8003f88:	e7a1      	b.n	8003ece <_malloc_r+0x22>
 8003f8a:	6025      	str	r5, [r4, #0]
 8003f8c:	e7de      	b.n	8003f4c <_malloc_r+0xa0>
 8003f8e:	bf00      	nop
 8003f90:	200001f8 	.word	0x200001f8

08003f94 <_sungetc_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	1c4b      	adds	r3, r1, #1
 8003f98:	4614      	mov	r4, r2
 8003f9a:	d103      	bne.n	8003fa4 <_sungetc_r+0x10>
 8003f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	8993      	ldrh	r3, [r2, #12]
 8003fa6:	f023 0320 	bic.w	r3, r3, #32
 8003faa:	8193      	strh	r3, [r2, #12]
 8003fac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fae:	6852      	ldr	r2, [r2, #4]
 8003fb0:	b2cd      	uxtb	r5, r1
 8003fb2:	b18b      	cbz	r3, 8003fd8 <_sungetc_r+0x44>
 8003fb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	dd08      	ble.n	8003fcc <_sungetc_r+0x38>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	1e5a      	subs	r2, r3, #1
 8003fbe:	6022      	str	r2, [r4, #0]
 8003fc0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003fc4:	6863      	ldr	r3, [r4, #4]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	6063      	str	r3, [r4, #4]
 8003fca:	e7e9      	b.n	8003fa0 <_sungetc_r+0xc>
 8003fcc:	4621      	mov	r1, r4
 8003fce:	f000 fc57 	bl	8004880 <__submore>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d0f1      	beq.n	8003fba <_sungetc_r+0x26>
 8003fd6:	e7e1      	b.n	8003f9c <_sungetc_r+0x8>
 8003fd8:	6921      	ldr	r1, [r4, #16]
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	b151      	cbz	r1, 8003ff4 <_sungetc_r+0x60>
 8003fde:	4299      	cmp	r1, r3
 8003fe0:	d208      	bcs.n	8003ff4 <_sungetc_r+0x60>
 8003fe2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003fe6:	42a9      	cmp	r1, r5
 8003fe8:	d104      	bne.n	8003ff4 <_sungetc_r+0x60>
 8003fea:	3b01      	subs	r3, #1
 8003fec:	3201      	adds	r2, #1
 8003fee:	6023      	str	r3, [r4, #0]
 8003ff0:	6062      	str	r2, [r4, #4]
 8003ff2:	e7d5      	b.n	8003fa0 <_sungetc_r+0xc>
 8003ff4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8003ffe:	2303      	movs	r3, #3
 8004000:	63a3      	str	r3, [r4, #56]	; 0x38
 8004002:	4623      	mov	r3, r4
 8004004:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	2301      	movs	r3, #1
 800400c:	e7dc      	b.n	8003fc8 <_sungetc_r+0x34>

0800400e <__ssrefill_r>:
 800400e:	b510      	push	{r4, lr}
 8004010:	460c      	mov	r4, r1
 8004012:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004014:	b169      	cbz	r1, 8004032 <__ssrefill_r+0x24>
 8004016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800401a:	4299      	cmp	r1, r3
 800401c:	d001      	beq.n	8004022 <__ssrefill_r+0x14>
 800401e:	f7ff fed9 	bl	8003dd4 <_free_r>
 8004022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004024:	6063      	str	r3, [r4, #4]
 8004026:	2000      	movs	r0, #0
 8004028:	6360      	str	r0, [r4, #52]	; 0x34
 800402a:	b113      	cbz	r3, 8004032 <__ssrefill_r+0x24>
 800402c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800402e:	6023      	str	r3, [r4, #0]
 8004030:	bd10      	pop	{r4, pc}
 8004032:	6923      	ldr	r3, [r4, #16]
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	2300      	movs	r3, #0
 8004038:	6063      	str	r3, [r4, #4]
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f043 0320 	orr.w	r3, r3, #32
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	f04f 30ff 	mov.w	r0, #4294967295
 8004046:	e7f3      	b.n	8004030 <__ssrefill_r+0x22>

08004048 <__ssvfiscanf_r>:
 8004048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800404c:	460c      	mov	r4, r1
 800404e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004052:	2100      	movs	r1, #0
 8004054:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004058:	49a6      	ldr	r1, [pc, #664]	; (80042f4 <__ssvfiscanf_r+0x2ac>)
 800405a:	91a0      	str	r1, [sp, #640]	; 0x280
 800405c:	f10d 0804 	add.w	r8, sp, #4
 8004060:	49a5      	ldr	r1, [pc, #660]	; (80042f8 <__ssvfiscanf_r+0x2b0>)
 8004062:	4fa6      	ldr	r7, [pc, #664]	; (80042fc <__ssvfiscanf_r+0x2b4>)
 8004064:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004300 <__ssvfiscanf_r+0x2b8>
 8004068:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800406c:	4606      	mov	r6, r0
 800406e:	91a1      	str	r1, [sp, #644]	; 0x284
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	7813      	ldrb	r3, [r2, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 815a 	beq.w	800432e <__ssvfiscanf_r+0x2e6>
 800407a:	5dd9      	ldrb	r1, [r3, r7]
 800407c:	f011 0108 	ands.w	r1, r1, #8
 8004080:	f102 0501 	add.w	r5, r2, #1
 8004084:	d019      	beq.n	80040ba <__ssvfiscanf_r+0x72>
 8004086:	6863      	ldr	r3, [r4, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	dd0f      	ble.n	80040ac <__ssvfiscanf_r+0x64>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	5cba      	ldrb	r2, [r7, r2]
 8004092:	0712      	lsls	r2, r2, #28
 8004094:	d401      	bmi.n	800409a <__ssvfiscanf_r+0x52>
 8004096:	462a      	mov	r2, r5
 8004098:	e7eb      	b.n	8004072 <__ssvfiscanf_r+0x2a>
 800409a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800409c:	3201      	adds	r2, #1
 800409e:	9245      	str	r2, [sp, #276]	; 0x114
 80040a0:	6862      	ldr	r2, [r4, #4]
 80040a2:	3301      	adds	r3, #1
 80040a4:	3a01      	subs	r2, #1
 80040a6:	6062      	str	r2, [r4, #4]
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	e7ec      	b.n	8004086 <__ssvfiscanf_r+0x3e>
 80040ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80040ae:	4621      	mov	r1, r4
 80040b0:	4630      	mov	r0, r6
 80040b2:	4798      	blx	r3
 80040b4:	2800      	cmp	r0, #0
 80040b6:	d0e9      	beq.n	800408c <__ssvfiscanf_r+0x44>
 80040b8:	e7ed      	b.n	8004096 <__ssvfiscanf_r+0x4e>
 80040ba:	2b25      	cmp	r3, #37	; 0x25
 80040bc:	d012      	beq.n	80040e4 <__ssvfiscanf_r+0x9c>
 80040be:	469a      	mov	sl, r3
 80040c0:	6863      	ldr	r3, [r4, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f340 8091 	ble.w	80041ea <__ssvfiscanf_r+0x1a2>
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	7813      	ldrb	r3, [r2, #0]
 80040cc:	4553      	cmp	r3, sl
 80040ce:	f040 812e 	bne.w	800432e <__ssvfiscanf_r+0x2e6>
 80040d2:	6863      	ldr	r3, [r4, #4]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	6063      	str	r3, [r4, #4]
 80040d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80040da:	3201      	adds	r2, #1
 80040dc:	3301      	adds	r3, #1
 80040de:	6022      	str	r2, [r4, #0]
 80040e0:	9345      	str	r3, [sp, #276]	; 0x114
 80040e2:	e7d8      	b.n	8004096 <__ssvfiscanf_r+0x4e>
 80040e4:	9141      	str	r1, [sp, #260]	; 0x104
 80040e6:	9143      	str	r1, [sp, #268]	; 0x10c
 80040e8:	7853      	ldrb	r3, [r2, #1]
 80040ea:	2b2a      	cmp	r3, #42	; 0x2a
 80040ec:	bf02      	ittt	eq
 80040ee:	2310      	moveq	r3, #16
 80040f0:	1c95      	addeq	r5, r2, #2
 80040f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80040f4:	220a      	movs	r2, #10
 80040f6:	46aa      	mov	sl, r5
 80040f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80040fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004100:	2b09      	cmp	r3, #9
 8004102:	d91d      	bls.n	8004140 <__ssvfiscanf_r+0xf8>
 8004104:	487e      	ldr	r0, [pc, #504]	; (8004300 <__ssvfiscanf_r+0x2b8>)
 8004106:	2203      	movs	r2, #3
 8004108:	f7fc f87a 	bl	8000200 <memchr>
 800410c:	b140      	cbz	r0, 8004120 <__ssvfiscanf_r+0xd8>
 800410e:	2301      	movs	r3, #1
 8004110:	eba0 0009 	sub.w	r0, r0, r9
 8004114:	fa03 f000 	lsl.w	r0, r3, r0
 8004118:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800411a:	4318      	orrs	r0, r3
 800411c:	9041      	str	r0, [sp, #260]	; 0x104
 800411e:	4655      	mov	r5, sl
 8004120:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004124:	2b78      	cmp	r3, #120	; 0x78
 8004126:	d806      	bhi.n	8004136 <__ssvfiscanf_r+0xee>
 8004128:	2b57      	cmp	r3, #87	; 0x57
 800412a:	d810      	bhi.n	800414e <__ssvfiscanf_r+0x106>
 800412c:	2b25      	cmp	r3, #37	; 0x25
 800412e:	d0c6      	beq.n	80040be <__ssvfiscanf_r+0x76>
 8004130:	d856      	bhi.n	80041e0 <__ssvfiscanf_r+0x198>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d064      	beq.n	8004200 <__ssvfiscanf_r+0x1b8>
 8004136:	2303      	movs	r3, #3
 8004138:	9347      	str	r3, [sp, #284]	; 0x11c
 800413a:	230a      	movs	r3, #10
 800413c:	9342      	str	r3, [sp, #264]	; 0x108
 800413e:	e071      	b.n	8004224 <__ssvfiscanf_r+0x1dc>
 8004140:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004142:	fb02 1103 	mla	r1, r2, r3, r1
 8004146:	3930      	subs	r1, #48	; 0x30
 8004148:	9143      	str	r1, [sp, #268]	; 0x10c
 800414a:	4655      	mov	r5, sl
 800414c:	e7d3      	b.n	80040f6 <__ssvfiscanf_r+0xae>
 800414e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004152:	2a20      	cmp	r2, #32
 8004154:	d8ef      	bhi.n	8004136 <__ssvfiscanf_r+0xee>
 8004156:	a101      	add	r1, pc, #4	; (adr r1, 800415c <__ssvfiscanf_r+0x114>)
 8004158:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800415c:	0800420f 	.word	0x0800420f
 8004160:	08004137 	.word	0x08004137
 8004164:	08004137 	.word	0x08004137
 8004168:	0800426d 	.word	0x0800426d
 800416c:	08004137 	.word	0x08004137
 8004170:	08004137 	.word	0x08004137
 8004174:	08004137 	.word	0x08004137
 8004178:	08004137 	.word	0x08004137
 800417c:	08004137 	.word	0x08004137
 8004180:	08004137 	.word	0x08004137
 8004184:	08004137 	.word	0x08004137
 8004188:	08004283 	.word	0x08004283
 800418c:	08004259 	.word	0x08004259
 8004190:	080041e7 	.word	0x080041e7
 8004194:	080041e7 	.word	0x080041e7
 8004198:	080041e7 	.word	0x080041e7
 800419c:	08004137 	.word	0x08004137
 80041a0:	0800425d 	.word	0x0800425d
 80041a4:	08004137 	.word	0x08004137
 80041a8:	08004137 	.word	0x08004137
 80041ac:	08004137 	.word	0x08004137
 80041b0:	08004137 	.word	0x08004137
 80041b4:	08004293 	.word	0x08004293
 80041b8:	08004265 	.word	0x08004265
 80041bc:	08004207 	.word	0x08004207
 80041c0:	08004137 	.word	0x08004137
 80041c4:	08004137 	.word	0x08004137
 80041c8:	0800428f 	.word	0x0800428f
 80041cc:	08004137 	.word	0x08004137
 80041d0:	08004259 	.word	0x08004259
 80041d4:	08004137 	.word	0x08004137
 80041d8:	08004137 	.word	0x08004137
 80041dc:	0800420f 	.word	0x0800420f
 80041e0:	3b45      	subs	r3, #69	; 0x45
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d8a7      	bhi.n	8004136 <__ssvfiscanf_r+0xee>
 80041e6:	2305      	movs	r3, #5
 80041e8:	e01b      	b.n	8004222 <__ssvfiscanf_r+0x1da>
 80041ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80041ec:	4621      	mov	r1, r4
 80041ee:	4630      	mov	r0, r6
 80041f0:	4798      	blx	r3
 80041f2:	2800      	cmp	r0, #0
 80041f4:	f43f af68 	beq.w	80040c8 <__ssvfiscanf_r+0x80>
 80041f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80041fa:	2800      	cmp	r0, #0
 80041fc:	f040 808d 	bne.w	800431a <__ssvfiscanf_r+0x2d2>
 8004200:	f04f 30ff 	mov.w	r0, #4294967295
 8004204:	e08f      	b.n	8004326 <__ssvfiscanf_r+0x2de>
 8004206:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004208:	f042 0220 	orr.w	r2, r2, #32
 800420c:	9241      	str	r2, [sp, #260]	; 0x104
 800420e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004214:	9241      	str	r2, [sp, #260]	; 0x104
 8004216:	2210      	movs	r2, #16
 8004218:	2b6f      	cmp	r3, #111	; 0x6f
 800421a:	9242      	str	r2, [sp, #264]	; 0x108
 800421c:	bf34      	ite	cc
 800421e:	2303      	movcc	r3, #3
 8004220:	2304      	movcs	r3, #4
 8004222:	9347      	str	r3, [sp, #284]	; 0x11c
 8004224:	6863      	ldr	r3, [r4, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	dd42      	ble.n	80042b0 <__ssvfiscanf_r+0x268>
 800422a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800422c:	0659      	lsls	r1, r3, #25
 800422e:	d404      	bmi.n	800423a <__ssvfiscanf_r+0x1f2>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	781a      	ldrb	r2, [r3, #0]
 8004234:	5cba      	ldrb	r2, [r7, r2]
 8004236:	0712      	lsls	r2, r2, #28
 8004238:	d441      	bmi.n	80042be <__ssvfiscanf_r+0x276>
 800423a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800423c:	2b02      	cmp	r3, #2
 800423e:	dc50      	bgt.n	80042e2 <__ssvfiscanf_r+0x29a>
 8004240:	466b      	mov	r3, sp
 8004242:	4622      	mov	r2, r4
 8004244:	a941      	add	r1, sp, #260	; 0x104
 8004246:	4630      	mov	r0, r6
 8004248:	f000 f876 	bl	8004338 <_scanf_chars>
 800424c:	2801      	cmp	r0, #1
 800424e:	d06e      	beq.n	800432e <__ssvfiscanf_r+0x2e6>
 8004250:	2802      	cmp	r0, #2
 8004252:	f47f af20 	bne.w	8004096 <__ssvfiscanf_r+0x4e>
 8004256:	e7cf      	b.n	80041f8 <__ssvfiscanf_r+0x1b0>
 8004258:	220a      	movs	r2, #10
 800425a:	e7dd      	b.n	8004218 <__ssvfiscanf_r+0x1d0>
 800425c:	2300      	movs	r3, #0
 800425e:	9342      	str	r3, [sp, #264]	; 0x108
 8004260:	2303      	movs	r3, #3
 8004262:	e7de      	b.n	8004222 <__ssvfiscanf_r+0x1da>
 8004264:	2308      	movs	r3, #8
 8004266:	9342      	str	r3, [sp, #264]	; 0x108
 8004268:	2304      	movs	r3, #4
 800426a:	e7da      	b.n	8004222 <__ssvfiscanf_r+0x1da>
 800426c:	4629      	mov	r1, r5
 800426e:	4640      	mov	r0, r8
 8004270:	f000 f9d6 	bl	8004620 <__sccl>
 8004274:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800427a:	9341      	str	r3, [sp, #260]	; 0x104
 800427c:	4605      	mov	r5, r0
 800427e:	2301      	movs	r3, #1
 8004280:	e7cf      	b.n	8004222 <__ssvfiscanf_r+0x1da>
 8004282:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004288:	9341      	str	r3, [sp, #260]	; 0x104
 800428a:	2300      	movs	r3, #0
 800428c:	e7c9      	b.n	8004222 <__ssvfiscanf_r+0x1da>
 800428e:	2302      	movs	r3, #2
 8004290:	e7c7      	b.n	8004222 <__ssvfiscanf_r+0x1da>
 8004292:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004294:	06c3      	lsls	r3, r0, #27
 8004296:	f53f aefe 	bmi.w	8004096 <__ssvfiscanf_r+0x4e>
 800429a:	9b00      	ldr	r3, [sp, #0]
 800429c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800429e:	1d19      	adds	r1, r3, #4
 80042a0:	9100      	str	r1, [sp, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f010 0f01 	tst.w	r0, #1
 80042a8:	bf14      	ite	ne
 80042aa:	801a      	strhne	r2, [r3, #0]
 80042ac:	601a      	streq	r2, [r3, #0]
 80042ae:	e6f2      	b.n	8004096 <__ssvfiscanf_r+0x4e>
 80042b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80042b2:	4621      	mov	r1, r4
 80042b4:	4630      	mov	r0, r6
 80042b6:	4798      	blx	r3
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d0b6      	beq.n	800422a <__ssvfiscanf_r+0x1e2>
 80042bc:	e79c      	b.n	80041f8 <__ssvfiscanf_r+0x1b0>
 80042be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80042c0:	3201      	adds	r2, #1
 80042c2:	9245      	str	r2, [sp, #276]	; 0x114
 80042c4:	6862      	ldr	r2, [r4, #4]
 80042c6:	3a01      	subs	r2, #1
 80042c8:	2a00      	cmp	r2, #0
 80042ca:	6062      	str	r2, [r4, #4]
 80042cc:	dd02      	ble.n	80042d4 <__ssvfiscanf_r+0x28c>
 80042ce:	3301      	adds	r3, #1
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	e7ad      	b.n	8004230 <__ssvfiscanf_r+0x1e8>
 80042d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80042d6:	4621      	mov	r1, r4
 80042d8:	4630      	mov	r0, r6
 80042da:	4798      	blx	r3
 80042dc:	2800      	cmp	r0, #0
 80042de:	d0a7      	beq.n	8004230 <__ssvfiscanf_r+0x1e8>
 80042e0:	e78a      	b.n	80041f8 <__ssvfiscanf_r+0x1b0>
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	dc0e      	bgt.n	8004304 <__ssvfiscanf_r+0x2bc>
 80042e6:	466b      	mov	r3, sp
 80042e8:	4622      	mov	r2, r4
 80042ea:	a941      	add	r1, sp, #260	; 0x104
 80042ec:	4630      	mov	r0, r6
 80042ee:	f000 f87d 	bl	80043ec <_scanf_i>
 80042f2:	e7ab      	b.n	800424c <__ssvfiscanf_r+0x204>
 80042f4:	08003f95 	.word	0x08003f95
 80042f8:	0800400f 	.word	0x0800400f
 80042fc:	08004afc 	.word	0x08004afc
 8004300:	08004adc 	.word	0x08004adc
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <__ssvfiscanf_r+0x2ec>)
 8004306:	2b00      	cmp	r3, #0
 8004308:	f43f aec5 	beq.w	8004096 <__ssvfiscanf_r+0x4e>
 800430c:	466b      	mov	r3, sp
 800430e:	4622      	mov	r2, r4
 8004310:	a941      	add	r1, sp, #260	; 0x104
 8004312:	4630      	mov	r0, r6
 8004314:	f3af 8000 	nop.w
 8004318:	e798      	b.n	800424c <__ssvfiscanf_r+0x204>
 800431a:	89a3      	ldrh	r3, [r4, #12]
 800431c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004320:	bf18      	it	ne
 8004322:	f04f 30ff 	movne.w	r0, #4294967295
 8004326:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800432a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004330:	e7f9      	b.n	8004326 <__ssvfiscanf_r+0x2de>
 8004332:	bf00      	nop
 8004334:	00000000 	.word	0x00000000

08004338 <_scanf_chars>:
 8004338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800433c:	4615      	mov	r5, r2
 800433e:	688a      	ldr	r2, [r1, #8]
 8004340:	4680      	mov	r8, r0
 8004342:	460c      	mov	r4, r1
 8004344:	b932      	cbnz	r2, 8004354 <_scanf_chars+0x1c>
 8004346:	698a      	ldr	r2, [r1, #24]
 8004348:	2a00      	cmp	r2, #0
 800434a:	bf0c      	ite	eq
 800434c:	2201      	moveq	r2, #1
 800434e:	f04f 32ff 	movne.w	r2, #4294967295
 8004352:	608a      	str	r2, [r1, #8]
 8004354:	6822      	ldr	r2, [r4, #0]
 8004356:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80043e8 <_scanf_chars+0xb0>
 800435a:	06d1      	lsls	r1, r2, #27
 800435c:	bf5f      	itttt	pl
 800435e:	681a      	ldrpl	r2, [r3, #0]
 8004360:	1d11      	addpl	r1, r2, #4
 8004362:	6019      	strpl	r1, [r3, #0]
 8004364:	6816      	ldrpl	r6, [r2, #0]
 8004366:	2700      	movs	r7, #0
 8004368:	69a0      	ldr	r0, [r4, #24]
 800436a:	b188      	cbz	r0, 8004390 <_scanf_chars+0x58>
 800436c:	2801      	cmp	r0, #1
 800436e:	d107      	bne.n	8004380 <_scanf_chars+0x48>
 8004370:	682a      	ldr	r2, [r5, #0]
 8004372:	7811      	ldrb	r1, [r2, #0]
 8004374:	6962      	ldr	r2, [r4, #20]
 8004376:	5c52      	ldrb	r2, [r2, r1]
 8004378:	b952      	cbnz	r2, 8004390 <_scanf_chars+0x58>
 800437a:	2f00      	cmp	r7, #0
 800437c:	d031      	beq.n	80043e2 <_scanf_chars+0xaa>
 800437e:	e022      	b.n	80043c6 <_scanf_chars+0x8e>
 8004380:	2802      	cmp	r0, #2
 8004382:	d120      	bne.n	80043c6 <_scanf_chars+0x8e>
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f813 3009 	ldrb.w	r3, [r3, r9]
 800438c:	071b      	lsls	r3, r3, #28
 800438e:	d41a      	bmi.n	80043c6 <_scanf_chars+0x8e>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	06da      	lsls	r2, r3, #27
 8004394:	bf5e      	ittt	pl
 8004396:	682b      	ldrpl	r3, [r5, #0]
 8004398:	781b      	ldrbpl	r3, [r3, #0]
 800439a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800439e:	682a      	ldr	r2, [r5, #0]
 80043a0:	686b      	ldr	r3, [r5, #4]
 80043a2:	3201      	adds	r2, #1
 80043a4:	602a      	str	r2, [r5, #0]
 80043a6:	68a2      	ldr	r2, [r4, #8]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	3a01      	subs	r2, #1
 80043ac:	606b      	str	r3, [r5, #4]
 80043ae:	3701      	adds	r7, #1
 80043b0:	60a2      	str	r2, [r4, #8]
 80043b2:	b142      	cbz	r2, 80043c6 <_scanf_chars+0x8e>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	dcd7      	bgt.n	8004368 <_scanf_chars+0x30>
 80043b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80043bc:	4629      	mov	r1, r5
 80043be:	4640      	mov	r0, r8
 80043c0:	4798      	blx	r3
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d0d0      	beq.n	8004368 <_scanf_chars+0x30>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	f013 0310 	ands.w	r3, r3, #16
 80043cc:	d105      	bne.n	80043da <_scanf_chars+0xa2>
 80043ce:	68e2      	ldr	r2, [r4, #12]
 80043d0:	3201      	adds	r2, #1
 80043d2:	60e2      	str	r2, [r4, #12]
 80043d4:	69a2      	ldr	r2, [r4, #24]
 80043d6:	b102      	cbz	r2, 80043da <_scanf_chars+0xa2>
 80043d8:	7033      	strb	r3, [r6, #0]
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	443b      	add	r3, r7
 80043de:	6123      	str	r3, [r4, #16]
 80043e0:	2000      	movs	r0, #0
 80043e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043e6:	bf00      	nop
 80043e8:	08004afc 	.word	0x08004afc

080043ec <_scanf_i>:
 80043ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f0:	4698      	mov	r8, r3
 80043f2:	4b76      	ldr	r3, [pc, #472]	; (80045cc <_scanf_i+0x1e0>)
 80043f4:	460c      	mov	r4, r1
 80043f6:	4682      	mov	sl, r0
 80043f8:	4616      	mov	r6, r2
 80043fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043fe:	b087      	sub	sp, #28
 8004400:	ab03      	add	r3, sp, #12
 8004402:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004406:	4b72      	ldr	r3, [pc, #456]	; (80045d0 <_scanf_i+0x1e4>)
 8004408:	69a1      	ldr	r1, [r4, #24]
 800440a:	4a72      	ldr	r2, [pc, #456]	; (80045d4 <_scanf_i+0x1e8>)
 800440c:	2903      	cmp	r1, #3
 800440e:	bf18      	it	ne
 8004410:	461a      	movne	r2, r3
 8004412:	68a3      	ldr	r3, [r4, #8]
 8004414:	9201      	str	r2, [sp, #4]
 8004416:	1e5a      	subs	r2, r3, #1
 8004418:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800441c:	bf88      	it	hi
 800441e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004422:	4627      	mov	r7, r4
 8004424:	bf82      	ittt	hi
 8004426:	eb03 0905 	addhi.w	r9, r3, r5
 800442a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800442e:	60a3      	strhi	r3, [r4, #8]
 8004430:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004434:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004438:	bf98      	it	ls
 800443a:	f04f 0900 	movls.w	r9, #0
 800443e:	6023      	str	r3, [r4, #0]
 8004440:	463d      	mov	r5, r7
 8004442:	f04f 0b00 	mov.w	fp, #0
 8004446:	6831      	ldr	r1, [r6, #0]
 8004448:	ab03      	add	r3, sp, #12
 800444a:	7809      	ldrb	r1, [r1, #0]
 800444c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004450:	2202      	movs	r2, #2
 8004452:	f7fb fed5 	bl	8000200 <memchr>
 8004456:	b328      	cbz	r0, 80044a4 <_scanf_i+0xb8>
 8004458:	f1bb 0f01 	cmp.w	fp, #1
 800445c:	d159      	bne.n	8004512 <_scanf_i+0x126>
 800445e:	6862      	ldr	r2, [r4, #4]
 8004460:	b92a      	cbnz	r2, 800446e <_scanf_i+0x82>
 8004462:	6822      	ldr	r2, [r4, #0]
 8004464:	2308      	movs	r3, #8
 8004466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446a:	6063      	str	r3, [r4, #4]
 800446c:	6022      	str	r2, [r4, #0]
 800446e:	6822      	ldr	r2, [r4, #0]
 8004470:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004474:	6022      	str	r2, [r4, #0]
 8004476:	68a2      	ldr	r2, [r4, #8]
 8004478:	1e51      	subs	r1, r2, #1
 800447a:	60a1      	str	r1, [r4, #8]
 800447c:	b192      	cbz	r2, 80044a4 <_scanf_i+0xb8>
 800447e:	6832      	ldr	r2, [r6, #0]
 8004480:	1c51      	adds	r1, r2, #1
 8004482:	6031      	str	r1, [r6, #0]
 8004484:	7812      	ldrb	r2, [r2, #0]
 8004486:	f805 2b01 	strb.w	r2, [r5], #1
 800448a:	6872      	ldr	r2, [r6, #4]
 800448c:	3a01      	subs	r2, #1
 800448e:	2a00      	cmp	r2, #0
 8004490:	6072      	str	r2, [r6, #4]
 8004492:	dc07      	bgt.n	80044a4 <_scanf_i+0xb8>
 8004494:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004498:	4631      	mov	r1, r6
 800449a:	4650      	mov	r0, sl
 800449c:	4790      	blx	r2
 800449e:	2800      	cmp	r0, #0
 80044a0:	f040 8085 	bne.w	80045ae <_scanf_i+0x1c2>
 80044a4:	f10b 0b01 	add.w	fp, fp, #1
 80044a8:	f1bb 0f03 	cmp.w	fp, #3
 80044ac:	d1cb      	bne.n	8004446 <_scanf_i+0x5a>
 80044ae:	6863      	ldr	r3, [r4, #4]
 80044b0:	b90b      	cbnz	r3, 80044b6 <_scanf_i+0xca>
 80044b2:	230a      	movs	r3, #10
 80044b4:	6063      	str	r3, [r4, #4]
 80044b6:	6863      	ldr	r3, [r4, #4]
 80044b8:	4947      	ldr	r1, [pc, #284]	; (80045d8 <_scanf_i+0x1ec>)
 80044ba:	6960      	ldr	r0, [r4, #20]
 80044bc:	1ac9      	subs	r1, r1, r3
 80044be:	f000 f8af 	bl	8004620 <__sccl>
 80044c2:	f04f 0b00 	mov.w	fp, #0
 80044c6:	68a3      	ldr	r3, [r4, #8]
 80044c8:	6822      	ldr	r2, [r4, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d03d      	beq.n	800454a <_scanf_i+0x15e>
 80044ce:	6831      	ldr	r1, [r6, #0]
 80044d0:	6960      	ldr	r0, [r4, #20]
 80044d2:	f891 c000 	ldrb.w	ip, [r1]
 80044d6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80044da:	2800      	cmp	r0, #0
 80044dc:	d035      	beq.n	800454a <_scanf_i+0x15e>
 80044de:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80044e2:	d124      	bne.n	800452e <_scanf_i+0x142>
 80044e4:	0510      	lsls	r0, r2, #20
 80044e6:	d522      	bpl.n	800452e <_scanf_i+0x142>
 80044e8:	f10b 0b01 	add.w	fp, fp, #1
 80044ec:	f1b9 0f00 	cmp.w	r9, #0
 80044f0:	d003      	beq.n	80044fa <_scanf_i+0x10e>
 80044f2:	3301      	adds	r3, #1
 80044f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80044f8:	60a3      	str	r3, [r4, #8]
 80044fa:	6873      	ldr	r3, [r6, #4]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	6073      	str	r3, [r6, #4]
 8004502:	dd1b      	ble.n	800453c <_scanf_i+0x150>
 8004504:	6833      	ldr	r3, [r6, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	6033      	str	r3, [r6, #0]
 800450a:	68a3      	ldr	r3, [r4, #8]
 800450c:	3b01      	subs	r3, #1
 800450e:	60a3      	str	r3, [r4, #8]
 8004510:	e7d9      	b.n	80044c6 <_scanf_i+0xda>
 8004512:	f1bb 0f02 	cmp.w	fp, #2
 8004516:	d1ae      	bne.n	8004476 <_scanf_i+0x8a>
 8004518:	6822      	ldr	r2, [r4, #0]
 800451a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800451e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004522:	d1bf      	bne.n	80044a4 <_scanf_i+0xb8>
 8004524:	2310      	movs	r3, #16
 8004526:	6063      	str	r3, [r4, #4]
 8004528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800452c:	e7a2      	b.n	8004474 <_scanf_i+0x88>
 800452e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004532:	6022      	str	r2, [r4, #0]
 8004534:	780b      	ldrb	r3, [r1, #0]
 8004536:	f805 3b01 	strb.w	r3, [r5], #1
 800453a:	e7de      	b.n	80044fa <_scanf_i+0x10e>
 800453c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004540:	4631      	mov	r1, r6
 8004542:	4650      	mov	r0, sl
 8004544:	4798      	blx	r3
 8004546:	2800      	cmp	r0, #0
 8004548:	d0df      	beq.n	800450a <_scanf_i+0x11e>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	05db      	lsls	r3, r3, #23
 800454e:	d50d      	bpl.n	800456c <_scanf_i+0x180>
 8004550:	42bd      	cmp	r5, r7
 8004552:	d909      	bls.n	8004568 <_scanf_i+0x17c>
 8004554:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004558:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800455c:	4632      	mov	r2, r6
 800455e:	4650      	mov	r0, sl
 8004560:	4798      	blx	r3
 8004562:	f105 39ff 	add.w	r9, r5, #4294967295
 8004566:	464d      	mov	r5, r9
 8004568:	42bd      	cmp	r5, r7
 800456a:	d02d      	beq.n	80045c8 <_scanf_i+0x1dc>
 800456c:	6822      	ldr	r2, [r4, #0]
 800456e:	f012 0210 	ands.w	r2, r2, #16
 8004572:	d113      	bne.n	800459c <_scanf_i+0x1b0>
 8004574:	702a      	strb	r2, [r5, #0]
 8004576:	6863      	ldr	r3, [r4, #4]
 8004578:	9e01      	ldr	r6, [sp, #4]
 800457a:	4639      	mov	r1, r7
 800457c:	4650      	mov	r0, sl
 800457e:	47b0      	blx	r6
 8004580:	6821      	ldr	r1, [r4, #0]
 8004582:	f8d8 3000 	ldr.w	r3, [r8]
 8004586:	f011 0f20 	tst.w	r1, #32
 800458a:	d013      	beq.n	80045b4 <_scanf_i+0x1c8>
 800458c:	1d1a      	adds	r2, r3, #4
 800458e:	f8c8 2000 	str.w	r2, [r8]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6018      	str	r0, [r3, #0]
 8004596:	68e3      	ldr	r3, [r4, #12]
 8004598:	3301      	adds	r3, #1
 800459a:	60e3      	str	r3, [r4, #12]
 800459c:	1bed      	subs	r5, r5, r7
 800459e:	44ab      	add	fp, r5
 80045a0:	6925      	ldr	r5, [r4, #16]
 80045a2:	445d      	add	r5, fp
 80045a4:	6125      	str	r5, [r4, #16]
 80045a6:	2000      	movs	r0, #0
 80045a8:	b007      	add	sp, #28
 80045aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ae:	f04f 0b00 	mov.w	fp, #0
 80045b2:	e7ca      	b.n	800454a <_scanf_i+0x15e>
 80045b4:	1d1a      	adds	r2, r3, #4
 80045b6:	f8c8 2000 	str.w	r2, [r8]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f011 0f01 	tst.w	r1, #1
 80045c0:	bf14      	ite	ne
 80045c2:	8018      	strhne	r0, [r3, #0]
 80045c4:	6018      	streq	r0, [r3, #0]
 80045c6:	e7e6      	b.n	8004596 <_scanf_i+0x1aa>
 80045c8:	2001      	movs	r0, #1
 80045ca:	e7ed      	b.n	80045a8 <_scanf_i+0x1bc>
 80045cc:	08004a24 	.word	0x08004a24
 80045d0:	0800487d 	.word	0x0800487d
 80045d4:	08004795 	.word	0x08004795
 80045d8:	08004af9 	.word	0x08004af9

080045dc <_read_r>:
 80045dc:	b538      	push	{r3, r4, r5, lr}
 80045de:	4d07      	ldr	r5, [pc, #28]	; (80045fc <_read_r+0x20>)
 80045e0:	4604      	mov	r4, r0
 80045e2:	4608      	mov	r0, r1
 80045e4:	4611      	mov	r1, r2
 80045e6:	2200      	movs	r2, #0
 80045e8:	602a      	str	r2, [r5, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	f7fc fa86 	bl	8000afc <_read>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d102      	bne.n	80045fa <_read_r+0x1e>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	b103      	cbz	r3, 80045fa <_read_r+0x1e>
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	20000200 	.word	0x20000200

08004600 <_sbrk_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4d06      	ldr	r5, [pc, #24]	; (800461c <_sbrk_r+0x1c>)
 8004604:	2300      	movs	r3, #0
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	f7fc fac8 	bl	8000ba0 <_sbrk>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d102      	bne.n	800461a <_sbrk_r+0x1a>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	b103      	cbz	r3, 800461a <_sbrk_r+0x1a>
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	20000200 	.word	0x20000200

08004620 <__sccl>:
 8004620:	b570      	push	{r4, r5, r6, lr}
 8004622:	780b      	ldrb	r3, [r1, #0]
 8004624:	4604      	mov	r4, r0
 8004626:	2b5e      	cmp	r3, #94	; 0x5e
 8004628:	bf0b      	itete	eq
 800462a:	784b      	ldrbeq	r3, [r1, #1]
 800462c:	1c48      	addne	r0, r1, #1
 800462e:	1c88      	addeq	r0, r1, #2
 8004630:	2200      	movne	r2, #0
 8004632:	bf08      	it	eq
 8004634:	2201      	moveq	r2, #1
 8004636:	1e61      	subs	r1, r4, #1
 8004638:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800463c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004640:	42a9      	cmp	r1, r5
 8004642:	d1fb      	bne.n	800463c <__sccl+0x1c>
 8004644:	b90b      	cbnz	r3, 800464a <__sccl+0x2a>
 8004646:	3801      	subs	r0, #1
 8004648:	bd70      	pop	{r4, r5, r6, pc}
 800464a:	f082 0201 	eor.w	r2, r2, #1
 800464e:	54e2      	strb	r2, [r4, r3]
 8004650:	4605      	mov	r5, r0
 8004652:	4628      	mov	r0, r5
 8004654:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004658:	292d      	cmp	r1, #45	; 0x2d
 800465a:	d006      	beq.n	800466a <__sccl+0x4a>
 800465c:	295d      	cmp	r1, #93	; 0x5d
 800465e:	d0f3      	beq.n	8004648 <__sccl+0x28>
 8004660:	b909      	cbnz	r1, 8004666 <__sccl+0x46>
 8004662:	4628      	mov	r0, r5
 8004664:	e7f0      	b.n	8004648 <__sccl+0x28>
 8004666:	460b      	mov	r3, r1
 8004668:	e7f1      	b.n	800464e <__sccl+0x2e>
 800466a:	786e      	ldrb	r6, [r5, #1]
 800466c:	2e5d      	cmp	r6, #93	; 0x5d
 800466e:	d0fa      	beq.n	8004666 <__sccl+0x46>
 8004670:	42b3      	cmp	r3, r6
 8004672:	dcf8      	bgt.n	8004666 <__sccl+0x46>
 8004674:	3502      	adds	r5, #2
 8004676:	4619      	mov	r1, r3
 8004678:	3101      	adds	r1, #1
 800467a:	428e      	cmp	r6, r1
 800467c:	5462      	strb	r2, [r4, r1]
 800467e:	dcfb      	bgt.n	8004678 <__sccl+0x58>
 8004680:	1af1      	subs	r1, r6, r3
 8004682:	3901      	subs	r1, #1
 8004684:	1c58      	adds	r0, r3, #1
 8004686:	42b3      	cmp	r3, r6
 8004688:	bfa8      	it	ge
 800468a:	2100      	movge	r1, #0
 800468c:	1843      	adds	r3, r0, r1
 800468e:	e7e0      	b.n	8004652 <__sccl+0x32>

08004690 <_strtol_l.constprop.0>:
 8004690:	2b01      	cmp	r3, #1
 8004692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004696:	d001      	beq.n	800469c <_strtol_l.constprop.0+0xc>
 8004698:	2b24      	cmp	r3, #36	; 0x24
 800469a:	d906      	bls.n	80046aa <_strtol_l.constprop.0+0x1a>
 800469c:	f7fe ff6c 	bl	8003578 <__errno>
 80046a0:	2316      	movs	r3, #22
 80046a2:	6003      	str	r3, [r0, #0]
 80046a4:	2000      	movs	r0, #0
 80046a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004790 <_strtol_l.constprop.0+0x100>
 80046ae:	460d      	mov	r5, r1
 80046b0:	462e      	mov	r6, r5
 80046b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80046ba:	f017 0708 	ands.w	r7, r7, #8
 80046be:	d1f7      	bne.n	80046b0 <_strtol_l.constprop.0+0x20>
 80046c0:	2c2d      	cmp	r4, #45	; 0x2d
 80046c2:	d132      	bne.n	800472a <_strtol_l.constprop.0+0x9a>
 80046c4:	782c      	ldrb	r4, [r5, #0]
 80046c6:	2701      	movs	r7, #1
 80046c8:	1cb5      	adds	r5, r6, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d05b      	beq.n	8004786 <_strtol_l.constprop.0+0xf6>
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	d109      	bne.n	80046e6 <_strtol_l.constprop.0+0x56>
 80046d2:	2c30      	cmp	r4, #48	; 0x30
 80046d4:	d107      	bne.n	80046e6 <_strtol_l.constprop.0+0x56>
 80046d6:	782c      	ldrb	r4, [r5, #0]
 80046d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80046dc:	2c58      	cmp	r4, #88	; 0x58
 80046de:	d14d      	bne.n	800477c <_strtol_l.constprop.0+0xec>
 80046e0:	786c      	ldrb	r4, [r5, #1]
 80046e2:	2310      	movs	r3, #16
 80046e4:	3502      	adds	r5, #2
 80046e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80046ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80046ee:	f04f 0c00 	mov.w	ip, #0
 80046f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80046f6:	4666      	mov	r6, ip
 80046f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80046fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004700:	f1be 0f09 	cmp.w	lr, #9
 8004704:	d816      	bhi.n	8004734 <_strtol_l.constprop.0+0xa4>
 8004706:	4674      	mov	r4, lr
 8004708:	42a3      	cmp	r3, r4
 800470a:	dd24      	ble.n	8004756 <_strtol_l.constprop.0+0xc6>
 800470c:	f1bc 0f00 	cmp.w	ip, #0
 8004710:	db1e      	blt.n	8004750 <_strtol_l.constprop.0+0xc0>
 8004712:	45b1      	cmp	r9, r6
 8004714:	d31c      	bcc.n	8004750 <_strtol_l.constprop.0+0xc0>
 8004716:	d101      	bne.n	800471c <_strtol_l.constprop.0+0x8c>
 8004718:	45a2      	cmp	sl, r4
 800471a:	db19      	blt.n	8004750 <_strtol_l.constprop.0+0xc0>
 800471c:	fb06 4603 	mla	r6, r6, r3, r4
 8004720:	f04f 0c01 	mov.w	ip, #1
 8004724:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004728:	e7e8      	b.n	80046fc <_strtol_l.constprop.0+0x6c>
 800472a:	2c2b      	cmp	r4, #43	; 0x2b
 800472c:	bf04      	itt	eq
 800472e:	782c      	ldrbeq	r4, [r5, #0]
 8004730:	1cb5      	addeq	r5, r6, #2
 8004732:	e7ca      	b.n	80046ca <_strtol_l.constprop.0+0x3a>
 8004734:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004738:	f1be 0f19 	cmp.w	lr, #25
 800473c:	d801      	bhi.n	8004742 <_strtol_l.constprop.0+0xb2>
 800473e:	3c37      	subs	r4, #55	; 0x37
 8004740:	e7e2      	b.n	8004708 <_strtol_l.constprop.0+0x78>
 8004742:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004746:	f1be 0f19 	cmp.w	lr, #25
 800474a:	d804      	bhi.n	8004756 <_strtol_l.constprop.0+0xc6>
 800474c:	3c57      	subs	r4, #87	; 0x57
 800474e:	e7db      	b.n	8004708 <_strtol_l.constprop.0+0x78>
 8004750:	f04f 3cff 	mov.w	ip, #4294967295
 8004754:	e7e6      	b.n	8004724 <_strtol_l.constprop.0+0x94>
 8004756:	f1bc 0f00 	cmp.w	ip, #0
 800475a:	da05      	bge.n	8004768 <_strtol_l.constprop.0+0xd8>
 800475c:	2322      	movs	r3, #34	; 0x22
 800475e:	6003      	str	r3, [r0, #0]
 8004760:	4646      	mov	r6, r8
 8004762:	b942      	cbnz	r2, 8004776 <_strtol_l.constprop.0+0xe6>
 8004764:	4630      	mov	r0, r6
 8004766:	e79e      	b.n	80046a6 <_strtol_l.constprop.0+0x16>
 8004768:	b107      	cbz	r7, 800476c <_strtol_l.constprop.0+0xdc>
 800476a:	4276      	negs	r6, r6
 800476c:	2a00      	cmp	r2, #0
 800476e:	d0f9      	beq.n	8004764 <_strtol_l.constprop.0+0xd4>
 8004770:	f1bc 0f00 	cmp.w	ip, #0
 8004774:	d000      	beq.n	8004778 <_strtol_l.constprop.0+0xe8>
 8004776:	1e69      	subs	r1, r5, #1
 8004778:	6011      	str	r1, [r2, #0]
 800477a:	e7f3      	b.n	8004764 <_strtol_l.constprop.0+0xd4>
 800477c:	2430      	movs	r4, #48	; 0x30
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1b1      	bne.n	80046e6 <_strtol_l.constprop.0+0x56>
 8004782:	2308      	movs	r3, #8
 8004784:	e7af      	b.n	80046e6 <_strtol_l.constprop.0+0x56>
 8004786:	2c30      	cmp	r4, #48	; 0x30
 8004788:	d0a5      	beq.n	80046d6 <_strtol_l.constprop.0+0x46>
 800478a:	230a      	movs	r3, #10
 800478c:	e7ab      	b.n	80046e6 <_strtol_l.constprop.0+0x56>
 800478e:	bf00      	nop
 8004790:	08004afc 	.word	0x08004afc

08004794 <_strtol_r>:
 8004794:	f7ff bf7c 	b.w	8004690 <_strtol_l.constprop.0>

08004798 <_strtoul_l.constprop.0>:
 8004798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800479c:	4f36      	ldr	r7, [pc, #216]	; (8004878 <_strtoul_l.constprop.0+0xe0>)
 800479e:	4686      	mov	lr, r0
 80047a0:	460d      	mov	r5, r1
 80047a2:	4628      	mov	r0, r5
 80047a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047a8:	5de6      	ldrb	r6, [r4, r7]
 80047aa:	f016 0608 	ands.w	r6, r6, #8
 80047ae:	d1f8      	bne.n	80047a2 <_strtoul_l.constprop.0+0xa>
 80047b0:	2c2d      	cmp	r4, #45	; 0x2d
 80047b2:	d12f      	bne.n	8004814 <_strtoul_l.constprop.0+0x7c>
 80047b4:	782c      	ldrb	r4, [r5, #0]
 80047b6:	2601      	movs	r6, #1
 80047b8:	1c85      	adds	r5, r0, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d057      	beq.n	800486e <_strtoul_l.constprop.0+0xd6>
 80047be:	2b10      	cmp	r3, #16
 80047c0:	d109      	bne.n	80047d6 <_strtoul_l.constprop.0+0x3e>
 80047c2:	2c30      	cmp	r4, #48	; 0x30
 80047c4:	d107      	bne.n	80047d6 <_strtoul_l.constprop.0+0x3e>
 80047c6:	7828      	ldrb	r0, [r5, #0]
 80047c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80047cc:	2858      	cmp	r0, #88	; 0x58
 80047ce:	d149      	bne.n	8004864 <_strtoul_l.constprop.0+0xcc>
 80047d0:	786c      	ldrb	r4, [r5, #1]
 80047d2:	2310      	movs	r3, #16
 80047d4:	3502      	adds	r5, #2
 80047d6:	f04f 38ff 	mov.w	r8, #4294967295
 80047da:	2700      	movs	r7, #0
 80047dc:	fbb8 f8f3 	udiv	r8, r8, r3
 80047e0:	fb03 f908 	mul.w	r9, r3, r8
 80047e4:	ea6f 0909 	mvn.w	r9, r9
 80047e8:	4638      	mov	r0, r7
 80047ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80047ee:	f1bc 0f09 	cmp.w	ip, #9
 80047f2:	d814      	bhi.n	800481e <_strtoul_l.constprop.0+0x86>
 80047f4:	4664      	mov	r4, ip
 80047f6:	42a3      	cmp	r3, r4
 80047f8:	dd22      	ble.n	8004840 <_strtoul_l.constprop.0+0xa8>
 80047fa:	2f00      	cmp	r7, #0
 80047fc:	db1d      	blt.n	800483a <_strtoul_l.constprop.0+0xa2>
 80047fe:	4580      	cmp	r8, r0
 8004800:	d31b      	bcc.n	800483a <_strtoul_l.constprop.0+0xa2>
 8004802:	d101      	bne.n	8004808 <_strtoul_l.constprop.0+0x70>
 8004804:	45a1      	cmp	r9, r4
 8004806:	db18      	blt.n	800483a <_strtoul_l.constprop.0+0xa2>
 8004808:	fb00 4003 	mla	r0, r0, r3, r4
 800480c:	2701      	movs	r7, #1
 800480e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004812:	e7ea      	b.n	80047ea <_strtoul_l.constprop.0+0x52>
 8004814:	2c2b      	cmp	r4, #43	; 0x2b
 8004816:	bf04      	itt	eq
 8004818:	782c      	ldrbeq	r4, [r5, #0]
 800481a:	1c85      	addeq	r5, r0, #2
 800481c:	e7cd      	b.n	80047ba <_strtoul_l.constprop.0+0x22>
 800481e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004822:	f1bc 0f19 	cmp.w	ip, #25
 8004826:	d801      	bhi.n	800482c <_strtoul_l.constprop.0+0x94>
 8004828:	3c37      	subs	r4, #55	; 0x37
 800482a:	e7e4      	b.n	80047f6 <_strtoul_l.constprop.0+0x5e>
 800482c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004830:	f1bc 0f19 	cmp.w	ip, #25
 8004834:	d804      	bhi.n	8004840 <_strtoul_l.constprop.0+0xa8>
 8004836:	3c57      	subs	r4, #87	; 0x57
 8004838:	e7dd      	b.n	80047f6 <_strtoul_l.constprop.0+0x5e>
 800483a:	f04f 37ff 	mov.w	r7, #4294967295
 800483e:	e7e6      	b.n	800480e <_strtoul_l.constprop.0+0x76>
 8004840:	2f00      	cmp	r7, #0
 8004842:	da07      	bge.n	8004854 <_strtoul_l.constprop.0+0xbc>
 8004844:	2322      	movs	r3, #34	; 0x22
 8004846:	f8ce 3000 	str.w	r3, [lr]
 800484a:	f04f 30ff 	mov.w	r0, #4294967295
 800484e:	b932      	cbnz	r2, 800485e <_strtoul_l.constprop.0+0xc6>
 8004850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004854:	b106      	cbz	r6, 8004858 <_strtoul_l.constprop.0+0xc0>
 8004856:	4240      	negs	r0, r0
 8004858:	2a00      	cmp	r2, #0
 800485a:	d0f9      	beq.n	8004850 <_strtoul_l.constprop.0+0xb8>
 800485c:	b107      	cbz	r7, 8004860 <_strtoul_l.constprop.0+0xc8>
 800485e:	1e69      	subs	r1, r5, #1
 8004860:	6011      	str	r1, [r2, #0]
 8004862:	e7f5      	b.n	8004850 <_strtoul_l.constprop.0+0xb8>
 8004864:	2430      	movs	r4, #48	; 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1b5      	bne.n	80047d6 <_strtoul_l.constprop.0+0x3e>
 800486a:	2308      	movs	r3, #8
 800486c:	e7b3      	b.n	80047d6 <_strtoul_l.constprop.0+0x3e>
 800486e:	2c30      	cmp	r4, #48	; 0x30
 8004870:	d0a9      	beq.n	80047c6 <_strtoul_l.constprop.0+0x2e>
 8004872:	230a      	movs	r3, #10
 8004874:	e7af      	b.n	80047d6 <_strtoul_l.constprop.0+0x3e>
 8004876:	bf00      	nop
 8004878:	08004afc 	.word	0x08004afc

0800487c <_strtoul_r>:
 800487c:	f7ff bf8c 	b.w	8004798 <_strtoul_l.constprop.0>

08004880 <__submore>:
 8004880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004884:	460c      	mov	r4, r1
 8004886:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800488c:	4299      	cmp	r1, r3
 800488e:	d11d      	bne.n	80048cc <__submore+0x4c>
 8004890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004894:	f7ff fb0a 	bl	8003eac <_malloc_r>
 8004898:	b918      	cbnz	r0, 80048a2 <__submore+0x22>
 800489a:	f04f 30ff 	mov.w	r0, #4294967295
 800489e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80048a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80048ac:	6360      	str	r0, [r4, #52]	; 0x34
 80048ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80048b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80048b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80048ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80048be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80048c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80048c6:	6020      	str	r0, [r4, #0]
 80048c8:	2000      	movs	r0, #0
 80048ca:	e7e8      	b.n	800489e <__submore+0x1e>
 80048cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80048ce:	0077      	lsls	r7, r6, #1
 80048d0:	463a      	mov	r2, r7
 80048d2:	f000 f84b 	bl	800496c <_realloc_r>
 80048d6:	4605      	mov	r5, r0
 80048d8:	2800      	cmp	r0, #0
 80048da:	d0de      	beq.n	800489a <__submore+0x1a>
 80048dc:	eb00 0806 	add.w	r8, r0, r6
 80048e0:	4601      	mov	r1, r0
 80048e2:	4632      	mov	r2, r6
 80048e4:	4640      	mov	r0, r8
 80048e6:	f000 f827 	bl	8004938 <memcpy>
 80048ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80048ee:	f8c4 8000 	str.w	r8, [r4]
 80048f2:	e7e9      	b.n	80048c8 <__submore+0x48>

080048f4 <_fstat_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4d07      	ldr	r5, [pc, #28]	; (8004914 <_fstat_r+0x20>)
 80048f8:	2300      	movs	r3, #0
 80048fa:	4604      	mov	r4, r0
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	f7fc f924 	bl	8000b4e <_fstat>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	d102      	bne.n	8004910 <_fstat_r+0x1c>
 800490a:	682b      	ldr	r3, [r5, #0]
 800490c:	b103      	cbz	r3, 8004910 <_fstat_r+0x1c>
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	bd38      	pop	{r3, r4, r5, pc}
 8004912:	bf00      	nop
 8004914:	20000200 	.word	0x20000200

08004918 <_isatty_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4d06      	ldr	r5, [pc, #24]	; (8004934 <_isatty_r+0x1c>)
 800491c:	2300      	movs	r3, #0
 800491e:	4604      	mov	r4, r0
 8004920:	4608      	mov	r0, r1
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	f7fc f923 	bl	8000b6e <_isatty>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_isatty_r+0x1a>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_isatty_r+0x1a>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	20000200 	.word	0x20000200

08004938 <memcpy>:
 8004938:	440a      	add	r2, r1
 800493a:	4291      	cmp	r1, r2
 800493c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004940:	d100      	bne.n	8004944 <memcpy+0xc>
 8004942:	4770      	bx	lr
 8004944:	b510      	push	{r4, lr}
 8004946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800494a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800494e:	4291      	cmp	r1, r2
 8004950:	d1f9      	bne.n	8004946 <memcpy+0xe>
 8004952:	bd10      	pop	{r4, pc}

08004954 <__malloc_lock>:
 8004954:	4801      	ldr	r0, [pc, #4]	; (800495c <__malloc_lock+0x8>)
 8004956:	f7ff b9c3 	b.w	8003ce0 <__retarget_lock_acquire_recursive>
 800495a:	bf00      	nop
 800495c:	200001f4 	.word	0x200001f4

08004960 <__malloc_unlock>:
 8004960:	4801      	ldr	r0, [pc, #4]	; (8004968 <__malloc_unlock+0x8>)
 8004962:	f7ff b9be 	b.w	8003ce2 <__retarget_lock_release_recursive>
 8004966:	bf00      	nop
 8004968:	200001f4 	.word	0x200001f4

0800496c <_realloc_r>:
 800496c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004970:	4680      	mov	r8, r0
 8004972:	4614      	mov	r4, r2
 8004974:	460e      	mov	r6, r1
 8004976:	b921      	cbnz	r1, 8004982 <_realloc_r+0x16>
 8004978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800497c:	4611      	mov	r1, r2
 800497e:	f7ff ba95 	b.w	8003eac <_malloc_r>
 8004982:	b92a      	cbnz	r2, 8004990 <_realloc_r+0x24>
 8004984:	f7ff fa26 	bl	8003dd4 <_free_r>
 8004988:	4625      	mov	r5, r4
 800498a:	4628      	mov	r0, r5
 800498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004990:	f000 f81b 	bl	80049ca <_malloc_usable_size_r>
 8004994:	4284      	cmp	r4, r0
 8004996:	4607      	mov	r7, r0
 8004998:	d802      	bhi.n	80049a0 <_realloc_r+0x34>
 800499a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800499e:	d812      	bhi.n	80049c6 <_realloc_r+0x5a>
 80049a0:	4621      	mov	r1, r4
 80049a2:	4640      	mov	r0, r8
 80049a4:	f7ff fa82 	bl	8003eac <_malloc_r>
 80049a8:	4605      	mov	r5, r0
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d0ed      	beq.n	800498a <_realloc_r+0x1e>
 80049ae:	42bc      	cmp	r4, r7
 80049b0:	4622      	mov	r2, r4
 80049b2:	4631      	mov	r1, r6
 80049b4:	bf28      	it	cs
 80049b6:	463a      	movcs	r2, r7
 80049b8:	f7ff ffbe 	bl	8004938 <memcpy>
 80049bc:	4631      	mov	r1, r6
 80049be:	4640      	mov	r0, r8
 80049c0:	f7ff fa08 	bl	8003dd4 <_free_r>
 80049c4:	e7e1      	b.n	800498a <_realloc_r+0x1e>
 80049c6:	4635      	mov	r5, r6
 80049c8:	e7df      	b.n	800498a <_realloc_r+0x1e>

080049ca <_malloc_usable_size_r>:
 80049ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ce:	1f18      	subs	r0, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bfbc      	itt	lt
 80049d4:	580b      	ldrlt	r3, [r1, r0]
 80049d6:	18c0      	addlt	r0, r0, r3
 80049d8:	4770      	bx	lr
	...

080049dc <_init>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr

080049e8 <_fini>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	bf00      	nop
 80049ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ee:	bc08      	pop	{r3}
 80049f0:	469e      	mov	lr, r3
 80049f2:	4770      	bx	lr
