
PWM_task17_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08006560  08006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800682c  0800682c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800682c  0800682c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006834  08006834  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800683c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000074  080068b0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080068b0  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012591  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260a  00000000  00000000  00032635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00034c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00035c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027eab  00000000  00000000  00036b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c32  00000000  00000000  0005ea13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d0e  00000000  00000000  00071645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd4  00000000  00000000  001673a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006548 	.word	0x08006548

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006548 	.word	0x08006548

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <commTask>:
uint8_t brightnessCounter = 0;
uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
int cmdcount = 0;

int commTask()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 0);
 800059a:	1db9      	adds	r1, r7, #6
 800059c:	2300      	movs	r3, #0
 800059e:	2201      	movs	r2, #1
 80005a0:	481d      	ldr	r0, [pc, #116]	; (8000618 <commTask+0x84>)
 80005a2:	f003 fd5b 	bl	800405c <HAL_UART_Receive>
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK) {
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <commTask+0x20>
		return 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e02d      	b.n	8000610 <commTask+0x7c>
	}

	if (ch != '\r' && ch != '\n')
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	2b0d      	cmp	r3, #13
 80005b8:	d01a      	beq.n	80005f0 <commTask+0x5c>
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	2b0a      	cmp	r3, #10
 80005be:	d017      	beq.n	80005f0 <commTask+0x5c>
	{
		HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);
 80005c0:	1db9      	adds	r1, r7, #6
 80005c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c6:	2201      	movs	r2, #1
 80005c8:	4813      	ldr	r0, [pc, #76]	; (8000618 <commTask+0x84>)
 80005ca:	f003 fcb3 	bl	8003f34 <HAL_UART_Transmit>

		if (cmdcount >= MAX_BUFFER_LENGTH)
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <commTask+0x88>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b63      	cmp	r3, #99	; 0x63
 80005d4:	dd02      	ble.n	80005dc <commTask+0x48>
		{
			cmdcount = 0;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <commTask+0x88>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <commTask+0x88>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	490e      	ldr	r1, [pc, #56]	; (800061c <commTask+0x88>)
 80005e4:	600a      	str	r2, [r1, #0]
 80005e6:	79b9      	ldrb	r1, [r7, #6]
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <commTask+0x8c>)
 80005ea:	54d1      	strb	r1, [r2, r3]
		return 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	e00f      	b.n	8000610 <commTask+0x7c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 80005f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f4:	2202      	movs	r2, #2
 80005f6:	490b      	ldr	r1, [pc, #44]	; (8000624 <commTask+0x90>)
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <commTask+0x84>)
 80005fa:	f003 fc9b 	bl	8003f34 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <commTask+0x88>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <commTask+0x8c>)
 8000604:	2100      	movs	r1, #0
 8000606:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <commTask+0x88>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
	return 1;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000dc 	.word	0x200000dc
 800061c:	200001c8 	.word	0x200001c8
 8000620:	20000164 	.word	0x20000164
 8000624:	08006560 	.word	0x08006560

08000628 <handleCommand>:


void handleCommand()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
  char delim[2] = " ";
 800062e:	2320      	movs	r3, #32
 8000630:	80bb      	strh	r3, [r7, #4]
  char* res = strtok(cmdbuffer, delim);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	482f      	ldr	r0, [pc, #188]	; (80006f4 <handleCommand+0xcc>)
 8000638:	f004 fea4 	bl	8005384 <strtok>
 800063c:	4603      	mov	r3, r0
 800063e:	60fb      	str	r3, [r7, #12]

  if(res == NULL)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d052      	beq.n	80006ec <handleCommand+0xc4>
  {
	  return;
  }

  while(res != NULL)
 8000646:	e04a      	b.n	80006de <handleCommand+0xb6>
  {
	  if (strcmp(res, "full") == 0)
 8000648:	492b      	ldr	r1, [pc, #172]	; (80006f8 <handleCommand+0xd0>)
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f7ff fdc0 	bl	80001d0 <strcmp>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d106      	bne.n	8000664 <handleCommand+0x3c>
	  {
		  isBrightness = 0;
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <handleCommand+0xd4>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
		  while(res != NULL)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d021      	beq.n	80006a6 <handleCommand+0x7e>
		  {
				 // stateOn();
				  return;
 8000662:	e044      	b.n	80006ee <handleCommand+0xc6>
		  }
	  }
	  else if (strcmp(res, "off") == 0)
 8000664:	4926      	ldr	r1, [pc, #152]	; (8000700 <handleCommand+0xd8>)
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f7ff fdb2 	bl	80001d0 <strcmp>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d103      	bne.n	800067a <handleCommand+0x52>
	  {
		  isBrightness = 0;
 8000672:	4b22      	ldr	r3, [pc, #136]	; (80006fc <handleCommand+0xd4>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
		 // stateOff();
		  return;
 8000678:	e039      	b.n	80006ee <handleCommand+0xc6>
	  }
	  else if (strcmp(res, "half") == 0)
 800067a:	4922      	ldr	r1, [pc, #136]	; (8000704 <handleCommand+0xdc>)
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f7ff fda7 	bl	80001d0 <strcmp>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d103      	bne.n	8000690 <handleCommand+0x68>
	  {
		  isBrightness = 0;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <handleCommand+0xd4>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		 // stateHalfBrightness();
		  return;
 800068e:	e02e      	b.n	80006ee <handleCommand+0xc6>
	  }

	  else if (strcmp(res, "blink") == 0)
 8000690:	491d      	ldr	r1, [pc, #116]	; (8000708 <handleCommand+0xe0>)
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f7ff fd9c 	bl	80001d0 <strcmp>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <handleCommand+0x7e>
	  {
		  isBrightness = 0;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <handleCommand+0xd4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
		  //stateBlink();
		  return;
 80006a4:	e023      	b.n	80006ee <handleCommand+0xc6>
	  }
	  if (strcmp(res, "set") == 0)
 80006a6:	4919      	ldr	r1, [pc, #100]	; (800070c <handleCommand+0xe4>)
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f7ff fd91 	bl	80001d0 <strcmp>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d114      	bne.n	80006de <handleCommand+0xb6>
	  {
		  isBrightness = 1;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <handleCommand+0xd4>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
		  while(res != NULL)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00e      	beq.n	80006de <handleCommand+0xb6>
		  {
			  res = strtok(NULL, delim);
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	2000      	movs	r0, #0
 80006c6:	f004 fe5d 	bl	8005384 <strtok>
 80006ca:	4603      	mov	r3, r0
 80006cc:	60fb      	str	r3, [r7, #12]
			  int count = atoi(res);
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f004 fdac 	bl	800522c <atoi>
 80006d4:	60b8      	str	r0, [r7, #8]
			  {
				  setBrightness(count);
 80006d6:	68b8      	ldr	r0, [r7, #8]
 80006d8:	f000 fb6c 	bl	8000db4 <setBrightness>
				  return;
 80006dc:	e007      	b.n	80006ee <handleCommand+0xc6>
  while(res != NULL)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1b1      	bne.n	8000648 <handleCommand+0x20>
			  }
		  }
	  }
  }

  printf("Invalid command\r\n");
 80006e4:	480a      	ldr	r0, [pc, #40]	; (8000710 <handleCommand+0xe8>)
 80006e6:	f004 fe45 	bl	8005374 <puts>
 80006ea:	e000      	b.n	80006ee <handleCommand+0xc6>
	  return;
 80006ec:	bf00      	nop

}
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000164 	.word	0x20000164
 80006f8:	08006564 	.word	0x08006564
 80006fc:	20000160 	.word	0x20000160
 8000700:	0800656c 	.word	0x0800656c
 8000704:	08006570 	.word	0x08006570
 8000708:	08006578 	.word	0x08006578
 800070c:	08006580 	.word	0x08006580
 8000710:	08006584 	.word	0x08006584

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 fba0 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f818 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f000 f8f2 	bl	8000908 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000724:	f000 f8c0 	bl	80008a8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000728:	f000 f864 	bl	80007f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_NVIC_EnableIRQ(TIM3_IRQn); // turn on interrupts
  HAL_TIM_Base_Start(&htim3);// start interrupts  HAL_TIM_PeriodElapsedCallback
 800072c:	4807      	ldr	r0, [pc, #28]	; (800074c <main+0x38>)
 800072e:	f002 fa83 	bl	8002c38 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//start interrupts HAL_TIM_PWM_PulseFinishedCallback
 8000732:	2100      	movs	r1, #0
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <main+0x38>)
 8000736:	f002 fb3f 	bl	8002db8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(commTask())
 800073a:	f7ff ff2b 	bl	8000594 <commTask>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0fa      	beq.n	800073a <main+0x26>
	  {
		  handleCommand();
 8000744:	f7ff ff70 	bl	8000628 <handleCommand>
	  if(commTask())
 8000748:	e7f7      	b.n	800073a <main+0x26>
 800074a:	bf00      	nop
 800074c:	20000090 	.word	0x20000090

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b096      	sub	sp, #88	; 0x58
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2244      	movs	r2, #68	; 0x44
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f004 fd92 	bl	8005288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000772:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000776:	f000 ff4d 	bl	8001614 <HAL_PWREx_ControlVoltageScaling>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000780:	f000 f928 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800078c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	2310      	movs	r3, #16
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000796:	2302      	movs	r3, #2
 8000798:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800079e:	230a      	movs	r3, #10
 80007a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007a2:	2307      	movs	r3, #7
 80007a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 ff84 	bl	80016c0 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007be:	f000 f909 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2303      	movs	r3, #3
 80007c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	2104      	movs	r1, #4
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fb4c 	bl	8001e78 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e6:	f000 f8f5 	bl	80009d4 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3758      	adds	r7, #88	; 0x58
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_TIM3_Init+0xac>)
 800081a:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <MX_TIM3_Init+0xb0>)
 800081c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_TIM3_Init+0xac>)
 8000820:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000824:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_TIM3_Init+0xac>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_TIM3_Init+0xac>)
 800082e:	2264      	movs	r2, #100	; 0x64
 8000830:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_TIM3_Init+0xac>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_TIM3_Init+0xac>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800083e:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_TIM3_Init+0xac>)
 8000840:	f002 fa62 	bl	8002d08 <HAL_TIM_PWM_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800084a:	f000 f8c3 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4810      	ldr	r0, [pc, #64]	; (80008a0 <MX_TIM3_Init+0xac>)
 800085e:	f003 fa93 	bl	8003d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000868:	f000 f8b4 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086c:	2360      	movs	r3, #96	; 0x60
 800086e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 8000870:	2314      	movs	r3, #20
 8000872:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <MX_TIM3_Init+0xac>)
 8000884:	f002 fdd6 	bl	8003434 <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800088e:	f000 f8a1 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <MX_TIM3_Init+0xac>)
 8000894:	f000 f8e8 	bl	8000a68 <HAL_TIM_MspPostInit>

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000090 	.word	0x20000090
 80008a4:	40000400 	.word	0x40000400

080008a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_USART2_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ec:	f003 fad4 	bl	8003e98 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f86d 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000dc 	.word	0x200000dc
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a2a      	ldr	r2, [pc, #168]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_GPIO_Init+0xc4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a24      	ldr	r2, [pc, #144]	; (80009cc <MX_GPIO_Init+0xc4>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_GPIO_Init+0xc4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <MX_GPIO_Init+0xc4>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2120      	movs	r1, #32
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f000 fe1f 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000990:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <MX_GPIO_Init+0xc8>)
 80009a2:	f000 fc67 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a6:	2320      	movs	r3, #32
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f000 fc58 	bl	8001274 <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000800 	.word	0x48000800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_MspInit+0x44>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_MspInit+0x44>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6613      	str	r3, [r2, #96]	; 0x60
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_MspInit+0x44>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x44>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x44>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6593      	str	r3, [r2, #88]	; 0x58
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x44>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_TIM_PWM_MspInit+0x38>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d10b      	bne.n	8000a52 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6593      	str	r3, [r2, #88]	; 0x58
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40000400 	.word	0x40000400
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a11      	ldr	r2, [pc, #68]	; (8000acc <HAL_TIM_MspPostInit+0x64>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d11c      	bne.n	8000ac4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_TIM_MspPostInit+0x68>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_TIM_MspPostInit+0x68>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_TIM_MspPostInit+0x68>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aa2:	2340      	movs	r3, #64	; 0x40
 8000aa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f000 fbd8 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3720      	adds	r7, #32
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40000400 	.word	0x40000400
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0ac      	sub	sp, #176	; 0xb0
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2288      	movs	r2, #136	; 0x88
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f004 fbc7 	bl	8005288 <memset>
  if(huart->Instance==USART2)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a25      	ldr	r2, [pc, #148]	; (8000b94 <HAL_UART_MspInit+0xc0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d143      	bne.n	8000b8c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 fbd5 	bl	80022c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b1c:	f7ff ff5a 	bl	80009d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_UART_MspInit+0xc4>)
 8000b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b24:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <HAL_UART_MspInit+0xc4>)
 8000b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_UART_MspInit+0xc4>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_UART_MspInit+0xc4>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <HAL_UART_MspInit+0xc4>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_UART_MspInit+0xc4>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b50:	230c      	movs	r3, #12
 8000b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b78:	f000 fb7c 	bl	8001274 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2026      	movs	r0, #38	; 0x26
 8000b82:	f000 fac2 	bl	800110a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b86:	2026      	movs	r0, #38	; 0x26
 8000b88:	f000 fadb 	bl	8001142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	37b0      	adds	r7, #176	; 0xb0
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40004400 	.word	0x40004400
 8000b98:	40021000 	.word	0x40021000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be8:	f000 f994 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <USART2_IRQHandler+0x10>)
 8000bf6:	f003 fb03 	bl	8004200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000dc 	.word	0x200000dc

08000c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
	return 1;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_kill>:

int _kill(int pid, int sig)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c1e:	f004 fb09 	bl	8005234 <__errno>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2216      	movs	r2, #22
 8000c26:	601a      	str	r2, [r3, #0]
	return -1;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_exit>:

void _exit (int status)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ffe7 	bl	8000c14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c46:	e7fe      	b.n	8000c46 <_exit+0x12>

08000c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e00a      	b.n	8000c70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c5a:	f3af 8000 	nop.w
 8000c5e:	4601      	mov	r1, r0
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	60ba      	str	r2, [r7, #8]
 8000c66:	b2ca      	uxtb	r2, r1
 8000c68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbf0      	blt.n	8000c5a <_read+0x12>
	}

return len;
 8000c78:	687b      	ldr	r3, [r7, #4]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e009      	b.n	8000ca8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbf1      	blt.n	8000c94 <_write+0x12>
	}
	return len;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_close>:

int _close(int file)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	return -1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_isatty>:

int _isatty(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
	return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f004 fa6e 	bl	8005234 <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20018000 	.word	0x20018000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	200001cc 	.word	0x200001cc
 8000d8c:	200001e8 	.word	0x200001e8

08000d90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <setBrightness>:

int currBrightness = 10;


void setBrightness(int brightness)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	currBrightness = brightness;
 8000dbc:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <setBrightness+0x4c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
	if (currBrightness == 0)
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <setBrightness+0x4c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d104      	bne.n	8000dd4 <setBrightness+0x20>
	{
		//HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
		//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <setBrightness+0x50>)
 8000dce:	f002 fa4d 	bl	800326c <HAL_TIM_PWM_Stop_IT>
		return;
 8000dd2:	e012      	b.n	8000dfa <setBrightness+0x46>
	}
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	480b      	ldr	r0, [pc, #44]	; (8000e04 <setBrightness+0x50>)
 8000dd8:	f002 f8f4 	bl	8002fc4 <HAL_TIM_PWM_Start_IT>

	int dutyCycle = 10*brightness;
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
	if(dutyCycle > 100)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b64      	cmp	r3, #100	; 0x64
 8000dec:	dd01      	ble.n	8000df2 <setBrightness+0x3e>
	{
		dutyCycle = 100;
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutyCycle);
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <setBrightness+0x50>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000004 	.word	0x20000004
 8000e04:	20000090 	.word	0x20000090

08000e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e0c:	f7ff ffc0 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	; (8000e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <LoopForever+0xe>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	; (8000e54 <LoopForever+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e36:	f004 fa03 	bl	8005240 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3a:	f7ff fc6b 	bl	8000714 <main>

08000e3e <LoopForever>:

LoopForever:
    b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e4c:	0800683c 	.word	0x0800683c
  ldr r2, =_sbss
 8000e50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e54:	200001e4 	.word	0x200001e4

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_Init+0x3c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_Init+0x3c>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f000 f93e 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f000 f80f 	bl	8000e9c <HAL_InitTick>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	e001      	b.n	8000e8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e8a:	f7ff fda9 	bl	80009e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_InitTick+0x6c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d023      	beq.n	8000ef8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_InitTick+0x70>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_InitTick+0x6c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f949 	bl	800115e <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10f      	bne.n	8000ef2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d809      	bhi.n	8000eec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f913 	bl	800110a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_InitTick+0x74>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e007      	b.n	8000efc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e004      	b.n	8000efc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e001      	b.n	8000efc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000000c 	.word	0x2000000c
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	2000000c 	.word	0x2000000c
 8000f38:	200001d0 	.word	0x200001d0

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200001d0 	.word	0x200001d0

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <__NVIC_EnableIRQ+0x38>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f7ff ff8e 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff29 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff3e 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff8e 	bl	8001048 <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5d 	bl	8000ff4 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff31 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffa2 	bl	80010b0 <SysTick_Config>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001176:	b480      	push	{r7}
 8001178:	b085      	sub	sp, #20
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d008      	beq.n	80011a0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2204      	movs	r2, #4
 8001192:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e022      	b.n	80011e6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 020e 	bic.w	r2, r2, #14
 80011ae:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c4:	f003 021c 	and.w	r2, r3, #28
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d005      	beq.n	8001216 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2204      	movs	r2, #4
 800120e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e029      	b.n	800126a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 020e 	bic.w	r2, r2, #14
 8001224:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f003 021c 	and.w	r2, r3, #28
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	2101      	movs	r1, #1
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	4798      	blx	r3
    }
  }
  return status;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	e17f      	b.n	8001584 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8171 	beq.w	800157e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d005      	beq.n	80012b4 <HAL_GPIO_Init+0x40>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d130      	bne.n	8001316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ea:	2201      	movs	r2, #1
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 0201 	and.w	r2, r3, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b03      	cmp	r3, #3
 8001320:	d118      	bne.n	8001354 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001328:	2201      	movs	r2, #1
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	f003 0201 	and.w	r2, r3, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b03      	cmp	r3, #3
 800135e:	d017      	beq.n	8001390 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2203      	movs	r2, #3
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d123      	bne.n	80013e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80ac 	beq.w	800157e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b5f      	ldr	r3, [pc, #380]	; (80015a4 <HAL_GPIO_Init+0x330>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	4a5e      	ldr	r2, [pc, #376]	; (80015a4 <HAL_GPIO_Init+0x330>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6613      	str	r3, [r2, #96]	; 0x60
 8001432:	4b5c      	ldr	r3, [pc, #368]	; (80015a4 <HAL_GPIO_Init+0x330>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800143e:	4a5a      	ldr	r2, [pc, #360]	; (80015a8 <HAL_GPIO_Init+0x334>)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	220f      	movs	r2, #15
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001468:	d025      	beq.n	80014b6 <HAL_GPIO_Init+0x242>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_GPIO_Init+0x338>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01f      	beq.n	80014b2 <HAL_GPIO_Init+0x23e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_GPIO_Init+0x33c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x23a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4d      	ldr	r2, [pc, #308]	; (80015b4 <HAL_GPIO_Init+0x340>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x236>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_GPIO_Init+0x344>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x232>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <HAL_GPIO_Init+0x348>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x22e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4a      	ldr	r2, [pc, #296]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x22a>
 800149a:	2306      	movs	r3, #6
 800149c:	e00c      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 800149e:	2307      	movs	r3, #7
 80014a0:	e00a      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014a2:	2305      	movs	r3, #5
 80014a4:	e008      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014b6:	2300      	movs	r3, #0
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c8:	4937      	ldr	r1, [pc, #220]	; (80015a8 <HAL_GPIO_Init+0x334>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_GPIO_Init+0x350>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_GPIO_Init+0x350>)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001524:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_GPIO_Init+0x350>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800154e:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_GPIO_Init+0x350>)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa22 f303 	lsr.w	r3, r2, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	f47f ae78 	bne.w	8001284 <HAL_GPIO_Init+0x10>
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	48000400 	.word	0x48000400
 80015b0:	48000800 	.word	0x48000800
 80015b4:	48000c00 	.word	0x48000c00
 80015b8:	48001000 	.word	0x48001000
 80015bc:	48001400 	.word	0x48001400
 80015c0:	48001800 	.word	0x48001800
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015e4:	e002      	b.n	80015ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_PWREx_GetVoltageRange+0x18>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40007000 	.word	0x40007000

08001614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001622:	d130      	bne.n	8001686 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800162c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001630:	d038      	beq.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800163a:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001640:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2232      	movs	r2, #50	; 0x32
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0c9b      	lsrs	r3, r3, #18
 8001654:	3301      	adds	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001658:	e002      	b.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3b01      	subs	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166c:	d102      	bne.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x60>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f2      	bne.n	800165a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001680:	d110      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e00f      	b.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800168e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001692:	d007      	beq.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40007000 	.word	0x40007000
 80016b8:	20000000 	.word	0x20000000
 80016bc:	431bde83 	.word	0x431bde83

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e3ca      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d2:	4b97      	ldr	r3, [pc, #604]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016dc:	4b94      	ldr	r3, [pc, #592]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 80e4 	beq.w	80018bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <HAL_RCC_OscConfig+0x4a>
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b0c      	cmp	r3, #12
 80016fe:	f040 808b 	bne.w	8001818 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b01      	cmp	r3, #1
 8001706:	f040 8087 	bne.w	8001818 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800170a:	4b89      	ldr	r3, [pc, #548]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x62>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e3a2      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1a      	ldr	r2, [r3, #32]
 8001726:	4b82      	ldr	r3, [pc, #520]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <HAL_RCC_OscConfig+0x7c>
 8001732:	4b7f      	ldr	r3, [pc, #508]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800173a:	e005      	b.n	8001748 <HAL_RCC_OscConfig+0x88>
 800173c:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800173e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001748:	4293      	cmp	r3, r2
 800174a:	d223      	bcs.n	8001794 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4618      	mov	r0, r3
 8001752:	f000 fd55 	bl	8002200 <RCC_SetFlashLatencyFromMSIRange>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e383      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001760:	4b73      	ldr	r3, [pc, #460]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a72      	ldr	r2, [pc, #456]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b70      	ldr	r3, [pc, #448]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	496d      	ldr	r1, [pc, #436]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800177e:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	4968      	ldr	r1, [pc, #416]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800178e:	4313      	orrs	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
 8001792:	e025      	b.n	80017e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001794:	4b66      	ldr	r3, [pc, #408]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a65      	ldr	r2, [pc, #404]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4960      	ldr	r1, [pc, #384]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b2:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	495b      	ldr	r1, [pc, #364]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fd15 	bl	8002200 <RCC_SetFlashLatencyFromMSIRange>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e343      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017e0:	f000 fc4a 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b52      	ldr	r3, [pc, #328]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	4950      	ldr	r1, [pc, #320]	; (8001934 <HAL_RCC_OscConfig+0x274>)
 80017f2:	5ccb      	ldrb	r3, [r1, r3]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	4a4e      	ldr	r2, [pc, #312]	; (8001938 <HAL_RCC_OscConfig+0x278>)
 80017fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001800:	4b4e      	ldr	r3, [pc, #312]	; (800193c <HAL_RCC_OscConfig+0x27c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fb49 	bl	8000e9c <HAL_InitTick>
 800180a:	4603      	mov	r3, r0
 800180c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d052      	beq.n	80018ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	e327      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d032      	beq.n	8001886 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001820:	4b43      	ldr	r3, [pc, #268]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a42      	ldr	r2, [pc, #264]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800182c:	f7ff fb86 	bl	8000f3c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001834:	f7ff fb82 	bl	8000f3c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e310      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a36      	ldr	r2, [pc, #216]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4931      	ldr	r1, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	492c      	ldr	r1, [pc, #176]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
 8001884:	e01a      	b.n	80018bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a29      	ldr	r2, [pc, #164]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001892:	f7ff fb53 	bl	8000f3c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189a:	f7ff fb4f 	bl	8000f3c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e2dd      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x1da>
 80018b8:	e000      	b.n	80018bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d074      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x21a>
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d10e      	bne.n	80018f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d10b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d064      	beq.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d160      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e2ba      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x24a>
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e026      	b.n	8001958 <HAL_RCC_OscConfig+0x298>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001912:	d115      	bne.n	8001940 <HAL_RCC_OscConfig+0x280>
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800191a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a02      	ldr	r2, [pc, #8]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e014      	b.n	8001958 <HAL_RCC_OscConfig+0x298>
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	08006598 	.word	0x08006598
 8001938:	20000000 	.word	0x20000000
 800193c:	20000008 	.word	0x20000008
 8001940:	4ba0      	ldr	r3, [pc, #640]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a9f      	ldr	r2, [pc, #636]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b9d      	ldr	r3, [pc, #628]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a9c      	ldr	r2, [pc, #624]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff faec 	bl	8000f3c <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff fae8 	bl	8000f3c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e276      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197a:	4b92      	ldr	r3, [pc, #584]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x2a8>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fad8 	bl	8000f3c <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff fad4 	bl	8000f3c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e262      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a2:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x2d0>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d060      	beq.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_OscConfig+0x310>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d119      	bne.n	80019fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d116      	bne.n	80019fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d0:	4b7c      	ldr	r3, [pc, #496]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_OscConfig+0x328>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e23f      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b76      	ldr	r3, [pc, #472]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	4973      	ldr	r1, [pc, #460]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fc:	e040      	b.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d023      	beq.n	8001a4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a06:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6e      	ldr	r2, [pc, #440]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa93 	bl	8000f3c <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fa8f 	bl	8000f3c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e21d      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2c:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	495f      	ldr	r1, [pc, #380]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
 8001a4c:	e018      	b.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a5c      	ldr	r2, [pc, #368]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fa6f 	bl	8000f3c <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff fa6b 	bl	8000f3c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1f9      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d03c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01c      	beq.n	8001ace <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a94:	4b4b      	ldr	r3, [pc, #300]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9a:	4a4a      	ldr	r2, [pc, #296]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fa4a 	bl	8000f3c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff fa46 	bl	8000f3c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1d4      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ef      	beq.n	8001aac <HAL_RCC_OscConfig+0x3ec>
 8001acc:	e01b      	b.n	8001b06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad4:	4a3b      	ldr	r2, [pc, #236]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff fa2d 	bl	8000f3c <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fa29 	bl	8000f3c <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1b7      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ef      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80a6 	beq.w	8001c60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b14:	2300      	movs	r3, #0
 8001b16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10d      	bne.n	8001b40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d118      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b58:	f7ff f9f0 	bl	8000f3c <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b60:	f7ff f9ec 	bl	8000f3c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e17a      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d108      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4d8>
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b96:	e029      	b.n	8001bec <HAL_RCC_OscConfig+0x52c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d115      	bne.n	8001bcc <HAL_RCC_OscConfig+0x50c>
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc0:	e014      	b.n	8001bec <HAL_RCC_OscConfig+0x52c>
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	4b9c      	ldr	r3, [pc, #624]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a9b      	ldr	r2, [pc, #620]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bdc:	4b98      	ldr	r3, [pc, #608]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a97      	ldr	r2, [pc, #604]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d016      	beq.n	8001c22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f9a2 	bl	8000f3c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f99e 	bl	8000f3c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e12a      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c12:	4b8b      	ldr	r3, [pc, #556]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ed      	beq.n	8001bfc <HAL_RCC_OscConfig+0x53c>
 8001c20:	e015      	b.n	8001c4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c22:	f7ff f98b 	bl	8000f3c <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff f987 	bl	8000f3c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e113      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c40:	4b7f      	ldr	r3, [pc, #508]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ed      	bne.n	8001c2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c4e:	7ffb      	ldrb	r3, [r7, #31]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d105      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c54:	4b7a      	ldr	r3, [pc, #488]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	4a79      	ldr	r2, [pc, #484]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80fe 	beq.w	8001e66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	f040 80d0 	bne.w	8001e14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c74:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d130      	bne.n	8001cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	3b01      	subs	r3, #1
 8001c94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d127      	bne.n	8001cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d11f      	bne.n	8001cea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cb4:	2a07      	cmp	r2, #7
 8001cb6:	bf14      	ite	ne
 8001cb8:	2201      	movne	r2, #1
 8001cba:	2200      	moveq	r2, #0
 8001cbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d113      	bne.n	8001cea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	085b      	lsrs	r3, r3, #1
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	085b      	lsrs	r3, r3, #1
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d06e      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d069      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cf0:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0ad      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4b      	ldr	r2, [pc, #300]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d18:	f7ff f910 	bl	8000f3c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff f90c 	bl	8000f3c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e09a      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d32:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3e:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d4e:	3a01      	subs	r2, #1
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d58:	0212      	lsls	r2, r2, #8
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d60:	0852      	lsrs	r2, r2, #1
 8001d62:	3a01      	subs	r2, #1
 8001d64:	0552      	lsls	r2, r2, #21
 8001d66:	4311      	orrs	r1, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d6c:	0852      	lsrs	r2, r2, #1
 8001d6e:	3a01      	subs	r2, #1
 8001d70:	0652      	lsls	r2, r2, #25
 8001d72:	4311      	orrs	r1, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d78:	0912      	lsrs	r2, r2, #4
 8001d7a:	0452      	lsls	r2, r2, #17
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	4930      	ldr	r1, [pc, #192]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d9c:	f7ff f8ce 	bl	8000f3c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff f8ca 	bl	8000f3c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e058      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc2:	e050      	b.n	8001e66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e04f      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d148      	bne.n	8001e66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dec:	f7ff f8a6 	bl	8000f3c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff f8a2 	bl	8000f3c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e030      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x734>
 8001e12:	e028      	b.n	8001e66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d023      	beq.n	8001e62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <HAL_RCC_OscConfig+0x780>)
 8001e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7ff f889 	bl	8000f3c <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	e00c      	b.n	8001e48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7ff f885 	bl	8000f3c <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d905      	bls.n	8001e48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e013      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
 8001e40:	40021000 	.word	0x40021000
 8001e44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_RCC_OscConfig+0x7b0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ec      	bne.n	8001e2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_RCC_OscConfig+0x7b0>)
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	4905      	ldr	r1, [pc, #20]	; (8001e70 <HAL_RCC_OscConfig+0x7b0>)
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_RCC_OscConfig+0x7b4>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60cb      	str	r3, [r1, #12]
 8001e60:	e001      	b.n	8001e66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	feeefffc 	.word	0xfeeefffc

08001e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0e7      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b75      	ldr	r3, [pc, #468]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d910      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0207 	bic.w	r2, r3, #7
 8001ea2:	4970      	ldr	r1, [pc, #448]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b6e      	ldr	r3, [pc, #440]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0cf      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b66      	ldr	r3, [pc, #408]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d908      	bls.n	8001eea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed8:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4960      	ldr	r1, [pc, #384]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d04c      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d121      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0a6      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f16:	4b54      	ldr	r3, [pc, #336]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d115      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e09a      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f2e:	4b4e      	ldr	r3, [pc, #312]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e08e      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e086      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4943      	ldr	r1, [pc, #268]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f60:	f7fe ffec 	bl	8000f3c <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7fe ffe8 	bl	8000f3c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e06e      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b3a      	ldr	r3, [pc, #232]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 020c 	and.w	r2, r3, #12
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1eb      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d010      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d208      	bcs.n	8001fbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	492b      	ldr	r1, [pc, #172]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d210      	bcs.n	8001fee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fcc:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 0207 	bic.w	r2, r3, #7
 8001fd4:	4923      	ldr	r1, [pc, #140]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_RCC_ClockConfig+0x1ec>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e036      	b.n	800205c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	4918      	ldr	r1, [pc, #96]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	4313      	orrs	r3, r2
 800200a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4910      	ldr	r1, [pc, #64]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800202c:	f000 f824 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	490b      	ldr	r1, [pc, #44]	; (800206c <HAL_RCC_ClockConfig+0x1f4>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1f8>)
 800204a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1fc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe ff23 	bl	8000e9c <HAL_InitTick>
 8002056:	4603      	mov	r3, r0
 8002058:	72fb      	strb	r3, [r7, #11]

  return status;
 800205a:	7afb      	ldrb	r3, [r7, #11]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40022000 	.word	0x40022000
 8002068:	40021000 	.word	0x40021000
 800206c:	08006598 	.word	0x08006598
 8002070:	20000000 	.word	0x20000000
 8002074:	20000008 	.word	0x20000008

08002078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002090:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x34>
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d121      	bne.n	80020ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d11e      	bne.n	80020ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020ac:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020b8:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	e005      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020d4:	4a2b      	ldr	r2, [pc, #172]	; (8002184 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10d      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d102      	bne.n	80020f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_RCC_GetSysClockFreq+0x110>)
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	e004      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_RCC_GetSysClockFreq+0x114>)
 80020fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d134      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d003      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0xa6>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d003      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0xac>
 800211c:	e005      	b.n	800212a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_RCC_GetSysClockFreq+0x110>)
 8002120:	617b      	str	r3, [r7, #20]
      break;
 8002122:	e005      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_GetSysClockFreq+0x114>)
 8002126:	617b      	str	r3, [r7, #20]
      break;
 8002128:	e002      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	617b      	str	r3, [r7, #20]
      break;
 800212e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	3301      	adds	r3, #1
 800213c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	fb03 f202 	mul.w	r2, r3, r2
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_RCC_GetSysClockFreq+0x108>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	0e5b      	lsrs	r3, r3, #25
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	3301      	adds	r3, #1
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002170:	69bb      	ldr	r3, [r7, #24]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	080065b0 	.word	0x080065b0
 8002188:	00f42400 	.word	0x00f42400
 800218c:	007a1200 	.word	0x007a1200

08002190 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000000 	.word	0x20000000

080021a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021ac:	f7ff fff0 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4904      	ldr	r1, [pc, #16]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	080065a8 	.word	0x080065a8

080021d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021d8:	f7ff ffda 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	0adb      	lsrs	r3, r3, #11
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4904      	ldr	r1, [pc, #16]	; (80021fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	080065a8 	.word	0x080065a8

08002200 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800220c:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002218:	f7ff f9ee 	bl	80015f8 <HAL_PWREx_GetVoltageRange>
 800221c:	6178      	str	r0, [r7, #20]
 800221e:	e014      	b.n	800224a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222a:	6593      	str	r3, [r2, #88]	; 0x58
 800222c:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002238:	f7ff f9de 	bl	80015f8 <HAL_PWREx_GetVoltageRange>
 800223c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002248:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002250:	d10b      	bne.n	800226a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d919      	bls.n	800228c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2ba0      	cmp	r3, #160	; 0xa0
 800225c:	d902      	bls.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800225e:	2302      	movs	r3, #2
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	e013      	b.n	800228c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002264:	2301      	movs	r3, #1
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	e010      	b.n	800228c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b80      	cmp	r3, #128	; 0x80
 800226e:	d902      	bls.n	8002276 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002270:	2303      	movs	r3, #3
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	e00a      	b.n	800228c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d102      	bne.n	8002282 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800227c:	2302      	movs	r3, #2
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	e004      	b.n	800228c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b70      	cmp	r3, #112	; 0x70
 8002286:	d101      	bne.n	800228c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002288:	2301      	movs	r3, #1
 800228a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 0207 	bic.w	r2, r3, #7
 8002294:	4909      	ldr	r1, [pc, #36]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40022000 	.word	0x40022000

080022c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022c8:	2300      	movs	r3, #0
 80022ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022cc:	2300      	movs	r3, #0
 80022ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d041      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022e4:	d02a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022ea:	d824      	bhi.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022f0:	d008      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022f6:	d81e      	bhi.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002300:	d010      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002302:	e018      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002304:	4b86      	ldr	r3, [pc, #536]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a85      	ldr	r2, [pc, #532]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002310:	e015      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fabb 	bl	8002894 <RCCEx_PLLSAI1_Config>
 800231e:	4603      	mov	r3, r0
 8002320:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002322:	e00c      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3320      	adds	r3, #32
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fba6 	bl	8002a7c <RCCEx_PLLSAI2_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002334:	e003      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	74fb      	strb	r3, [r7, #19]
      break;
 800233a:	e000      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800233c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800233e:	7cfb      	ldrb	r3, [r7, #19]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002344:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002352:	4973      	ldr	r1, [pc, #460]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800235a:	e001      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d041      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002370:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002374:	d02a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002376:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800237a:	d824      	bhi.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800237c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002380:	d008      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002386:	d81e      	bhi.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002390:	d010      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002392:	e018      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002394:	4b62      	ldr	r3, [pc, #392]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a61      	ldr	r2, [pc, #388]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023a0:	e015      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fa73 	bl	8002894 <RCCEx_PLLSAI1_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023b2:	e00c      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3320      	adds	r3, #32
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fb5e 	bl	8002a7c <RCCEx_PLLSAI2_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023c4:	e003      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	74fb      	strb	r3, [r7, #19]
      break;
 80023ca:	e000      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ce:	7cfb      	ldrb	r3, [r7, #19]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023d4:	4b52      	ldr	r3, [pc, #328]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023e2:	494f      	ldr	r1, [pc, #316]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ea:	e001      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80a0 	beq.w	800253e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002412:	2300      	movs	r3, #0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00d      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241c:	4a40      	ldr	r2, [pc, #256]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	6593      	str	r3, [r2, #88]	; 0x58
 8002424:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002430:	2301      	movs	r3, #1
 8002432:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002434:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800243a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002440:	f7fe fd7c 	bl	8000f3c <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002446:	e009      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002448:	f7fe fd78 	bl	8000f3c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d902      	bls.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	74fb      	strb	r3, [r7, #19]
        break;
 800245a:	e005      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800245c:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ef      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d15c      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002478:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01f      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	429a      	cmp	r2, r3
 800248a:	d019      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002496:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	4a20      	ldr	r2, [pc, #128]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ae:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d016      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe fd37 	bl	8000f3c <HAL_GetTick>
 80024ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d0:	e00b      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7fe fd33 	bl	8000f3c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d902      	bls.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	74fb      	strb	r3, [r7, #19]
            break;
 80024e8:	e006      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ec      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250e:	4904      	ldr	r1, [pc, #16]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002516:	e009      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	74bb      	strb	r3, [r7, #18]
 800251c:	e006      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800252c:	7c7b      	ldrb	r3, [r7, #17]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d105      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002532:	4b9e      	ldr	r3, [pc, #632]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	4a9d      	ldr	r2, [pc, #628]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800254a:	4b98      	ldr	r3, [pc, #608]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	f023 0203 	bic.w	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	4994      	ldr	r1, [pc, #592]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800256c:	4b8f      	ldr	r3, [pc, #572]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f023 020c 	bic.w	r2, r3, #12
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	498c      	ldr	r1, [pc, #560]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800258e:	4b87      	ldr	r3, [pc, #540]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	4983      	ldr	r1, [pc, #524]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025b0:	4b7e      	ldr	r3, [pc, #504]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	497b      	ldr	r1, [pc, #492]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025d2:	4b76      	ldr	r3, [pc, #472]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e0:	4972      	ldr	r1, [pc, #456]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025f4:	4b6d      	ldr	r3, [pc, #436]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	496a      	ldr	r1, [pc, #424]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002616:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	4961      	ldr	r1, [pc, #388]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002638:	4b5c      	ldr	r3, [pc, #368]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002646:	4959      	ldr	r1, [pc, #356]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800265a:	4b54      	ldr	r3, [pc, #336]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002668:	4950      	ldr	r1, [pc, #320]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800267c:	4b4b      	ldr	r3, [pc, #300]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	4948      	ldr	r1, [pc, #288]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800269e:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	493f      	ldr	r1, [pc, #252]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d028      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026c0:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ce:	4937      	ldr	r1, [pc, #220]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026de:	d106      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e0:	4b32      	ldr	r3, [pc, #200]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a31      	ldr	r2, [pc, #196]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ea:	60d3      	str	r3, [r2, #12]
 80026ec:	e011      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026f6:	d10c      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3304      	adds	r3, #4
 80026fc:	2101      	movs	r1, #1
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f8c8 	bl	8002894 <RCCEx_PLLSAI1_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d028      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800271e:	4b23      	ldr	r3, [pc, #140]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	491f      	ldr	r1, [pc, #124]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800273c:	d106      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273e:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002748:	60d3      	str	r3, [r2, #12]
 800274a:	e011      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002754:	d10c      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	2101      	movs	r1, #1
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f899 	bl	8002894 <RCCEx_PLLSAI1_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d02b      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800279a:	d109      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a02      	ldr	r2, [pc, #8]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a6:	60d3      	str	r3, [r2, #12]
 80027a8:	e014      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3304      	adds	r3, #4
 80027be:	2101      	movs	r1, #1
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 f867 	bl	8002894 <RCCEx_PLLSAI1_Config>
 80027c6:	4603      	mov	r3, r0
 80027c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ca:	7cfb      	ldrb	r3, [r7, #19]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027d0:	7cfb      	ldrb	r3, [r7, #19]
 80027d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d02f      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ee:	4928      	ldr	r1, [pc, #160]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027fe:	d10d      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	2102      	movs	r1, #2
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f844 	bl	8002894 <RCCEx_PLLSAI1_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d014      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002816:	7cfb      	ldrb	r3, [r7, #19]
 8002818:	74bb      	strb	r3, [r7, #18]
 800281a:	e011      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002824:	d10c      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3320      	adds	r3, #32
 800282a:	2102      	movs	r1, #2
 800282c:	4618      	mov	r0, r3
 800282e:	f000 f925 	bl	8002a7c <RCCEx_PLLSAI2_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800285a:	490d      	ldr	r1, [pc, #52]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002874:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800287e:	4904      	ldr	r1, [pc, #16]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002886:	7cbb      	ldrb	r3, [r7, #18]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000

08002894 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028a2:	4b75      	ldr	r3, [pc, #468]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d018      	beq.n	80028e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028ae:	4b72      	ldr	r3, [pc, #456]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0203 	and.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d10d      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
       ||
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028c6:	4b6c      	ldr	r3, [pc, #432]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	091b      	lsrs	r3, r3, #4
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
       ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d047      	beq.n	800296a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	e044      	b.n	800296a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d018      	beq.n	800291a <RCCEx_PLLSAI1_Config+0x86>
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d825      	bhi.n	8002938 <RCCEx_PLLSAI1_Config+0xa4>
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d002      	beq.n	80028f6 <RCCEx_PLLSAI1_Config+0x62>
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d009      	beq.n	8002908 <RCCEx_PLLSAI1_Config+0x74>
 80028f4:	e020      	b.n	8002938 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028f6:	4b60      	ldr	r3, [pc, #384]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d11d      	bne.n	800293e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002906:	e01a      	b.n	800293e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002908:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d116      	bne.n	8002942 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002918:	e013      	b.n	8002942 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800291a:	4b57      	ldr	r3, [pc, #348]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002926:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002936:	e006      	b.n	8002946 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e004      	b.n	8002948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293e:	bf00      	nop
 8002940:	e002      	b.n	8002948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002946:	bf00      	nop
    }

    if(status == HAL_OK)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10d      	bne.n	800296a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800294e:	4b4a      	ldr	r3, [pc, #296]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	430b      	orrs	r3, r1
 8002964:	4944      	ldr	r1, [pc, #272]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d17d      	bne.n	8002a6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002970:	4b41      	ldr	r3, [pc, #260]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a40      	ldr	r2, [pc, #256]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002976:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800297a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800297c:	f7fe fade 	bl	8000f3c <HAL_GetTick>
 8002980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002982:	e009      	b.n	8002998 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002984:	f7fe fada 	bl	8000f3c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d902      	bls.n	8002998 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	73fb      	strb	r3, [r7, #15]
        break;
 8002996:	e005      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002998:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ef      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d160      	bne.n	8002a6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d111      	bne.n	80029d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b0:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6892      	ldr	r2, [r2, #8]
 80029c0:	0211      	lsls	r1, r2, #8
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	0912      	lsrs	r2, r2, #4
 80029c8:	0452      	lsls	r2, r2, #17
 80029ca:	430a      	orrs	r2, r1
 80029cc:	492a      	ldr	r1, [pc, #168]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	610b      	str	r3, [r1, #16]
 80029d2:	e027      	b.n	8002a24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d112      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029da:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6892      	ldr	r2, [r2, #8]
 80029ea:	0211      	lsls	r1, r2, #8
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6912      	ldr	r2, [r2, #16]
 80029f0:	0852      	lsrs	r2, r2, #1
 80029f2:	3a01      	subs	r2, #1
 80029f4:	0552      	lsls	r2, r2, #21
 80029f6:	430a      	orrs	r2, r1
 80029f8:	491f      	ldr	r1, [pc, #124]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	610b      	str	r3, [r1, #16]
 80029fe:	e011      	b.n	8002a24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6892      	ldr	r2, [r2, #8]
 8002a10:	0211      	lsls	r1, r2, #8
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6952      	ldr	r2, [r2, #20]
 8002a16:	0852      	lsrs	r2, r2, #1
 8002a18:	3a01      	subs	r2, #1
 8002a1a:	0652      	lsls	r2, r2, #25
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	4916      	ldr	r1, [pc, #88]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7fe fa84 	bl	8000f3c <HAL_GetTick>
 8002a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a36:	e009      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a38:	f7fe fa80 	bl	8000f3c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d902      	bls.n	8002a4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	73fb      	strb	r3, [r7, #15]
          break;
 8002a4a:	e005      	b.n	8002a58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ef      	beq.n	8002a38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	4904      	ldr	r1, [pc, #16]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000

08002a7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a8a:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d018      	beq.n	8002ac8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a96:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0203 	and.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d10d      	bne.n	8002ac2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002aae:	4b61      	ldr	r3, [pc, #388]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
       ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d047      	beq.n	8002b52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e044      	b.n	8002b52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d018      	beq.n	8002b02 <RCCEx_PLLSAI2_Config+0x86>
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d825      	bhi.n	8002b20 <RCCEx_PLLSAI2_Config+0xa4>
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d002      	beq.n	8002ade <RCCEx_PLLSAI2_Config+0x62>
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d009      	beq.n	8002af0 <RCCEx_PLLSAI2_Config+0x74>
 8002adc:	e020      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ade:	4b55      	ldr	r3, [pc, #340]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d11d      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aee:	e01a      	b.n	8002b26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002af0:	4b50      	ldr	r3, [pc, #320]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d116      	bne.n	8002b2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b00:	e013      	b.n	8002b2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b02:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b0e:	4b49      	ldr	r3, [pc, #292]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b1e:	e006      	b.n	8002b2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      break;
 8002b24:	e004      	b.n	8002b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b26:	bf00      	nop
 8002b28:	e002      	b.n	8002b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e000      	b.n	8002b30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b36:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6819      	ldr	r1, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	4939      	ldr	r1, [pc, #228]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d167      	bne.n	8002c28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b58:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a35      	ldr	r2, [pc, #212]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b64:	f7fe f9ea 	bl	8000f3c <HAL_GetTick>
 8002b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b6a:	e009      	b.n	8002b80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b6c:	f7fe f9e6 	bl	8000f3c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d902      	bls.n	8002b80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b7e:	e005      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b80:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ef      	bne.n	8002b6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d14a      	bne.n	8002c28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d111      	bne.n	8002bbc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b98:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6892      	ldr	r2, [r2, #8]
 8002ba8:	0211      	lsls	r1, r2, #8
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68d2      	ldr	r2, [r2, #12]
 8002bae:	0912      	lsrs	r2, r2, #4
 8002bb0:	0452      	lsls	r2, r2, #17
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	491f      	ldr	r1, [pc, #124]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	614b      	str	r3, [r1, #20]
 8002bba:	e011      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6892      	ldr	r2, [r2, #8]
 8002bcc:	0211      	lsls	r1, r2, #8
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6912      	ldr	r2, [r2, #16]
 8002bd2:	0852      	lsrs	r2, r2, #1
 8002bd4:	3a01      	subs	r2, #1
 8002bd6:	0652      	lsls	r2, r2, #25
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	4916      	ldr	r1, [pc, #88]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fe f9a6 	bl	8000f3c <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bf2:	e009      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bf4:	f7fe f9a2 	bl	8000f3c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d902      	bls.n	8002c08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	73fb      	strb	r3, [r7, #15]
          break;
 8002c06:	e005      	b.n	8002c14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0ef      	beq.n	8002bf4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	4904      	ldr	r1, [pc, #16]	; (8002c34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000

08002c38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d001      	beq.n	8002c50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e047      	b.n	8002ce0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a23      	ldr	r2, [pc, #140]	; (8002cec <HAL_TIM_Base_Start+0xb4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01d      	beq.n	8002c9e <HAL_TIM_Base_Start+0x66>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6a:	d018      	beq.n	8002c9e <HAL_TIM_Base_Start+0x66>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <HAL_TIM_Base_Start+0xb8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_TIM_Base_Start+0x66>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <HAL_TIM_Base_Start+0xbc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00e      	beq.n	8002c9e <HAL_TIM_Base_Start+0x66>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_TIM_Base_Start+0xc0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d009      	beq.n	8002c9e <HAL_TIM_Base_Start+0x66>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_TIM_Base_Start+0xc4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d004      	beq.n	8002c9e <HAL_TIM_Base_Start+0x66>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <HAL_TIM_Base_Start+0xc8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d115      	bne.n	8002cca <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_TIM_Base_Start+0xcc>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b06      	cmp	r3, #6
 8002cae:	d015      	beq.n	8002cdc <HAL_TIM_Base_Start+0xa4>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb6:	d011      	beq.n	8002cdc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc8:	e008      	b.n	8002cdc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0201 	orr.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e000      	b.n	8002cde <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40000c00 	.word	0x40000c00
 8002cfc:	40013400 	.word	0x40013400
 8002d00:	40014000 	.word	0x40014000
 8002d04:	00010007 	.word	0x00010007

08002d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e049      	b.n	8002dae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fd fe7a 	bl	8000a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f000 fc88 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_TIM_PWM_Start+0x24>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	bf14      	ite	ne
 8002dd4:	2301      	movne	r3, #1
 8002dd6:	2300      	moveq	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e03c      	b.n	8002e56 <HAL_TIM_PWM_Start+0x9e>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d109      	bne.n	8002df6 <HAL_TIM_PWM_Start+0x3e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	bf14      	ite	ne
 8002dee:	2301      	movne	r3, #1
 8002df0:	2300      	moveq	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	e02f      	b.n	8002e56 <HAL_TIM_PWM_Start+0x9e>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d109      	bne.n	8002e10 <HAL_TIM_PWM_Start+0x58>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e022      	b.n	8002e56 <HAL_TIM_PWM_Start+0x9e>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d109      	bne.n	8002e2a <HAL_TIM_PWM_Start+0x72>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	e015      	b.n	8002e56 <HAL_TIM_PWM_Start+0x9e>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d109      	bne.n	8002e44 <HAL_TIM_PWM_Start+0x8c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e008      	b.n	8002e56 <HAL_TIM_PWM_Start+0x9e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e09c      	b.n	8002f98 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <HAL_TIM_PWM_Start+0xb6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e6c:	e023      	b.n	8002eb6 <HAL_TIM_PWM_Start+0xfe>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d104      	bne.n	8002e7e <HAL_TIM_PWM_Start+0xc6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e7c:	e01b      	b.n	8002eb6 <HAL_TIM_PWM_Start+0xfe>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d104      	bne.n	8002e8e <HAL_TIM_PWM_Start+0xd6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e8c:	e013      	b.n	8002eb6 <HAL_TIM_PWM_Start+0xfe>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b0c      	cmp	r3, #12
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_PWM_Start+0xe6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e9c:	e00b      	b.n	8002eb6 <HAL_TIM_PWM_Start+0xfe>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b10      	cmp	r3, #16
 8002ea2:	d104      	bne.n	8002eae <HAL_TIM_PWM_Start+0xf6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eac:	e003      	b.n	8002eb6 <HAL_TIM_PWM_Start+0xfe>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	6839      	ldr	r1, [r7, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 ff3c 	bl	8003d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a35      	ldr	r2, [pc, #212]	; (8002fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_TIM_PWM_Start+0x13e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a34      	ldr	r2, [pc, #208]	; (8002fa4 <HAL_TIM_PWM_Start+0x1ec>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_TIM_PWM_Start+0x13e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a32      	ldr	r2, [pc, #200]	; (8002fa8 <HAL_TIM_PWM_Start+0x1f0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_TIM_PWM_Start+0x13e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a31      	ldr	r2, [pc, #196]	; (8002fac <HAL_TIM_PWM_Start+0x1f4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIM_PWM_Start+0x13e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2f      	ldr	r2, [pc, #188]	; (8002fb0 <HAL_TIM_PWM_Start+0x1f8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_PWM_Start+0x142>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_TIM_PWM_Start+0x144>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x19e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f22:	d018      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x19e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <HAL_TIM_PWM_Start+0x1fc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x19e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a21      	ldr	r2, [pc, #132]	; (8002fb8 <HAL_TIM_PWM_Start+0x200>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x19e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <HAL_TIM_PWM_Start+0x204>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x19e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_TIM_PWM_Start+0x1ec>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x19e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <HAL_TIM_PWM_Start+0x1f0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d115      	bne.n	8002f82 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_TIM_PWM_Start+0x208>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b06      	cmp	r3, #6
 8002f66:	d015      	beq.n	8002f94 <HAL_TIM_PWM_Start+0x1dc>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6e:	d011      	beq.n	8002f94 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f80:	e008      	b.n	8002f94 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e000      	b.n	8002f96 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40013400 	.word	0x40013400
 8002fa8:	40014000 	.word	0x40014000
 8002fac:	40014400 	.word	0x40014400
 8002fb0:	40014800 	.word	0x40014800
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800
 8002fbc:	40000c00 	.word	0x40000c00
 8002fc0:	00010007 	.word	0x00010007

08002fc4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_TIM_PWM_Start_IT+0x28>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e03c      	b.n	8003066 <HAL_TIM_PWM_Start_IT+0xa2>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d109      	bne.n	8003006 <HAL_TIM_PWM_Start_IT+0x42>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	e02f      	b.n	8003066 <HAL_TIM_PWM_Start_IT+0xa2>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b08      	cmp	r3, #8
 800300a:	d109      	bne.n	8003020 <HAL_TIM_PWM_Start_IT+0x5c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e022      	b.n	8003066 <HAL_TIM_PWM_Start_IT+0xa2>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d109      	bne.n	800303a <HAL_TIM_PWM_Start_IT+0x76>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	bf14      	ite	ne
 8003032:	2301      	movne	r3, #1
 8003034:	2300      	moveq	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	e015      	b.n	8003066 <HAL_TIM_PWM_Start_IT+0xa2>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b10      	cmp	r3, #16
 800303e:	d109      	bne.n	8003054 <HAL_TIM_PWM_Start_IT+0x90>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	bf14      	ite	ne
 800304c:	2301      	movne	r3, #1
 800304e:	2300      	moveq	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e008      	b.n	8003066 <HAL_TIM_PWM_Start_IT+0xa2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0e7      	b.n	800323e <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d104      	bne.n	800307e <HAL_TIM_PWM_Start_IT+0xba>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800307c:	e023      	b.n	80030c6 <HAL_TIM_PWM_Start_IT+0x102>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b04      	cmp	r3, #4
 8003082:	d104      	bne.n	800308e <HAL_TIM_PWM_Start_IT+0xca>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800308c:	e01b      	b.n	80030c6 <HAL_TIM_PWM_Start_IT+0x102>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d104      	bne.n	800309e <HAL_TIM_PWM_Start_IT+0xda>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800309c:	e013      	b.n	80030c6 <HAL_TIM_PWM_Start_IT+0x102>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d104      	bne.n	80030ae <HAL_TIM_PWM_Start_IT+0xea>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030ac:	e00b      	b.n	80030c6 <HAL_TIM_PWM_Start_IT+0x102>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d104      	bne.n	80030be <HAL_TIM_PWM_Start_IT+0xfa>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030bc:	e003      	b.n	80030c6 <HAL_TIM_PWM_Start_IT+0x102>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d841      	bhi.n	8003150 <HAL_TIM_PWM_Start_IT+0x18c>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <HAL_TIM_PWM_Start_IT+0x110>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	08003109 	.word	0x08003109
 80030d8:	08003151 	.word	0x08003151
 80030dc:	08003151 	.word	0x08003151
 80030e0:	08003151 	.word	0x08003151
 80030e4:	0800311b 	.word	0x0800311b
 80030e8:	08003151 	.word	0x08003151
 80030ec:	08003151 	.word	0x08003151
 80030f0:	08003151 	.word	0x08003151
 80030f4:	0800312d 	.word	0x0800312d
 80030f8:	08003151 	.word	0x08003151
 80030fc:	08003151 	.word	0x08003151
 8003100:	08003151 	.word	0x08003151
 8003104:	0800313f 	.word	0x0800313f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0202 	orr.w	r2, r2, #2
 8003116:	60da      	str	r2, [r3, #12]
      break;
 8003118:	e01d      	b.n	8003156 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0204 	orr.w	r2, r2, #4
 8003128:	60da      	str	r2, [r3, #12]
      break;
 800312a:	e014      	b.n	8003156 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0208 	orr.w	r2, r2, #8
 800313a:	60da      	str	r2, [r3, #12]
      break;
 800313c:	e00b      	b.n	8003156 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0210 	orr.w	r2, r2, #16
 800314c:	60da      	str	r2, [r3, #12]
      break;
 800314e:	e002      	b.n	8003156 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      break;
 8003154:	bf00      	nop
  }

  if (status == HAL_OK)
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d16f      	bne.n	800323c <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	6839      	ldr	r1, [r7, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fde9 	bl	8003d3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a36      	ldr	r2, [pc, #216]	; (8003248 <HAL_TIM_PWM_Start_IT+0x284>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d013      	beq.n	800319c <HAL_TIM_PWM_Start_IT+0x1d8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a34      	ldr	r2, [pc, #208]	; (800324c <HAL_TIM_PWM_Start_IT+0x288>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00e      	beq.n	800319c <HAL_TIM_PWM_Start_IT+0x1d8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a33      	ldr	r2, [pc, #204]	; (8003250 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d009      	beq.n	800319c <HAL_TIM_PWM_Start_IT+0x1d8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a31      	ldr	r2, [pc, #196]	; (8003254 <HAL_TIM_PWM_Start_IT+0x290>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d004      	beq.n	800319c <HAL_TIM_PWM_Start_IT+0x1d8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a30      	ldr	r2, [pc, #192]	; (8003258 <HAL_TIM_PWM_Start_IT+0x294>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d101      	bne.n	80031a0 <HAL_TIM_PWM_Start_IT+0x1dc>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <HAL_TIM_PWM_Start_IT+0x1de>
 80031a0:	2300      	movs	r3, #0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <HAL_TIM_PWM_Start_IT+0x284>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01d      	beq.n	80031fc <HAL_TIM_PWM_Start_IT+0x238>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d018      	beq.n	80031fc <HAL_TIM_PWM_Start_IT+0x238>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a23      	ldr	r2, [pc, #140]	; (800325c <HAL_TIM_PWM_Start_IT+0x298>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <HAL_TIM_PWM_Start_IT+0x238>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a21      	ldr	r2, [pc, #132]	; (8003260 <HAL_TIM_PWM_Start_IT+0x29c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00e      	beq.n	80031fc <HAL_TIM_PWM_Start_IT+0x238>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a20      	ldr	r2, [pc, #128]	; (8003264 <HAL_TIM_PWM_Start_IT+0x2a0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_TIM_PWM_Start_IT+0x238>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_TIM_PWM_Start_IT+0x288>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_TIM_PWM_Start_IT+0x238>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a16      	ldr	r2, [pc, #88]	; (8003250 <HAL_TIM_PWM_Start_IT+0x28c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d115      	bne.n	8003228 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8003204:	4013      	ands	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b06      	cmp	r3, #6
 800320c:	d015      	beq.n	800323a <HAL_TIM_PWM_Start_IT+0x276>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003214:	d011      	beq.n	800323a <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003226:	e008      	b.n	800323a <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e000      	b.n	800323c <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40013400 	.word	0x40013400
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40000c00 	.word	0x40000c00
 8003268:	00010007 	.word	0x00010007

0800326c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d841      	bhi.n	8003304 <HAL_TIM_PWM_Stop_IT+0x98>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032bd 	.word	0x080032bd
 800328c:	08003305 	.word	0x08003305
 8003290:	08003305 	.word	0x08003305
 8003294:	08003305 	.word	0x08003305
 8003298:	080032cf 	.word	0x080032cf
 800329c:	08003305 	.word	0x08003305
 80032a0:	08003305 	.word	0x08003305
 80032a4:	08003305 	.word	0x08003305
 80032a8:	080032e1 	.word	0x080032e1
 80032ac:	08003305 	.word	0x08003305
 80032b0:	08003305 	.word	0x08003305
 80032b4:	08003305 	.word	0x08003305
 80032b8:	080032f3 	.word	0x080032f3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0202 	bic.w	r2, r2, #2
 80032ca:	60da      	str	r2, [r3, #12]
      break;
 80032cc:	e01d      	b.n	800330a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0204 	bic.w	r2, r2, #4
 80032dc:	60da      	str	r2, [r3, #12]
      break;
 80032de:	e014      	b.n	800330a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0208 	bic.w	r2, r2, #8
 80032ee:	60da      	str	r2, [r3, #12]
      break;
 80032f0:	e00b      	b.n	800330a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0210 	bic.w	r2, r2, #16
 8003300:	60da      	str	r2, [r3, #12]
      break;
 8003302:	e002      	b.n	800330a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      break;
 8003308:	bf00      	nop
  }

  if (status == HAL_OK)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 8081 	bne.w	8003414 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2200      	movs	r2, #0
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fd0e 	bl	8003d3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a3e      	ldr	r2, [pc, #248]	; (8003420 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <HAL_TIM_PWM_Stop_IT+0xe6>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a3d      	ldr	r2, [pc, #244]	; (8003424 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00e      	beq.n	8003352 <HAL_TIM_PWM_Stop_IT+0xe6>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d009      	beq.n	8003352 <HAL_TIM_PWM_Stop_IT+0xe6>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a3a      	ldr	r2, [pc, #232]	; (800342c <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d004      	beq.n	8003352 <HAL_TIM_PWM_Stop_IT+0xe6>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a38      	ldr	r2, [pc, #224]	; (8003430 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_TIM_PWM_Stop_IT+0xea>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_TIM_PWM_Stop_IT+0xec>
 8003356:	2300      	movs	r3, #0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d017      	beq.n	800338c <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	f241 1311 	movw	r3, #4369	; 0x1111
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10f      	bne.n	800338c <HAL_TIM_PWM_Stop_IT+0x120>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6a1a      	ldr	r2, [r3, #32]
 8003372:	f240 4344 	movw	r3, #1092	; 0x444
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <HAL_TIM_PWM_Stop_IT+0x120>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800338a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a1a      	ldr	r2, [r3, #32]
 8003392:	f241 1311 	movw	r3, #4369	; 0x1111
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10f      	bne.n	80033bc <HAL_TIM_PWM_Stop_IT+0x150>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	f240 4344 	movw	r3, #1092	; 0x444
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_TIM_PWM_Stop_IT+0x150>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d104      	bne.n	80033cc <HAL_TIM_PWM_Stop_IT+0x160>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ca:	e023      	b.n	8003414 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d104      	bne.n	80033dc <HAL_TIM_PWM_Stop_IT+0x170>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033da:	e01b      	b.n	8003414 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d104      	bne.n	80033ec <HAL_TIM_PWM_Stop_IT+0x180>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ea:	e013      	b.n	8003414 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d104      	bne.n	80033fc <HAL_TIM_PWM_Stop_IT+0x190>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033fa:	e00b      	b.n	8003414 <HAL_TIM_PWM_Stop_IT+0x1a8>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d104      	bne.n	800340c <HAL_TIM_PWM_Stop_IT+0x1a0>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800340a:	e003      	b.n	8003414 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40013400 	.word	0x40013400
 8003428:	40014000 	.word	0x40014000
 800342c:	40014400 	.word	0x40014400
 8003430:	40014800 	.word	0x40014800

08003434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800344e:	2302      	movs	r3, #2
 8003450:	e0ff      	b.n	8003652 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b14      	cmp	r3, #20
 800345e:	f200 80f0 	bhi.w	8003642 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003462:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003468:	080034bd 	.word	0x080034bd
 800346c:	08003643 	.word	0x08003643
 8003470:	08003643 	.word	0x08003643
 8003474:	08003643 	.word	0x08003643
 8003478:	080034fd 	.word	0x080034fd
 800347c:	08003643 	.word	0x08003643
 8003480:	08003643 	.word	0x08003643
 8003484:	08003643 	.word	0x08003643
 8003488:	0800353f 	.word	0x0800353f
 800348c:	08003643 	.word	0x08003643
 8003490:	08003643 	.word	0x08003643
 8003494:	08003643 	.word	0x08003643
 8003498:	0800357f 	.word	0x0800357f
 800349c:	08003643 	.word	0x08003643
 80034a0:	08003643 	.word	0x08003643
 80034a4:	08003643 	.word	0x08003643
 80034a8:	080035c1 	.word	0x080035c1
 80034ac:	08003643 	.word	0x08003643
 80034b0:	08003643 	.word	0x08003643
 80034b4:	08003643 	.word	0x08003643
 80034b8:	08003601 	.word	0x08003601
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f964 	bl	8003790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0208 	orr.w	r2, r2, #8
 80034d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0204 	bic.w	r2, r2, #4
 80034e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6999      	ldr	r1, [r3, #24]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	619a      	str	r2, [r3, #24]
      break;
 80034fa:	e0a5      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f9d4 	bl	80038b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6999      	ldr	r1, [r3, #24]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	021a      	lsls	r2, r3, #8
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	619a      	str	r2, [r3, #24]
      break;
 800353c:	e084      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fa3d 	bl	80039c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0208 	orr.w	r2, r2, #8
 8003558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0204 	bic.w	r2, r2, #4
 8003568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69d9      	ldr	r1, [r3, #28]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	61da      	str	r2, [r3, #28]
      break;
 800357c:	e064      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 faa5 	bl	8003ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69d9      	ldr	r1, [r3, #28]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	021a      	lsls	r2, r3, #8
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	61da      	str	r2, [r3, #28]
      break;
 80035be:	e043      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 faee 	bl	8003ba8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0208 	orr.w	r2, r2, #8
 80035da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0204 	bic.w	r2, r2, #4
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035fe:	e023      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fb32 	bl	8003c70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800361a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	021a      	lsls	r2, r3, #8
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003640:	e002      	b.n	8003648 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
      break;
 8003646:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003650:	7dfb      	ldrb	r3, [r7, #23]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop

0800365c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a40      	ldr	r2, [pc, #256]	; (8003770 <TIM_Base_SetConfig+0x114>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d013      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367a:	d00f      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a3d      	ldr	r2, [pc, #244]	; (8003774 <TIM_Base_SetConfig+0x118>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00b      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a3c      	ldr	r2, [pc, #240]	; (8003778 <TIM_Base_SetConfig+0x11c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a3b      	ldr	r2, [pc, #236]	; (800377c <TIM_Base_SetConfig+0x120>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0x40>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a3a      	ldr	r2, [pc, #232]	; (8003780 <TIM_Base_SetConfig+0x124>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2f      	ldr	r2, [pc, #188]	; (8003770 <TIM_Base_SetConfig+0x114>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01f      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d01b      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2c      	ldr	r2, [pc, #176]	; (8003774 <TIM_Base_SetConfig+0x118>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d017      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a2b      	ldr	r2, [pc, #172]	; (8003778 <TIM_Base_SetConfig+0x11c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a2a      	ldr	r2, [pc, #168]	; (800377c <TIM_Base_SetConfig+0x120>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00f      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a29      	ldr	r2, [pc, #164]	; (8003780 <TIM_Base_SetConfig+0x124>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a28      	ldr	r2, [pc, #160]	; (8003784 <TIM_Base_SetConfig+0x128>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a27      	ldr	r2, [pc, #156]	; (8003788 <TIM_Base_SetConfig+0x12c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d003      	beq.n	80036f6 <TIM_Base_SetConfig+0x9a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a26      	ldr	r2, [pc, #152]	; (800378c <TIM_Base_SetConfig+0x130>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d108      	bne.n	8003708 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <TIM_Base_SetConfig+0x114>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00f      	beq.n	8003754 <TIM_Base_SetConfig+0xf8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a12      	ldr	r2, [pc, #72]	; (8003780 <TIM_Base_SetConfig+0x124>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00b      	beq.n	8003754 <TIM_Base_SetConfig+0xf8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a11      	ldr	r2, [pc, #68]	; (8003784 <TIM_Base_SetConfig+0x128>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <TIM_Base_SetConfig+0xf8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a10      	ldr	r2, [pc, #64]	; (8003788 <TIM_Base_SetConfig+0x12c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_Base_SetConfig+0xf8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0f      	ldr	r2, [pc, #60]	; (800378c <TIM_Base_SetConfig+0x130>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d103      	bne.n	800375c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	615a      	str	r2, [r3, #20]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40013400 	.word	0x40013400
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800

08003790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f023 0201 	bic.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 0302 	bic.w	r3, r3, #2
 80037dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a2c      	ldr	r2, [pc, #176]	; (800389c <TIM_OC1_SetConfig+0x10c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00f      	beq.n	8003810 <TIM_OC1_SetConfig+0x80>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a2b      	ldr	r2, [pc, #172]	; (80038a0 <TIM_OC1_SetConfig+0x110>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00b      	beq.n	8003810 <TIM_OC1_SetConfig+0x80>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a2a      	ldr	r2, [pc, #168]	; (80038a4 <TIM_OC1_SetConfig+0x114>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d007      	beq.n	8003810 <TIM_OC1_SetConfig+0x80>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a29      	ldr	r2, [pc, #164]	; (80038a8 <TIM_OC1_SetConfig+0x118>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_OC1_SetConfig+0x80>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a28      	ldr	r2, [pc, #160]	; (80038ac <TIM_OC1_SetConfig+0x11c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10c      	bne.n	800382a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0308 	bic.w	r3, r3, #8
 8003816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f023 0304 	bic.w	r3, r3, #4
 8003828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a1b      	ldr	r2, [pc, #108]	; (800389c <TIM_OC1_SetConfig+0x10c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00f      	beq.n	8003852 <TIM_OC1_SetConfig+0xc2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1a      	ldr	r2, [pc, #104]	; (80038a0 <TIM_OC1_SetConfig+0x110>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00b      	beq.n	8003852 <TIM_OC1_SetConfig+0xc2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <TIM_OC1_SetConfig+0x114>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <TIM_OC1_SetConfig+0xc2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <TIM_OC1_SetConfig+0x118>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d003      	beq.n	8003852 <TIM_OC1_SetConfig+0xc2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a17      	ldr	r2, [pc, #92]	; (80038ac <TIM_OC1_SetConfig+0x11c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d111      	bne.n	8003876 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	621a      	str	r2, [r3, #32]
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40013400 	.word	0x40013400
 80038a4:	40014000 	.word	0x40014000
 80038a8:	40014400 	.word	0x40014400
 80038ac:	40014800 	.word	0x40014800

080038b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f023 0210 	bic.w	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0320 	bic.w	r3, r3, #32
 80038fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a28      	ldr	r2, [pc, #160]	; (80039b0 <TIM_OC2_SetConfig+0x100>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_OC2_SetConfig+0x6c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a27      	ldr	r2, [pc, #156]	; (80039b4 <TIM_OC2_SetConfig+0x104>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d10d      	bne.n	8003938 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003936:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a1d      	ldr	r2, [pc, #116]	; (80039b0 <TIM_OC2_SetConfig+0x100>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00f      	beq.n	8003960 <TIM_OC2_SetConfig+0xb0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <TIM_OC2_SetConfig+0x104>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00b      	beq.n	8003960 <TIM_OC2_SetConfig+0xb0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a1b      	ldr	r2, [pc, #108]	; (80039b8 <TIM_OC2_SetConfig+0x108>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d007      	beq.n	8003960 <TIM_OC2_SetConfig+0xb0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a1a      	ldr	r2, [pc, #104]	; (80039bc <TIM_OC2_SetConfig+0x10c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <TIM_OC2_SetConfig+0xb0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a19      	ldr	r2, [pc, #100]	; (80039c0 <TIM_OC2_SetConfig+0x110>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d113      	bne.n	8003988 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40013400 	.word	0x40013400
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800

080039c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a27      	ldr	r2, [pc, #156]	; (8003ac0 <TIM_OC3_SetConfig+0xfc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_OC3_SetConfig+0x6a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <TIM_OC3_SetConfig+0x100>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10d      	bne.n	8003a4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <TIM_OC3_SetConfig+0xfc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00f      	beq.n	8003a72 <TIM_OC3_SetConfig+0xae>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <TIM_OC3_SetConfig+0x100>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <TIM_OC3_SetConfig+0xae>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1a      	ldr	r2, [pc, #104]	; (8003ac8 <TIM_OC3_SetConfig+0x104>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <TIM_OC3_SetConfig+0xae>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a19      	ldr	r2, [pc, #100]	; (8003acc <TIM_OC3_SetConfig+0x108>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_OC3_SetConfig+0xae>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <TIM_OC3_SetConfig+0x10c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d113      	bne.n	8003a9a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	031b      	lsls	r3, r3, #12
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <TIM_OC4_SetConfig+0xc0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00f      	beq.n	8003b58 <TIM_OC4_SetConfig+0x84>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <TIM_OC4_SetConfig+0xc4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00b      	beq.n	8003b58 <TIM_OC4_SetConfig+0x84>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <TIM_OC4_SetConfig+0xc8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d007      	beq.n	8003b58 <TIM_OC4_SetConfig+0x84>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a15      	ldr	r2, [pc, #84]	; (8003ba0 <TIM_OC4_SetConfig+0xcc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_OC4_SetConfig+0x84>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <TIM_OC4_SetConfig+0xd0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d109      	bne.n	8003b6c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	019b      	lsls	r3, r3, #6
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	40013400 	.word	0x40013400
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40014400 	.word	0x40014400
 8003ba4:	40014800 	.word	0x40014800

08003ba8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003bec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <TIM_OC5_SetConfig+0xb4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00f      	beq.n	8003c22 <TIM_OC5_SetConfig+0x7a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <TIM_OC5_SetConfig+0xb8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00b      	beq.n	8003c22 <TIM_OC5_SetConfig+0x7a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <TIM_OC5_SetConfig+0xbc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d007      	beq.n	8003c22 <TIM_OC5_SetConfig+0x7a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <TIM_OC5_SetConfig+0xc0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d003      	beq.n	8003c22 <TIM_OC5_SetConfig+0x7a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <TIM_OC5_SetConfig+0xc4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d109      	bne.n	8003c36 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	621a      	str	r2, [r3, #32]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40013400 	.word	0x40013400
 8003c64:	40014000 	.word	0x40014000
 8003c68:	40014400 	.word	0x40014400
 8003c6c:	40014800 	.word	0x40014800

08003c70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	051b      	lsls	r3, r3, #20
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <TIM_OC6_SetConfig+0xb8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00f      	beq.n	8003cec <TIM_OC6_SetConfig+0x7c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <TIM_OC6_SetConfig+0xbc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00b      	beq.n	8003cec <TIM_OC6_SetConfig+0x7c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <TIM_OC6_SetConfig+0xc0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d007      	beq.n	8003cec <TIM_OC6_SetConfig+0x7c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <TIM_OC6_SetConfig+0xc4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC6_SetConfig+0x7c>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <TIM_OC6_SetConfig+0xc8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d109      	bne.n	8003d00 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	029b      	lsls	r3, r3, #10
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40013400 	.word	0x40013400
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800

08003d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	2201      	movs	r2, #1
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1a      	ldr	r2, [r3, #32]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	401a      	ands	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	fa01 f303 	lsl.w	r3, r1, r3
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e068      	b.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2e      	ldr	r2, [pc, #184]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2d      	ldr	r2, [pc, #180]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d108      	bne.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1e      	ldr	r2, [pc, #120]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01d      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d018      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1a      	ldr	r2, [pc, #104]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10c      	bne.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40013400 	.word	0x40013400
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40014000 	.word	0x40014000

08003e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e040      	b.n	8003f2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fc fe0a 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	; 0x24
 8003ec4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fc94 	bl	8004804 <UART_SetConfig>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e022      	b.n	8003f2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 ff40 	bl	8004d74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 ffc7 	bl	8004eb8 <UART_CheckIdleState>
 8003f2a:	4603      	mov	r3, r0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	f040 8082 	bne.w	8004052 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <HAL_UART_Transmit+0x26>
 8003f54:	88fb      	ldrh	r3, [r7, #6]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e07a      	b.n	8004054 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_UART_Transmit+0x38>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e073      	b.n	8004054 <HAL_UART_Transmit+0x120>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2221      	movs	r2, #33	; 0x21
 8003f80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f82:	f7fc ffdb 	bl	8000f3c <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	88fa      	ldrh	r2, [r7, #6]
 8003f94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa0:	d108      	bne.n	8003fb4 <HAL_UART_Transmit+0x80>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d104      	bne.n	8003fb4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	e003      	b.n	8003fbc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003fc4:	e02d      	b.n	8004022 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2180      	movs	r1, #128	; 0x80
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 ffba 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e039      	b.n	8004054 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10b      	bne.n	8003ffe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	881a      	ldrh	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff2:	b292      	uxth	r2, r2
 8003ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	e008      	b.n	8004010 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	b292      	uxth	r2, r2
 8004008:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1cb      	bne.n	8003fc6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2200      	movs	r2, #0
 8004036:	2140      	movs	r1, #64	; 0x40
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 ff86 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e005      	b.n	8004054 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	e000      	b.n	8004054 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004052:	2302      	movs	r3, #2
  }
}
 8004054:	4618      	mov	r0, r3
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004070:	2b20      	cmp	r3, #32
 8004072:	f040 80bf 	bne.w	80041f4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_UART_Receive+0x26>
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e0b7      	b.n	80041f6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_UART_Receive+0x38>
 8004090:	2302      	movs	r3, #2
 8004092:	e0b0      	b.n	80041f6 <HAL_UART_Receive+0x19a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2222      	movs	r2, #34	; 0x22
 80040a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b0:	f7fc ff44 	bl	8000f3c <HAL_GetTick>
 80040b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	88fa      	ldrh	r2, [r7, #6]
 80040ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ce:	d10e      	bne.n	80040ee <HAL_UART_Receive+0x92>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d105      	bne.n	80040e4 <HAL_UART_Receive+0x88>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040e2:	e02d      	b.n	8004140 <HAL_UART_Receive+0xe4>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	22ff      	movs	r2, #255	; 0xff
 80040e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ec:	e028      	b.n	8004140 <HAL_UART_Receive+0xe4>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10d      	bne.n	8004112 <HAL_UART_Receive+0xb6>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <HAL_UART_Receive+0xac>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	22ff      	movs	r2, #255	; 0xff
 8004102:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004106:	e01b      	b.n	8004140 <HAL_UART_Receive+0xe4>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	227f      	movs	r2, #127	; 0x7f
 800410c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004110:	e016      	b.n	8004140 <HAL_UART_Receive+0xe4>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800411a:	d10d      	bne.n	8004138 <HAL_UART_Receive+0xdc>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <HAL_UART_Receive+0xd2>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	227f      	movs	r2, #127	; 0x7f
 8004128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800412c:	e008      	b.n	8004140 <HAL_UART_Receive+0xe4>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	223f      	movs	r2, #63	; 0x3f
 8004132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004136:	e003      	b.n	8004140 <HAL_UART_Receive+0xe4>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004146:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004150:	d108      	bne.n	8004164 <HAL_UART_Receive+0x108>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	e003      	b.n	800416c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004174:	e033      	b.n	80041de <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	2120      	movs	r1, #32
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fee2 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e032      	b.n	80041f6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10c      	bne.n	80041b0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800419c:	b29a      	uxth	r2, r3
 800419e:	8a7b      	ldrh	r3, [r7, #18]
 80041a0:	4013      	ands	r3, r2
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	3302      	adds	r3, #2
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	e00d      	b.n	80041cc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	8a7b      	ldrh	r3, [r7, #18]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	4013      	ands	r3, r2
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3301      	adds	r3, #1
 80041ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1c5      	bne.n	8004176 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e000      	b.n	80041f6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3720      	adds	r7, #32
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b0ba      	sub	sp, #232	; 0xe8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004226:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800422a:	f640 030f 	movw	r3, #2063	; 0x80f
 800422e:	4013      	ands	r3, r2
 8004230:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d115      	bne.n	8004268 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800423c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00f      	beq.n	8004268 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 82a6 	beq.w	80047aa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	4798      	blx	r3
      }
      return;
 8004266:	e2a0      	b.n	80047aa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004268:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8117 	beq.w	80044a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800427e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004282:	4b85      	ldr	r3, [pc, #532]	; (8004498 <HAL_UART_IRQHandler+0x298>)
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 810a 	beq.w	80044a0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d011      	beq.n	80042bc <HAL_UART_IRQHandler+0xbc>
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2201      	movs	r2, #1
 80042aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b2:	f043 0201 	orr.w	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d011      	beq.n	80042ec <HAL_UART_IRQHandler+0xec>
 80042c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00b      	beq.n	80042ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2202      	movs	r2, #2
 80042da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e2:	f043 0204 	orr.w	r2, r3, #4
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d011      	beq.n	800431c <HAL_UART_IRQHandler+0x11c>
 80042f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00b      	beq.n	800431c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2204      	movs	r2, #4
 800430a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004312:	f043 0202 	orr.w	r2, r3, #2
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800431c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d017      	beq.n	8004358 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004338:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00b      	beq.n	8004358 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2208      	movs	r2, #8
 8004346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800434e:	f043 0208 	orr.w	r2, r3, #8
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004360:	2b00      	cmp	r3, #0
 8004362:	d012      	beq.n	800438a <HAL_UART_IRQHandler+0x18a>
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00c      	beq.n	800438a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 820c 	beq.w	80047ae <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d005      	beq.n	80043e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d04f      	beq.n	8004482 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fe75 	bl	80050d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d141      	bne.n	800447a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3308      	adds	r3, #8
 80043fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800440c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3308      	adds	r3, #8
 800441e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004422:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800442e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800443a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1d9      	bne.n	80043f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	2b00      	cmp	r3, #0
 8004448:	d013      	beq.n	8004472 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a13      	ldr	r2, [pc, #76]	; (800449c <HAL_UART_IRQHandler+0x29c>)
 8004450:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc fecb 	bl	80011f2 <HAL_DMA_Abort_IT>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d017      	beq.n	8004492 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800446c:	4610      	mov	r0, r2
 800446e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004470:	e00f      	b.n	8004492 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f9b0 	bl	80047d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004478:	e00b      	b.n	8004492 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f9ac 	bl	80047d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004480:	e007      	b.n	8004492 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f9a8 	bl	80047d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004490:	e18d      	b.n	80047ae <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004492:	bf00      	nop
    return;
 8004494:	e18b      	b.n	80047ae <HAL_UART_IRQHandler+0x5ae>
 8004496:	bf00      	nop
 8004498:	04000120 	.word	0x04000120
 800449c:	08005199 	.word	0x08005199

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	f040 8146 	bne.w	8004736 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 813f 	beq.w	8004736 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8138 	beq.w	8004736 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2210      	movs	r2, #16
 80044cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	f040 80b4 	bne.w	8004646 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 815f 	beq.w	80047b2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044fe:	429a      	cmp	r2, r3
 8004500:	f080 8157 	bcs.w	80047b2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800450a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 8085 	bne.w	800462a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800453c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800454a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800454e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004556:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1da      	bne.n	8004520 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3308      	adds	r3, #8
 8004570:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800457a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3308      	adds	r3, #8
 800458a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800458e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004592:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004596:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e1      	bne.n	800456a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3308      	adds	r3, #8
 80045ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3308      	adds	r3, #8
 80045c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e3      	bne.n	80045a6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045fa:	f023 0310 	bic.w	r3, r3, #16
 80045fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800460c:	65bb      	str	r3, [r7, #88]	; 0x58
 800460e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004612:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800461a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e4      	bne.n	80045ea <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4618      	mov	r0, r3
 8004626:	f7fc fda6 	bl	8001176 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004636:	b29b      	uxth	r3, r3
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	b29b      	uxth	r3, r3
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8d4 	bl	80047ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004644:	e0b5      	b.n	80047b2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004652:	b29b      	uxth	r3, r3
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 80a7 	beq.w	80047b6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80a2 	beq.w	80047b6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
 8004696:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800469a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e4      	bne.n	8004672 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3308      	adds	r3, #8
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	623b      	str	r3, [r7, #32]
   return(result);
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3308      	adds	r3, #8
 80046c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046cc:	633a      	str	r2, [r7, #48]	; 0x30
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e3      	bne.n	80046a8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0310 	bic.w	r3, r3, #16
 8004706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	69b9      	ldr	r1, [r7, #24]
 800471a:	69fa      	ldr	r2, [r7, #28]
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	617b      	str	r3, [r7, #20]
   return(result);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e4      	bne.n	80046f2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f85c 	bl	80047ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004734:	e03f      	b.n	80047b6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00e      	beq.n	8004760 <HAL_UART_IRQHandler+0x560>
 8004742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004756:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fd5d 	bl	8005218 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800475e:	e02d      	b.n	80047bc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00e      	beq.n	800478a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01c      	beq.n	80047ba <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
    }
    return;
 8004788:	e017      	b.n	80047ba <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d012      	beq.n	80047bc <HAL_UART_IRQHandler+0x5bc>
 8004796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00c      	beq.n	80047bc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fd0e 	bl	80051c4 <UART_EndTransmit_IT>
    return;
 80047a8:	e008      	b.n	80047bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80047aa:	bf00      	nop
 80047ac:	e006      	b.n	80047bc <HAL_UART_IRQHandler+0x5bc>
    return;
 80047ae:	bf00      	nop
 80047b0:	e004      	b.n	80047bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80047b2:	bf00      	nop
 80047b4:	e002      	b.n	80047bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80047b6:	bf00      	nop
 80047b8:	e000      	b.n	80047bc <HAL_UART_IRQHandler+0x5bc>
    return;
 80047ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80047bc:	37e8      	adds	r7, #232	; 0xe8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop

080047c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004808:	b08a      	sub	sp, #40	; 0x28
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	431a      	orrs	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	431a      	orrs	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	4313      	orrs	r3, r2
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4ba4      	ldr	r3, [pc, #656]	; (8004ac4 <UART_SetConfig+0x2c0>)
 8004834:	4013      	ands	r3, r2
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800483c:	430b      	orrs	r3, r1
 800483e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a99      	ldr	r2, [pc, #612]	; (8004ac8 <UART_SetConfig+0x2c4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486c:	4313      	orrs	r3, r2
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a90      	ldr	r2, [pc, #576]	; (8004acc <UART_SetConfig+0x2c8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d126      	bne.n	80048dc <UART_SetConfig+0xd8>
 800488e:	4b90      	ldr	r3, [pc, #576]	; (8004ad0 <UART_SetConfig+0x2cc>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b03      	cmp	r3, #3
 800489a:	d81b      	bhi.n	80048d4 <UART_SetConfig+0xd0>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <UART_SetConfig+0xa0>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048b5 	.word	0x080048b5
 80048a8:	080048c5 	.word	0x080048c5
 80048ac:	080048bd 	.word	0x080048bd
 80048b0:	080048cd 	.word	0x080048cd
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ba:	e116      	b.n	8004aea <UART_SetConfig+0x2e6>
 80048bc:	2302      	movs	r3, #2
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c2:	e112      	b.n	8004aea <UART_SetConfig+0x2e6>
 80048c4:	2304      	movs	r3, #4
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ca:	e10e      	b.n	8004aea <UART_SetConfig+0x2e6>
 80048cc:	2308      	movs	r3, #8
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d2:	e10a      	b.n	8004aea <UART_SetConfig+0x2e6>
 80048d4:	2310      	movs	r3, #16
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048da:	e106      	b.n	8004aea <UART_SetConfig+0x2e6>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a7c      	ldr	r2, [pc, #496]	; (8004ad4 <UART_SetConfig+0x2d0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d138      	bne.n	8004958 <UART_SetConfig+0x154>
 80048e6:	4b7a      	ldr	r3, [pc, #488]	; (8004ad0 <UART_SetConfig+0x2cc>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f003 030c 	and.w	r3, r3, #12
 80048f0:	2b0c      	cmp	r3, #12
 80048f2:	d82d      	bhi.n	8004950 <UART_SetConfig+0x14c>
 80048f4:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <UART_SetConfig+0xf8>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	08004931 	.word	0x08004931
 8004900:	08004951 	.word	0x08004951
 8004904:	08004951 	.word	0x08004951
 8004908:	08004951 	.word	0x08004951
 800490c:	08004941 	.word	0x08004941
 8004910:	08004951 	.word	0x08004951
 8004914:	08004951 	.word	0x08004951
 8004918:	08004951 	.word	0x08004951
 800491c:	08004939 	.word	0x08004939
 8004920:	08004951 	.word	0x08004951
 8004924:	08004951 	.word	0x08004951
 8004928:	08004951 	.word	0x08004951
 800492c:	08004949 	.word	0x08004949
 8004930:	2300      	movs	r3, #0
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004936:	e0d8      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004938:	2302      	movs	r3, #2
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493e:	e0d4      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004940:	2304      	movs	r3, #4
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004946:	e0d0      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004948:	2308      	movs	r3, #8
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494e:	e0cc      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004950:	2310      	movs	r3, #16
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004956:	e0c8      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a5e      	ldr	r2, [pc, #376]	; (8004ad8 <UART_SetConfig+0x2d4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d125      	bne.n	80049ae <UART_SetConfig+0x1aa>
 8004962:	4b5b      	ldr	r3, [pc, #364]	; (8004ad0 <UART_SetConfig+0x2cc>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800496c:	2b30      	cmp	r3, #48	; 0x30
 800496e:	d016      	beq.n	800499e <UART_SetConfig+0x19a>
 8004970:	2b30      	cmp	r3, #48	; 0x30
 8004972:	d818      	bhi.n	80049a6 <UART_SetConfig+0x1a2>
 8004974:	2b20      	cmp	r3, #32
 8004976:	d00a      	beq.n	800498e <UART_SetConfig+0x18a>
 8004978:	2b20      	cmp	r3, #32
 800497a:	d814      	bhi.n	80049a6 <UART_SetConfig+0x1a2>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <UART_SetConfig+0x182>
 8004980:	2b10      	cmp	r3, #16
 8004982:	d008      	beq.n	8004996 <UART_SetConfig+0x192>
 8004984:	e00f      	b.n	80049a6 <UART_SetConfig+0x1a2>
 8004986:	2300      	movs	r3, #0
 8004988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498c:	e0ad      	b.n	8004aea <UART_SetConfig+0x2e6>
 800498e:	2302      	movs	r3, #2
 8004990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004994:	e0a9      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004996:	2304      	movs	r3, #4
 8004998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499c:	e0a5      	b.n	8004aea <UART_SetConfig+0x2e6>
 800499e:	2308      	movs	r3, #8
 80049a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a4:	e0a1      	b.n	8004aea <UART_SetConfig+0x2e6>
 80049a6:	2310      	movs	r3, #16
 80049a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ac:	e09d      	b.n	8004aea <UART_SetConfig+0x2e6>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a4a      	ldr	r2, [pc, #296]	; (8004adc <UART_SetConfig+0x2d8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d125      	bne.n	8004a04 <UART_SetConfig+0x200>
 80049b8:	4b45      	ldr	r3, [pc, #276]	; (8004ad0 <UART_SetConfig+0x2cc>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049c2:	2bc0      	cmp	r3, #192	; 0xc0
 80049c4:	d016      	beq.n	80049f4 <UART_SetConfig+0x1f0>
 80049c6:	2bc0      	cmp	r3, #192	; 0xc0
 80049c8:	d818      	bhi.n	80049fc <UART_SetConfig+0x1f8>
 80049ca:	2b80      	cmp	r3, #128	; 0x80
 80049cc:	d00a      	beq.n	80049e4 <UART_SetConfig+0x1e0>
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d814      	bhi.n	80049fc <UART_SetConfig+0x1f8>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <UART_SetConfig+0x1d8>
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d008      	beq.n	80049ec <UART_SetConfig+0x1e8>
 80049da:	e00f      	b.n	80049fc <UART_SetConfig+0x1f8>
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e2:	e082      	b.n	8004aea <UART_SetConfig+0x2e6>
 80049e4:	2302      	movs	r3, #2
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ea:	e07e      	b.n	8004aea <UART_SetConfig+0x2e6>
 80049ec:	2304      	movs	r3, #4
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f2:	e07a      	b.n	8004aea <UART_SetConfig+0x2e6>
 80049f4:	2308      	movs	r3, #8
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fa:	e076      	b.n	8004aea <UART_SetConfig+0x2e6>
 80049fc:	2310      	movs	r3, #16
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a02:	e072      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a35      	ldr	r2, [pc, #212]	; (8004ae0 <UART_SetConfig+0x2dc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d12a      	bne.n	8004a64 <UART_SetConfig+0x260>
 8004a0e:	4b30      	ldr	r3, [pc, #192]	; (8004ad0 <UART_SetConfig+0x2cc>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1c:	d01a      	beq.n	8004a54 <UART_SetConfig+0x250>
 8004a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a22:	d81b      	bhi.n	8004a5c <UART_SetConfig+0x258>
 8004a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a28:	d00c      	beq.n	8004a44 <UART_SetConfig+0x240>
 8004a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a2e:	d815      	bhi.n	8004a5c <UART_SetConfig+0x258>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <UART_SetConfig+0x238>
 8004a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a38:	d008      	beq.n	8004a4c <UART_SetConfig+0x248>
 8004a3a:	e00f      	b.n	8004a5c <UART_SetConfig+0x258>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a42:	e052      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004a44:	2302      	movs	r3, #2
 8004a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4a:	e04e      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a52:	e04a      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004a54:	2308      	movs	r3, #8
 8004a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5a:	e046      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a62:	e042      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <UART_SetConfig+0x2c4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d13a      	bne.n	8004ae4 <UART_SetConfig+0x2e0>
 8004a6e:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <UART_SetConfig+0x2cc>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a7c:	d01a      	beq.n	8004ab4 <UART_SetConfig+0x2b0>
 8004a7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a82:	d81b      	bhi.n	8004abc <UART_SetConfig+0x2b8>
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a88:	d00c      	beq.n	8004aa4 <UART_SetConfig+0x2a0>
 8004a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a8e:	d815      	bhi.n	8004abc <UART_SetConfig+0x2b8>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <UART_SetConfig+0x298>
 8004a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a98:	d008      	beq.n	8004aac <UART_SetConfig+0x2a8>
 8004a9a:	e00f      	b.n	8004abc <UART_SetConfig+0x2b8>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa2:	e022      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aaa:	e01e      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004aac:	2304      	movs	r3, #4
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab2:	e01a      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004ab4:	2308      	movs	r3, #8
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aba:	e016      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004abc:	2310      	movs	r3, #16
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac2:	e012      	b.n	8004aea <UART_SetConfig+0x2e6>
 8004ac4:	efff69f3 	.word	0xefff69f3
 8004ac8:	40008000 	.word	0x40008000
 8004acc:	40013800 	.word	0x40013800
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40004400 	.word	0x40004400
 8004ad8:	40004800 	.word	0x40004800
 8004adc:	40004c00 	.word	0x40004c00
 8004ae0:	40005000 	.word	0x40005000
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a9f      	ldr	r2, [pc, #636]	; (8004d6c <UART_SetConfig+0x568>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d17a      	bne.n	8004bea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d824      	bhi.n	8004b46 <UART_SetConfig+0x342>
 8004afc:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <UART_SetConfig+0x300>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b29 	.word	0x08004b29
 8004b08:	08004b47 	.word	0x08004b47
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b47 	.word	0x08004b47
 8004b14:	08004b37 	.word	0x08004b37
 8004b18:	08004b47 	.word	0x08004b47
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b47 	.word	0x08004b47
 8004b24:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b28:	f7fd fb3e 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8004b2c:	61f8      	str	r0, [r7, #28]
        break;
 8004b2e:	e010      	b.n	8004b52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b8f      	ldr	r3, [pc, #572]	; (8004d70 <UART_SetConfig+0x56c>)
 8004b32:	61fb      	str	r3, [r7, #28]
        break;
 8004b34:	e00d      	b.n	8004b52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fd fa9f 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8004b3a:	61f8      	str	r0, [r7, #28]
        break;
 8004b3c:	e009      	b.n	8004b52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b42:	61fb      	str	r3, [r7, #28]
        break;
 8004b44:	e005      	b.n	8004b52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80fb 	beq.w	8004d50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d305      	bcc.n	8004b76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d903      	bls.n	8004b7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b7c:	e0e8      	b.n	8004d50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	2200      	movs	r2, #0
 8004b82:	461c      	mov	r4, r3
 8004b84:	4615      	mov	r5, r2
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	022b      	lsls	r3, r5, #8
 8004b90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b94:	0222      	lsls	r2, r4, #8
 8004b96:	68f9      	ldr	r1, [r7, #12]
 8004b98:	6849      	ldr	r1, [r1, #4]
 8004b9a:	0849      	lsrs	r1, r1, #1
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	4688      	mov	r8, r1
 8004ba0:	4681      	mov	r9, r0
 8004ba2:	eb12 0a08 	adds.w	sl, r2, r8
 8004ba6:	eb43 0b09 	adc.w	fp, r3, r9
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bb8:	4650      	mov	r0, sl
 8004bba:	4659      	mov	r1, fp
 8004bbc:	f7fb fb68 	bl	8000290 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bce:	d308      	bcc.n	8004be2 <UART_SetConfig+0x3de>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd6:	d204      	bcs.n	8004be2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	60da      	str	r2, [r3, #12]
 8004be0:	e0b6      	b.n	8004d50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004be8:	e0b2      	b.n	8004d50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf2:	d15e      	bne.n	8004cb2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d828      	bhi.n	8004c4e <UART_SetConfig+0x44a>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <UART_SetConfig+0x400>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c31 	.word	0x08004c31
 8004c0c:	08004c39 	.word	0x08004c39
 8004c10:	08004c4f 	.word	0x08004c4f
 8004c14:	08004c3f 	.word	0x08004c3f
 8004c18:	08004c4f 	.word	0x08004c4f
 8004c1c:	08004c4f 	.word	0x08004c4f
 8004c20:	08004c4f 	.word	0x08004c4f
 8004c24:	08004c47 	.word	0x08004c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7fd fabe 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	61f8      	str	r0, [r7, #28]
        break;
 8004c2e:	e014      	b.n	8004c5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c30:	f7fd fad0 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 8004c34:	61f8      	str	r0, [r7, #28]
        break;
 8004c36:	e010      	b.n	8004c5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c38:	4b4d      	ldr	r3, [pc, #308]	; (8004d70 <UART_SetConfig+0x56c>)
 8004c3a:	61fb      	str	r3, [r7, #28]
        break;
 8004c3c:	e00d      	b.n	8004c5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3e:	f7fd fa1b 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8004c42:	61f8      	str	r0, [r7, #28]
        break;
 8004c44:	e009      	b.n	8004c5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c4a:	61fb      	str	r3, [r7, #28]
        break;
 8004c4c:	e005      	b.n	8004c5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d077      	beq.n	8004d50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	005a      	lsls	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	085b      	lsrs	r3, r3, #1
 8004c6a:	441a      	add	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b0f      	cmp	r3, #15
 8004c7a:	d916      	bls.n	8004caa <UART_SetConfig+0x4a6>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c82:	d212      	bcs.n	8004caa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f023 030f 	bic.w	r3, r3, #15
 8004c8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	8afb      	ldrh	r3, [r7, #22]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	8afa      	ldrh	r2, [r7, #22]
 8004ca6:	60da      	str	r2, [r3, #12]
 8004ca8:	e052      	b.n	8004d50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cb0:	e04e      	b.n	8004d50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d827      	bhi.n	8004d0a <UART_SetConfig+0x506>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <UART_SetConfig+0x4bc>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004cf5 	.word	0x08004cf5
 8004ccc:	08004d0b 	.word	0x08004d0b
 8004cd0:	08004cfb 	.word	0x08004cfb
 8004cd4:	08004d0b 	.word	0x08004d0b
 8004cd8:	08004d0b 	.word	0x08004d0b
 8004cdc:	08004d0b 	.word	0x08004d0b
 8004ce0:	08004d03 	.word	0x08004d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f7fd fa60 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8004ce8:	61f8      	str	r0, [r7, #28]
        break;
 8004cea:	e014      	b.n	8004d16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cec:	f7fd fa72 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 8004cf0:	61f8      	str	r0, [r7, #28]
        break;
 8004cf2:	e010      	b.n	8004d16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf4:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <UART_SetConfig+0x56c>)
 8004cf6:	61fb      	str	r3, [r7, #28]
        break;
 8004cf8:	e00d      	b.n	8004d16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfa:	f7fd f9bd 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8004cfe:	61f8      	str	r0, [r7, #28]
        break;
 8004d00:	e009      	b.n	8004d16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d06:	61fb      	str	r3, [r7, #28]
        break;
 8004d08:	e005      	b.n	8004d16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d14:	bf00      	nop
    }

    if (pclk != 0U)
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d019      	beq.n	8004d50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	085a      	lsrs	r2, r3, #1
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	441a      	add	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b0f      	cmp	r3, #15
 8004d34:	d909      	bls.n	8004d4a <UART_SetConfig+0x546>
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3c:	d205      	bcs.n	8004d4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60da      	str	r2, [r3, #12]
 8004d48:	e002      	b.n	8004d50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3728      	adds	r7, #40	; 0x28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40008000 	.word	0x40008000
 8004d70:	00f42400 	.word	0x00f42400

08004d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01a      	beq.n	8004e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e72:	d10a      	bne.n	8004e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]
  }
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ec8:	f7fc f838 	bl	8000f3c <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d10e      	bne.n	8004efa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f82d 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e023      	b.n	8004f42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d10e      	bne.n	8004f26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f817 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e00d      	b.n	8004f42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b09c      	sub	sp, #112	; 0x70
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	4613      	mov	r3, r2
 8004f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5a:	e0a5      	b.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	f000 80a1 	beq.w	80050a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f66:	f7fb ffe9 	bl	8000f3c <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d302      	bcc.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d13e      	bne.n	8004ffa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f90:	667b      	str	r3, [r7, #100]	; 0x64
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e6      	bne.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fce:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e5      	bne.n	8004fae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e067      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d04f      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d147      	bne.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005020:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005036:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
 8005042:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e6      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	613b      	str	r3, [r7, #16]
   return(result);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	66bb      	str	r3, [r7, #104]	; 0x68
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3308      	adds	r3, #8
 8005072:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005074:	623a      	str	r2, [r7, #32]
 8005076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	61bb      	str	r3, [r7, #24]
   return(result);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e5      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e010      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4013      	ands	r3, r2
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	f43f af4a 	beq.w	8004f5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3770      	adds	r7, #112	; 0x70
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b095      	sub	sp, #84	; 0x54
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f8:	643b      	str	r3, [r7, #64]	; 0x40
 80050fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e6      	bne.n	80050da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	61fb      	str	r3, [r7, #28]
   return(result);
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	64bb      	str	r3, [r7, #72]	; 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800512c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e5      	bne.n	800510c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005144:	2b01      	cmp	r3, #1
 8005146:	d118      	bne.n	800517a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	60bb      	str	r3, [r7, #8]
   return(result);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f023 0310 	bic.w	r3, r3, #16
 800515c:	647b      	str	r3, [r7, #68]	; 0x44
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6979      	ldr	r1, [r7, #20]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	613b      	str	r3, [r7, #16]
   return(result);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800518c:	bf00      	nop
 800518e:	3754      	adds	r7, #84	; 0x54
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff fb0e 	bl	80047d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051bc:	bf00      	nop
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e0:	61fb      	str	r3, [r7, #28]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6979      	ldr	r1, [r7, #20]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	613b      	str	r3, [r7, #16]
   return(result);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e6      	bne.n	80051cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fada 	bl	80047c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005210:	bf00      	nop
 8005212:	3720      	adds	r7, #32
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <atoi>:
 800522c:	220a      	movs	r2, #10
 800522e:	2100      	movs	r1, #0
 8005230:	f000 b986 	b.w	8005540 <strtol>

08005234 <__errno>:
 8005234:	4b01      	ldr	r3, [pc, #4]	; (800523c <__errno+0x8>)
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000010 	.word	0x20000010

08005240 <__libc_init_array>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	4d0d      	ldr	r5, [pc, #52]	; (8005278 <__libc_init_array+0x38>)
 8005244:	4c0d      	ldr	r4, [pc, #52]	; (800527c <__libc_init_array+0x3c>)
 8005246:	1b64      	subs	r4, r4, r5
 8005248:	10a4      	asrs	r4, r4, #2
 800524a:	2600      	movs	r6, #0
 800524c:	42a6      	cmp	r6, r4
 800524e:	d109      	bne.n	8005264 <__libc_init_array+0x24>
 8005250:	4d0b      	ldr	r5, [pc, #44]	; (8005280 <__libc_init_array+0x40>)
 8005252:	4c0c      	ldr	r4, [pc, #48]	; (8005284 <__libc_init_array+0x44>)
 8005254:	f001 f978 	bl	8006548 <_init>
 8005258:	1b64      	subs	r4, r4, r5
 800525a:	10a4      	asrs	r4, r4, #2
 800525c:	2600      	movs	r6, #0
 800525e:	42a6      	cmp	r6, r4
 8005260:	d105      	bne.n	800526e <__libc_init_array+0x2e>
 8005262:	bd70      	pop	{r4, r5, r6, pc}
 8005264:	f855 3b04 	ldr.w	r3, [r5], #4
 8005268:	4798      	blx	r3
 800526a:	3601      	adds	r6, #1
 800526c:	e7ee      	b.n	800524c <__libc_init_array+0xc>
 800526e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005272:	4798      	blx	r3
 8005274:	3601      	adds	r6, #1
 8005276:	e7f2      	b.n	800525e <__libc_init_array+0x1e>
 8005278:	08006834 	.word	0x08006834
 800527c:	08006834 	.word	0x08006834
 8005280:	08006834 	.word	0x08006834
 8005284:	08006838 	.word	0x08006838

08005288 <memset>:
 8005288:	4402      	add	r2, r0
 800528a:	4603      	mov	r3, r0
 800528c:	4293      	cmp	r3, r2
 800528e:	d100      	bne.n	8005292 <memset+0xa>
 8005290:	4770      	bx	lr
 8005292:	f803 1b01 	strb.w	r1, [r3], #1
 8005296:	e7f9      	b.n	800528c <memset+0x4>

08005298 <_puts_r>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	460e      	mov	r6, r1
 800529c:	4605      	mov	r5, r0
 800529e:	b118      	cbz	r0, 80052a8 <_puts_r+0x10>
 80052a0:	6983      	ldr	r3, [r0, #24]
 80052a2:	b90b      	cbnz	r3, 80052a8 <_puts_r+0x10>
 80052a4:	f000 fb4e 	bl	8005944 <__sinit>
 80052a8:	69ab      	ldr	r3, [r5, #24]
 80052aa:	68ac      	ldr	r4, [r5, #8]
 80052ac:	b913      	cbnz	r3, 80052b4 <_puts_r+0x1c>
 80052ae:	4628      	mov	r0, r5
 80052b0:	f000 fb48 	bl	8005944 <__sinit>
 80052b4:	4b2c      	ldr	r3, [pc, #176]	; (8005368 <_puts_r+0xd0>)
 80052b6:	429c      	cmp	r4, r3
 80052b8:	d120      	bne.n	80052fc <_puts_r+0x64>
 80052ba:	686c      	ldr	r4, [r5, #4]
 80052bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052be:	07db      	lsls	r3, r3, #31
 80052c0:	d405      	bmi.n	80052ce <_puts_r+0x36>
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	0598      	lsls	r0, r3, #22
 80052c6:	d402      	bmi.n	80052ce <_puts_r+0x36>
 80052c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ca:	f000 fbeb 	bl	8005aa4 <__retarget_lock_acquire_recursive>
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	0719      	lsls	r1, r3, #28
 80052d2:	d51d      	bpl.n	8005310 <_puts_r+0x78>
 80052d4:	6923      	ldr	r3, [r4, #16]
 80052d6:	b1db      	cbz	r3, 8005310 <_puts_r+0x78>
 80052d8:	3e01      	subs	r6, #1
 80052da:	68a3      	ldr	r3, [r4, #8]
 80052dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052e0:	3b01      	subs	r3, #1
 80052e2:	60a3      	str	r3, [r4, #8]
 80052e4:	bb39      	cbnz	r1, 8005336 <_puts_r+0x9e>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	da38      	bge.n	800535c <_puts_r+0xc4>
 80052ea:	4622      	mov	r2, r4
 80052ec:	210a      	movs	r1, #10
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 f930 	bl	8005554 <__swbuf_r>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d011      	beq.n	800531c <_puts_r+0x84>
 80052f8:	250a      	movs	r5, #10
 80052fa:	e011      	b.n	8005320 <_puts_r+0x88>
 80052fc:	4b1b      	ldr	r3, [pc, #108]	; (800536c <_puts_r+0xd4>)
 80052fe:	429c      	cmp	r4, r3
 8005300:	d101      	bne.n	8005306 <_puts_r+0x6e>
 8005302:	68ac      	ldr	r4, [r5, #8]
 8005304:	e7da      	b.n	80052bc <_puts_r+0x24>
 8005306:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <_puts_r+0xd8>)
 8005308:	429c      	cmp	r4, r3
 800530a:	bf08      	it	eq
 800530c:	68ec      	ldreq	r4, [r5, #12]
 800530e:	e7d5      	b.n	80052bc <_puts_r+0x24>
 8005310:	4621      	mov	r1, r4
 8005312:	4628      	mov	r0, r5
 8005314:	f000 f970 	bl	80055f8 <__swsetup_r>
 8005318:	2800      	cmp	r0, #0
 800531a:	d0dd      	beq.n	80052d8 <_puts_r+0x40>
 800531c:	f04f 35ff 	mov.w	r5, #4294967295
 8005320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005322:	07da      	lsls	r2, r3, #31
 8005324:	d405      	bmi.n	8005332 <_puts_r+0x9a>
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	059b      	lsls	r3, r3, #22
 800532a:	d402      	bmi.n	8005332 <_puts_r+0x9a>
 800532c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800532e:	f000 fbba 	bl	8005aa6 <__retarget_lock_release_recursive>
 8005332:	4628      	mov	r0, r5
 8005334:	bd70      	pop	{r4, r5, r6, pc}
 8005336:	2b00      	cmp	r3, #0
 8005338:	da04      	bge.n	8005344 <_puts_r+0xac>
 800533a:	69a2      	ldr	r2, [r4, #24]
 800533c:	429a      	cmp	r2, r3
 800533e:	dc06      	bgt.n	800534e <_puts_r+0xb6>
 8005340:	290a      	cmp	r1, #10
 8005342:	d004      	beq.n	800534e <_puts_r+0xb6>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	6022      	str	r2, [r4, #0]
 800534a:	7019      	strb	r1, [r3, #0]
 800534c:	e7c5      	b.n	80052da <_puts_r+0x42>
 800534e:	4622      	mov	r2, r4
 8005350:	4628      	mov	r0, r5
 8005352:	f000 f8ff 	bl	8005554 <__swbuf_r>
 8005356:	3001      	adds	r0, #1
 8005358:	d1bf      	bne.n	80052da <_puts_r+0x42>
 800535a:	e7df      	b.n	800531c <_puts_r+0x84>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	250a      	movs	r5, #10
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	6022      	str	r2, [r4, #0]
 8005364:	701d      	strb	r5, [r3, #0]
 8005366:	e7db      	b.n	8005320 <_puts_r+0x88>
 8005368:	080067b8 	.word	0x080067b8
 800536c:	080067d8 	.word	0x080067d8
 8005370:	08006798 	.word	0x08006798

08005374 <puts>:
 8005374:	4b02      	ldr	r3, [pc, #8]	; (8005380 <puts+0xc>)
 8005376:	4601      	mov	r1, r0
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	f7ff bf8d 	b.w	8005298 <_puts_r>
 800537e:	bf00      	nop
 8005380:	20000010 	.word	0x20000010

08005384 <strtok>:
 8005384:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <strtok+0x5c>)
 8005386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005388:	681e      	ldr	r6, [r3, #0]
 800538a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800538c:	4605      	mov	r5, r0
 800538e:	b9fc      	cbnz	r4, 80053d0 <strtok+0x4c>
 8005390:	2050      	movs	r0, #80	; 0x50
 8005392:	9101      	str	r1, [sp, #4]
 8005394:	f000 fbee 	bl	8005b74 <malloc>
 8005398:	9901      	ldr	r1, [sp, #4]
 800539a:	65b0      	str	r0, [r6, #88]	; 0x58
 800539c:	4602      	mov	r2, r0
 800539e:	b920      	cbnz	r0, 80053aa <strtok+0x26>
 80053a0:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <strtok+0x60>)
 80053a2:	4811      	ldr	r0, [pc, #68]	; (80053e8 <strtok+0x64>)
 80053a4:	2157      	movs	r1, #87	; 0x57
 80053a6:	f000 f995 	bl	80056d4 <__assert_func>
 80053aa:	e9c0 4400 	strd	r4, r4, [r0]
 80053ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80053b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80053b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80053ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80053be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80053c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80053c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80053ca:	6184      	str	r4, [r0, #24]
 80053cc:	7704      	strb	r4, [r0, #28]
 80053ce:	6244      	str	r4, [r0, #36]	; 0x24
 80053d0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80053d2:	2301      	movs	r3, #1
 80053d4:	4628      	mov	r0, r5
 80053d6:	b002      	add	sp, #8
 80053d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053dc:	f000 b806 	b.w	80053ec <__strtok_r>
 80053e0:	20000010 	.word	0x20000010
 80053e4:	080065e4 	.word	0x080065e4
 80053e8:	080065fb 	.word	0x080065fb

080053ec <__strtok_r>:
 80053ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ee:	b908      	cbnz	r0, 80053f4 <__strtok_r+0x8>
 80053f0:	6810      	ldr	r0, [r2, #0]
 80053f2:	b188      	cbz	r0, 8005418 <__strtok_r+0x2c>
 80053f4:	4604      	mov	r4, r0
 80053f6:	4620      	mov	r0, r4
 80053f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80053fc:	460f      	mov	r7, r1
 80053fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005402:	b91e      	cbnz	r6, 800540c <__strtok_r+0x20>
 8005404:	b965      	cbnz	r5, 8005420 <__strtok_r+0x34>
 8005406:	6015      	str	r5, [r2, #0]
 8005408:	4628      	mov	r0, r5
 800540a:	e005      	b.n	8005418 <__strtok_r+0x2c>
 800540c:	42b5      	cmp	r5, r6
 800540e:	d1f6      	bne.n	80053fe <__strtok_r+0x12>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <__strtok_r+0xa>
 8005414:	6014      	str	r4, [r2, #0]
 8005416:	7003      	strb	r3, [r0, #0]
 8005418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800541a:	461c      	mov	r4, r3
 800541c:	e00c      	b.n	8005438 <__strtok_r+0x4c>
 800541e:	b915      	cbnz	r5, 8005426 <__strtok_r+0x3a>
 8005420:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005424:	460e      	mov	r6, r1
 8005426:	f816 5b01 	ldrb.w	r5, [r6], #1
 800542a:	42ab      	cmp	r3, r5
 800542c:	d1f7      	bne.n	800541e <__strtok_r+0x32>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f3      	beq.n	800541a <__strtok_r+0x2e>
 8005432:	2300      	movs	r3, #0
 8005434:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005438:	6014      	str	r4, [r2, #0]
 800543a:	e7ed      	b.n	8005418 <__strtok_r+0x2c>

0800543c <_strtol_l.constprop.0>:
 800543c:	2b01      	cmp	r3, #1
 800543e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005442:	d001      	beq.n	8005448 <_strtol_l.constprop.0+0xc>
 8005444:	2b24      	cmp	r3, #36	; 0x24
 8005446:	d906      	bls.n	8005456 <_strtol_l.constprop.0+0x1a>
 8005448:	f7ff fef4 	bl	8005234 <__errno>
 800544c:	2316      	movs	r3, #22
 800544e:	6003      	str	r3, [r0, #0]
 8005450:	2000      	movs	r0, #0
 8005452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005456:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800553c <_strtol_l.constprop.0+0x100>
 800545a:	460d      	mov	r5, r1
 800545c:	462e      	mov	r6, r5
 800545e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005462:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005466:	f017 0708 	ands.w	r7, r7, #8
 800546a:	d1f7      	bne.n	800545c <_strtol_l.constprop.0+0x20>
 800546c:	2c2d      	cmp	r4, #45	; 0x2d
 800546e:	d132      	bne.n	80054d6 <_strtol_l.constprop.0+0x9a>
 8005470:	782c      	ldrb	r4, [r5, #0]
 8005472:	2701      	movs	r7, #1
 8005474:	1cb5      	adds	r5, r6, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d05b      	beq.n	8005532 <_strtol_l.constprop.0+0xf6>
 800547a:	2b10      	cmp	r3, #16
 800547c:	d109      	bne.n	8005492 <_strtol_l.constprop.0+0x56>
 800547e:	2c30      	cmp	r4, #48	; 0x30
 8005480:	d107      	bne.n	8005492 <_strtol_l.constprop.0+0x56>
 8005482:	782c      	ldrb	r4, [r5, #0]
 8005484:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005488:	2c58      	cmp	r4, #88	; 0x58
 800548a:	d14d      	bne.n	8005528 <_strtol_l.constprop.0+0xec>
 800548c:	786c      	ldrb	r4, [r5, #1]
 800548e:	2310      	movs	r3, #16
 8005490:	3502      	adds	r5, #2
 8005492:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005496:	f108 38ff 	add.w	r8, r8, #4294967295
 800549a:	f04f 0c00 	mov.w	ip, #0
 800549e:	fbb8 f9f3 	udiv	r9, r8, r3
 80054a2:	4666      	mov	r6, ip
 80054a4:	fb03 8a19 	mls	sl, r3, r9, r8
 80054a8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80054ac:	f1be 0f09 	cmp.w	lr, #9
 80054b0:	d816      	bhi.n	80054e0 <_strtol_l.constprop.0+0xa4>
 80054b2:	4674      	mov	r4, lr
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	dd24      	ble.n	8005502 <_strtol_l.constprop.0+0xc6>
 80054b8:	f1bc 0f00 	cmp.w	ip, #0
 80054bc:	db1e      	blt.n	80054fc <_strtol_l.constprop.0+0xc0>
 80054be:	45b1      	cmp	r9, r6
 80054c0:	d31c      	bcc.n	80054fc <_strtol_l.constprop.0+0xc0>
 80054c2:	d101      	bne.n	80054c8 <_strtol_l.constprop.0+0x8c>
 80054c4:	45a2      	cmp	sl, r4
 80054c6:	db19      	blt.n	80054fc <_strtol_l.constprop.0+0xc0>
 80054c8:	fb06 4603 	mla	r6, r6, r3, r4
 80054cc:	f04f 0c01 	mov.w	ip, #1
 80054d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054d4:	e7e8      	b.n	80054a8 <_strtol_l.constprop.0+0x6c>
 80054d6:	2c2b      	cmp	r4, #43	; 0x2b
 80054d8:	bf04      	itt	eq
 80054da:	782c      	ldrbeq	r4, [r5, #0]
 80054dc:	1cb5      	addeq	r5, r6, #2
 80054de:	e7ca      	b.n	8005476 <_strtol_l.constprop.0+0x3a>
 80054e0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80054e4:	f1be 0f19 	cmp.w	lr, #25
 80054e8:	d801      	bhi.n	80054ee <_strtol_l.constprop.0+0xb2>
 80054ea:	3c37      	subs	r4, #55	; 0x37
 80054ec:	e7e2      	b.n	80054b4 <_strtol_l.constprop.0+0x78>
 80054ee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80054f2:	f1be 0f19 	cmp.w	lr, #25
 80054f6:	d804      	bhi.n	8005502 <_strtol_l.constprop.0+0xc6>
 80054f8:	3c57      	subs	r4, #87	; 0x57
 80054fa:	e7db      	b.n	80054b4 <_strtol_l.constprop.0+0x78>
 80054fc:	f04f 3cff 	mov.w	ip, #4294967295
 8005500:	e7e6      	b.n	80054d0 <_strtol_l.constprop.0+0x94>
 8005502:	f1bc 0f00 	cmp.w	ip, #0
 8005506:	da05      	bge.n	8005514 <_strtol_l.constprop.0+0xd8>
 8005508:	2322      	movs	r3, #34	; 0x22
 800550a:	6003      	str	r3, [r0, #0]
 800550c:	4646      	mov	r6, r8
 800550e:	b942      	cbnz	r2, 8005522 <_strtol_l.constprop.0+0xe6>
 8005510:	4630      	mov	r0, r6
 8005512:	e79e      	b.n	8005452 <_strtol_l.constprop.0+0x16>
 8005514:	b107      	cbz	r7, 8005518 <_strtol_l.constprop.0+0xdc>
 8005516:	4276      	negs	r6, r6
 8005518:	2a00      	cmp	r2, #0
 800551a:	d0f9      	beq.n	8005510 <_strtol_l.constprop.0+0xd4>
 800551c:	f1bc 0f00 	cmp.w	ip, #0
 8005520:	d000      	beq.n	8005524 <_strtol_l.constprop.0+0xe8>
 8005522:	1e69      	subs	r1, r5, #1
 8005524:	6011      	str	r1, [r2, #0]
 8005526:	e7f3      	b.n	8005510 <_strtol_l.constprop.0+0xd4>
 8005528:	2430      	movs	r4, #48	; 0x30
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1b1      	bne.n	8005492 <_strtol_l.constprop.0+0x56>
 800552e:	2308      	movs	r3, #8
 8005530:	e7af      	b.n	8005492 <_strtol_l.constprop.0+0x56>
 8005532:	2c30      	cmp	r4, #48	; 0x30
 8005534:	d0a5      	beq.n	8005482 <_strtol_l.constprop.0+0x46>
 8005536:	230a      	movs	r3, #10
 8005538:	e7ab      	b.n	8005492 <_strtol_l.constprop.0+0x56>
 800553a:	bf00      	nop
 800553c:	08006695 	.word	0x08006695

08005540 <strtol>:
 8005540:	4613      	mov	r3, r2
 8005542:	460a      	mov	r2, r1
 8005544:	4601      	mov	r1, r0
 8005546:	4802      	ldr	r0, [pc, #8]	; (8005550 <strtol+0x10>)
 8005548:	6800      	ldr	r0, [r0, #0]
 800554a:	f7ff bf77 	b.w	800543c <_strtol_l.constprop.0>
 800554e:	bf00      	nop
 8005550:	20000010 	.word	0x20000010

08005554 <__swbuf_r>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	460e      	mov	r6, r1
 8005558:	4614      	mov	r4, r2
 800555a:	4605      	mov	r5, r0
 800555c:	b118      	cbz	r0, 8005566 <__swbuf_r+0x12>
 800555e:	6983      	ldr	r3, [r0, #24]
 8005560:	b90b      	cbnz	r3, 8005566 <__swbuf_r+0x12>
 8005562:	f000 f9ef 	bl	8005944 <__sinit>
 8005566:	4b21      	ldr	r3, [pc, #132]	; (80055ec <__swbuf_r+0x98>)
 8005568:	429c      	cmp	r4, r3
 800556a:	d12b      	bne.n	80055c4 <__swbuf_r+0x70>
 800556c:	686c      	ldr	r4, [r5, #4]
 800556e:	69a3      	ldr	r3, [r4, #24]
 8005570:	60a3      	str	r3, [r4, #8]
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	071a      	lsls	r2, r3, #28
 8005576:	d52f      	bpl.n	80055d8 <__swbuf_r+0x84>
 8005578:	6923      	ldr	r3, [r4, #16]
 800557a:	b36b      	cbz	r3, 80055d8 <__swbuf_r+0x84>
 800557c:	6923      	ldr	r3, [r4, #16]
 800557e:	6820      	ldr	r0, [r4, #0]
 8005580:	1ac0      	subs	r0, r0, r3
 8005582:	6963      	ldr	r3, [r4, #20]
 8005584:	b2f6      	uxtb	r6, r6
 8005586:	4283      	cmp	r3, r0
 8005588:	4637      	mov	r7, r6
 800558a:	dc04      	bgt.n	8005596 <__swbuf_r+0x42>
 800558c:	4621      	mov	r1, r4
 800558e:	4628      	mov	r0, r5
 8005590:	f000 f944 	bl	800581c <_fflush_r>
 8005594:	bb30      	cbnz	r0, 80055e4 <__swbuf_r+0x90>
 8005596:	68a3      	ldr	r3, [r4, #8]
 8005598:	3b01      	subs	r3, #1
 800559a:	60a3      	str	r3, [r4, #8]
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	6022      	str	r2, [r4, #0]
 80055a2:	701e      	strb	r6, [r3, #0]
 80055a4:	6963      	ldr	r3, [r4, #20]
 80055a6:	3001      	adds	r0, #1
 80055a8:	4283      	cmp	r3, r0
 80055aa:	d004      	beq.n	80055b6 <__swbuf_r+0x62>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	07db      	lsls	r3, r3, #31
 80055b0:	d506      	bpl.n	80055c0 <__swbuf_r+0x6c>
 80055b2:	2e0a      	cmp	r6, #10
 80055b4:	d104      	bne.n	80055c0 <__swbuf_r+0x6c>
 80055b6:	4621      	mov	r1, r4
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 f92f 	bl	800581c <_fflush_r>
 80055be:	b988      	cbnz	r0, 80055e4 <__swbuf_r+0x90>
 80055c0:	4638      	mov	r0, r7
 80055c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <__swbuf_r+0x9c>)
 80055c6:	429c      	cmp	r4, r3
 80055c8:	d101      	bne.n	80055ce <__swbuf_r+0x7a>
 80055ca:	68ac      	ldr	r4, [r5, #8]
 80055cc:	e7cf      	b.n	800556e <__swbuf_r+0x1a>
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <__swbuf_r+0xa0>)
 80055d0:	429c      	cmp	r4, r3
 80055d2:	bf08      	it	eq
 80055d4:	68ec      	ldreq	r4, [r5, #12]
 80055d6:	e7ca      	b.n	800556e <__swbuf_r+0x1a>
 80055d8:	4621      	mov	r1, r4
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 f80c 	bl	80055f8 <__swsetup_r>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d0cb      	beq.n	800557c <__swbuf_r+0x28>
 80055e4:	f04f 37ff 	mov.w	r7, #4294967295
 80055e8:	e7ea      	b.n	80055c0 <__swbuf_r+0x6c>
 80055ea:	bf00      	nop
 80055ec:	080067b8 	.word	0x080067b8
 80055f0:	080067d8 	.word	0x080067d8
 80055f4:	08006798 	.word	0x08006798

080055f8 <__swsetup_r>:
 80055f8:	4b32      	ldr	r3, [pc, #200]	; (80056c4 <__swsetup_r+0xcc>)
 80055fa:	b570      	push	{r4, r5, r6, lr}
 80055fc:	681d      	ldr	r5, [r3, #0]
 80055fe:	4606      	mov	r6, r0
 8005600:	460c      	mov	r4, r1
 8005602:	b125      	cbz	r5, 800560e <__swsetup_r+0x16>
 8005604:	69ab      	ldr	r3, [r5, #24]
 8005606:	b913      	cbnz	r3, 800560e <__swsetup_r+0x16>
 8005608:	4628      	mov	r0, r5
 800560a:	f000 f99b 	bl	8005944 <__sinit>
 800560e:	4b2e      	ldr	r3, [pc, #184]	; (80056c8 <__swsetup_r+0xd0>)
 8005610:	429c      	cmp	r4, r3
 8005612:	d10f      	bne.n	8005634 <__swsetup_r+0x3c>
 8005614:	686c      	ldr	r4, [r5, #4]
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800561c:	0719      	lsls	r1, r3, #28
 800561e:	d42c      	bmi.n	800567a <__swsetup_r+0x82>
 8005620:	06dd      	lsls	r5, r3, #27
 8005622:	d411      	bmi.n	8005648 <__swsetup_r+0x50>
 8005624:	2309      	movs	r3, #9
 8005626:	6033      	str	r3, [r6, #0]
 8005628:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800562c:	81a3      	strh	r3, [r4, #12]
 800562e:	f04f 30ff 	mov.w	r0, #4294967295
 8005632:	e03e      	b.n	80056b2 <__swsetup_r+0xba>
 8005634:	4b25      	ldr	r3, [pc, #148]	; (80056cc <__swsetup_r+0xd4>)
 8005636:	429c      	cmp	r4, r3
 8005638:	d101      	bne.n	800563e <__swsetup_r+0x46>
 800563a:	68ac      	ldr	r4, [r5, #8]
 800563c:	e7eb      	b.n	8005616 <__swsetup_r+0x1e>
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <__swsetup_r+0xd8>)
 8005640:	429c      	cmp	r4, r3
 8005642:	bf08      	it	eq
 8005644:	68ec      	ldreq	r4, [r5, #12]
 8005646:	e7e6      	b.n	8005616 <__swsetup_r+0x1e>
 8005648:	0758      	lsls	r0, r3, #29
 800564a:	d512      	bpl.n	8005672 <__swsetup_r+0x7a>
 800564c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800564e:	b141      	cbz	r1, 8005662 <__swsetup_r+0x6a>
 8005650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005654:	4299      	cmp	r1, r3
 8005656:	d002      	beq.n	800565e <__swsetup_r+0x66>
 8005658:	4630      	mov	r0, r6
 800565a:	f000 fa93 	bl	8005b84 <_free_r>
 800565e:	2300      	movs	r3, #0
 8005660:	6363      	str	r3, [r4, #52]	; 0x34
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005668:	81a3      	strh	r3, [r4, #12]
 800566a:	2300      	movs	r3, #0
 800566c:	6063      	str	r3, [r4, #4]
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	f043 0308 	orr.w	r3, r3, #8
 8005678:	81a3      	strh	r3, [r4, #12]
 800567a:	6923      	ldr	r3, [r4, #16]
 800567c:	b94b      	cbnz	r3, 8005692 <__swsetup_r+0x9a>
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005688:	d003      	beq.n	8005692 <__swsetup_r+0x9a>
 800568a:	4621      	mov	r1, r4
 800568c:	4630      	mov	r0, r6
 800568e:	f000 fa31 	bl	8005af4 <__smakebuf_r>
 8005692:	89a0      	ldrh	r0, [r4, #12]
 8005694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005698:	f010 0301 	ands.w	r3, r0, #1
 800569c:	d00a      	beq.n	80056b4 <__swsetup_r+0xbc>
 800569e:	2300      	movs	r3, #0
 80056a0:	60a3      	str	r3, [r4, #8]
 80056a2:	6963      	ldr	r3, [r4, #20]
 80056a4:	425b      	negs	r3, r3
 80056a6:	61a3      	str	r3, [r4, #24]
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	b943      	cbnz	r3, 80056be <__swsetup_r+0xc6>
 80056ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056b0:	d1ba      	bne.n	8005628 <__swsetup_r+0x30>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	0781      	lsls	r1, r0, #30
 80056b6:	bf58      	it	pl
 80056b8:	6963      	ldrpl	r3, [r4, #20]
 80056ba:	60a3      	str	r3, [r4, #8]
 80056bc:	e7f4      	b.n	80056a8 <__swsetup_r+0xb0>
 80056be:	2000      	movs	r0, #0
 80056c0:	e7f7      	b.n	80056b2 <__swsetup_r+0xba>
 80056c2:	bf00      	nop
 80056c4:	20000010 	.word	0x20000010
 80056c8:	080067b8 	.word	0x080067b8
 80056cc:	080067d8 	.word	0x080067d8
 80056d0:	08006798 	.word	0x08006798

080056d4 <__assert_func>:
 80056d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056d6:	4614      	mov	r4, r2
 80056d8:	461a      	mov	r2, r3
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <__assert_func+0x2c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4605      	mov	r5, r0
 80056e0:	68d8      	ldr	r0, [r3, #12]
 80056e2:	b14c      	cbz	r4, 80056f8 <__assert_func+0x24>
 80056e4:	4b07      	ldr	r3, [pc, #28]	; (8005704 <__assert_func+0x30>)
 80056e6:	9100      	str	r1, [sp, #0]
 80056e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056ec:	4906      	ldr	r1, [pc, #24]	; (8005708 <__assert_func+0x34>)
 80056ee:	462b      	mov	r3, r5
 80056f0:	f000 f9a6 	bl	8005a40 <fiprintf>
 80056f4:	f000 fe7a 	bl	80063ec <abort>
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <__assert_func+0x38>)
 80056fa:	461c      	mov	r4, r3
 80056fc:	e7f3      	b.n	80056e6 <__assert_func+0x12>
 80056fe:	bf00      	nop
 8005700:	20000010 	.word	0x20000010
 8005704:	08006658 	.word	0x08006658
 8005708:	08006665 	.word	0x08006665
 800570c:	08006693 	.word	0x08006693

08005710 <__sflush_r>:
 8005710:	898a      	ldrh	r2, [r1, #12]
 8005712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005716:	4605      	mov	r5, r0
 8005718:	0710      	lsls	r0, r2, #28
 800571a:	460c      	mov	r4, r1
 800571c:	d458      	bmi.n	80057d0 <__sflush_r+0xc0>
 800571e:	684b      	ldr	r3, [r1, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	dc05      	bgt.n	8005730 <__sflush_r+0x20>
 8005724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	dc02      	bgt.n	8005730 <__sflush_r+0x20>
 800572a:	2000      	movs	r0, #0
 800572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005732:	2e00      	cmp	r6, #0
 8005734:	d0f9      	beq.n	800572a <__sflush_r+0x1a>
 8005736:	2300      	movs	r3, #0
 8005738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800573c:	682f      	ldr	r7, [r5, #0]
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	d032      	beq.n	80057a8 <__sflush_r+0x98>
 8005742:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005744:	89a3      	ldrh	r3, [r4, #12]
 8005746:	075a      	lsls	r2, r3, #29
 8005748:	d505      	bpl.n	8005756 <__sflush_r+0x46>
 800574a:	6863      	ldr	r3, [r4, #4]
 800574c:	1ac0      	subs	r0, r0, r3
 800574e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005750:	b10b      	cbz	r3, 8005756 <__sflush_r+0x46>
 8005752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005754:	1ac0      	subs	r0, r0, r3
 8005756:	2300      	movs	r3, #0
 8005758:	4602      	mov	r2, r0
 800575a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800575c:	6a21      	ldr	r1, [r4, #32]
 800575e:	4628      	mov	r0, r5
 8005760:	47b0      	blx	r6
 8005762:	1c43      	adds	r3, r0, #1
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	d106      	bne.n	8005776 <__sflush_r+0x66>
 8005768:	6829      	ldr	r1, [r5, #0]
 800576a:	291d      	cmp	r1, #29
 800576c:	d82c      	bhi.n	80057c8 <__sflush_r+0xb8>
 800576e:	4a2a      	ldr	r2, [pc, #168]	; (8005818 <__sflush_r+0x108>)
 8005770:	40ca      	lsrs	r2, r1
 8005772:	07d6      	lsls	r6, r2, #31
 8005774:	d528      	bpl.n	80057c8 <__sflush_r+0xb8>
 8005776:	2200      	movs	r2, #0
 8005778:	6062      	str	r2, [r4, #4]
 800577a:	04d9      	lsls	r1, r3, #19
 800577c:	6922      	ldr	r2, [r4, #16]
 800577e:	6022      	str	r2, [r4, #0]
 8005780:	d504      	bpl.n	800578c <__sflush_r+0x7c>
 8005782:	1c42      	adds	r2, r0, #1
 8005784:	d101      	bne.n	800578a <__sflush_r+0x7a>
 8005786:	682b      	ldr	r3, [r5, #0]
 8005788:	b903      	cbnz	r3, 800578c <__sflush_r+0x7c>
 800578a:	6560      	str	r0, [r4, #84]	; 0x54
 800578c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800578e:	602f      	str	r7, [r5, #0]
 8005790:	2900      	cmp	r1, #0
 8005792:	d0ca      	beq.n	800572a <__sflush_r+0x1a>
 8005794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005798:	4299      	cmp	r1, r3
 800579a:	d002      	beq.n	80057a2 <__sflush_r+0x92>
 800579c:	4628      	mov	r0, r5
 800579e:	f000 f9f1 	bl	8005b84 <_free_r>
 80057a2:	2000      	movs	r0, #0
 80057a4:	6360      	str	r0, [r4, #52]	; 0x34
 80057a6:	e7c1      	b.n	800572c <__sflush_r+0x1c>
 80057a8:	6a21      	ldr	r1, [r4, #32]
 80057aa:	2301      	movs	r3, #1
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b0      	blx	r6
 80057b0:	1c41      	adds	r1, r0, #1
 80057b2:	d1c7      	bne.n	8005744 <__sflush_r+0x34>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0c4      	beq.n	8005744 <__sflush_r+0x34>
 80057ba:	2b1d      	cmp	r3, #29
 80057bc:	d001      	beq.n	80057c2 <__sflush_r+0xb2>
 80057be:	2b16      	cmp	r3, #22
 80057c0:	d101      	bne.n	80057c6 <__sflush_r+0xb6>
 80057c2:	602f      	str	r7, [r5, #0]
 80057c4:	e7b1      	b.n	800572a <__sflush_r+0x1a>
 80057c6:	89a3      	ldrh	r3, [r4, #12]
 80057c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057cc:	81a3      	strh	r3, [r4, #12]
 80057ce:	e7ad      	b.n	800572c <__sflush_r+0x1c>
 80057d0:	690f      	ldr	r7, [r1, #16]
 80057d2:	2f00      	cmp	r7, #0
 80057d4:	d0a9      	beq.n	800572a <__sflush_r+0x1a>
 80057d6:	0793      	lsls	r3, r2, #30
 80057d8:	680e      	ldr	r6, [r1, #0]
 80057da:	bf08      	it	eq
 80057dc:	694b      	ldreq	r3, [r1, #20]
 80057de:	600f      	str	r7, [r1, #0]
 80057e0:	bf18      	it	ne
 80057e2:	2300      	movne	r3, #0
 80057e4:	eba6 0807 	sub.w	r8, r6, r7
 80057e8:	608b      	str	r3, [r1, #8]
 80057ea:	f1b8 0f00 	cmp.w	r8, #0
 80057ee:	dd9c      	ble.n	800572a <__sflush_r+0x1a>
 80057f0:	6a21      	ldr	r1, [r4, #32]
 80057f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057f4:	4643      	mov	r3, r8
 80057f6:	463a      	mov	r2, r7
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b0      	blx	r6
 80057fc:	2800      	cmp	r0, #0
 80057fe:	dc06      	bgt.n	800580e <__sflush_r+0xfe>
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005806:	81a3      	strh	r3, [r4, #12]
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	e78e      	b.n	800572c <__sflush_r+0x1c>
 800580e:	4407      	add	r7, r0
 8005810:	eba8 0800 	sub.w	r8, r8, r0
 8005814:	e7e9      	b.n	80057ea <__sflush_r+0xda>
 8005816:	bf00      	nop
 8005818:	20400001 	.word	0x20400001

0800581c <_fflush_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	690b      	ldr	r3, [r1, #16]
 8005820:	4605      	mov	r5, r0
 8005822:	460c      	mov	r4, r1
 8005824:	b913      	cbnz	r3, 800582c <_fflush_r+0x10>
 8005826:	2500      	movs	r5, #0
 8005828:	4628      	mov	r0, r5
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	b118      	cbz	r0, 8005836 <_fflush_r+0x1a>
 800582e:	6983      	ldr	r3, [r0, #24]
 8005830:	b90b      	cbnz	r3, 8005836 <_fflush_r+0x1a>
 8005832:	f000 f887 	bl	8005944 <__sinit>
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <_fflush_r+0x6c>)
 8005838:	429c      	cmp	r4, r3
 800583a:	d11b      	bne.n	8005874 <_fflush_r+0x58>
 800583c:	686c      	ldr	r4, [r5, #4]
 800583e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0ef      	beq.n	8005826 <_fflush_r+0xa>
 8005846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005848:	07d0      	lsls	r0, r2, #31
 800584a:	d404      	bmi.n	8005856 <_fflush_r+0x3a>
 800584c:	0599      	lsls	r1, r3, #22
 800584e:	d402      	bmi.n	8005856 <_fflush_r+0x3a>
 8005850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005852:	f000 f927 	bl	8005aa4 <__retarget_lock_acquire_recursive>
 8005856:	4628      	mov	r0, r5
 8005858:	4621      	mov	r1, r4
 800585a:	f7ff ff59 	bl	8005710 <__sflush_r>
 800585e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005860:	07da      	lsls	r2, r3, #31
 8005862:	4605      	mov	r5, r0
 8005864:	d4e0      	bmi.n	8005828 <_fflush_r+0xc>
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	059b      	lsls	r3, r3, #22
 800586a:	d4dd      	bmi.n	8005828 <_fflush_r+0xc>
 800586c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800586e:	f000 f91a 	bl	8005aa6 <__retarget_lock_release_recursive>
 8005872:	e7d9      	b.n	8005828 <_fflush_r+0xc>
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <_fflush_r+0x70>)
 8005876:	429c      	cmp	r4, r3
 8005878:	d101      	bne.n	800587e <_fflush_r+0x62>
 800587a:	68ac      	ldr	r4, [r5, #8]
 800587c:	e7df      	b.n	800583e <_fflush_r+0x22>
 800587e:	4b04      	ldr	r3, [pc, #16]	; (8005890 <_fflush_r+0x74>)
 8005880:	429c      	cmp	r4, r3
 8005882:	bf08      	it	eq
 8005884:	68ec      	ldreq	r4, [r5, #12]
 8005886:	e7da      	b.n	800583e <_fflush_r+0x22>
 8005888:	080067b8 	.word	0x080067b8
 800588c:	080067d8 	.word	0x080067d8
 8005890:	08006798 	.word	0x08006798

08005894 <std>:
 8005894:	2300      	movs	r3, #0
 8005896:	b510      	push	{r4, lr}
 8005898:	4604      	mov	r4, r0
 800589a:	e9c0 3300 	strd	r3, r3, [r0]
 800589e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058a2:	6083      	str	r3, [r0, #8]
 80058a4:	8181      	strh	r1, [r0, #12]
 80058a6:	6643      	str	r3, [r0, #100]	; 0x64
 80058a8:	81c2      	strh	r2, [r0, #14]
 80058aa:	6183      	str	r3, [r0, #24]
 80058ac:	4619      	mov	r1, r3
 80058ae:	2208      	movs	r2, #8
 80058b0:	305c      	adds	r0, #92	; 0x5c
 80058b2:	f7ff fce9 	bl	8005288 <memset>
 80058b6:	4b05      	ldr	r3, [pc, #20]	; (80058cc <std+0x38>)
 80058b8:	6263      	str	r3, [r4, #36]	; 0x24
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <std+0x3c>)
 80058bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <std+0x40>)
 80058c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058c2:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <std+0x44>)
 80058c4:	6224      	str	r4, [r4, #32]
 80058c6:	6323      	str	r3, [r4, #48]	; 0x30
 80058c8:	bd10      	pop	{r4, pc}
 80058ca:	bf00      	nop
 80058cc:	08006341 	.word	0x08006341
 80058d0:	08006363 	.word	0x08006363
 80058d4:	0800639b 	.word	0x0800639b
 80058d8:	080063bf 	.word	0x080063bf

080058dc <_cleanup_r>:
 80058dc:	4901      	ldr	r1, [pc, #4]	; (80058e4 <_cleanup_r+0x8>)
 80058de:	f000 b8c1 	b.w	8005a64 <_fwalk_reent>
 80058e2:	bf00      	nop
 80058e4:	0800581d 	.word	0x0800581d

080058e8 <__sfmoreglue>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	2268      	movs	r2, #104	; 0x68
 80058ec:	1e4d      	subs	r5, r1, #1
 80058ee:	4355      	muls	r5, r2
 80058f0:	460e      	mov	r6, r1
 80058f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058f6:	f000 f9b1 	bl	8005c5c <_malloc_r>
 80058fa:	4604      	mov	r4, r0
 80058fc:	b140      	cbz	r0, 8005910 <__sfmoreglue+0x28>
 80058fe:	2100      	movs	r1, #0
 8005900:	e9c0 1600 	strd	r1, r6, [r0]
 8005904:	300c      	adds	r0, #12
 8005906:	60a0      	str	r0, [r4, #8]
 8005908:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800590c:	f7ff fcbc 	bl	8005288 <memset>
 8005910:	4620      	mov	r0, r4
 8005912:	bd70      	pop	{r4, r5, r6, pc}

08005914 <__sfp_lock_acquire>:
 8005914:	4801      	ldr	r0, [pc, #4]	; (800591c <__sfp_lock_acquire+0x8>)
 8005916:	f000 b8c5 	b.w	8005aa4 <__retarget_lock_acquire_recursive>
 800591a:	bf00      	nop
 800591c:	200001d5 	.word	0x200001d5

08005920 <__sfp_lock_release>:
 8005920:	4801      	ldr	r0, [pc, #4]	; (8005928 <__sfp_lock_release+0x8>)
 8005922:	f000 b8c0 	b.w	8005aa6 <__retarget_lock_release_recursive>
 8005926:	bf00      	nop
 8005928:	200001d5 	.word	0x200001d5

0800592c <__sinit_lock_acquire>:
 800592c:	4801      	ldr	r0, [pc, #4]	; (8005934 <__sinit_lock_acquire+0x8>)
 800592e:	f000 b8b9 	b.w	8005aa4 <__retarget_lock_acquire_recursive>
 8005932:	bf00      	nop
 8005934:	200001d6 	.word	0x200001d6

08005938 <__sinit_lock_release>:
 8005938:	4801      	ldr	r0, [pc, #4]	; (8005940 <__sinit_lock_release+0x8>)
 800593a:	f000 b8b4 	b.w	8005aa6 <__retarget_lock_release_recursive>
 800593e:	bf00      	nop
 8005940:	200001d6 	.word	0x200001d6

08005944 <__sinit>:
 8005944:	b510      	push	{r4, lr}
 8005946:	4604      	mov	r4, r0
 8005948:	f7ff fff0 	bl	800592c <__sinit_lock_acquire>
 800594c:	69a3      	ldr	r3, [r4, #24]
 800594e:	b11b      	cbz	r3, 8005958 <__sinit+0x14>
 8005950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005954:	f7ff bff0 	b.w	8005938 <__sinit_lock_release>
 8005958:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800595c:	6523      	str	r3, [r4, #80]	; 0x50
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <__sinit+0x68>)
 8005960:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <__sinit+0x6c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	62a2      	str	r2, [r4, #40]	; 0x28
 8005966:	42a3      	cmp	r3, r4
 8005968:	bf04      	itt	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	61a3      	streq	r3, [r4, #24]
 800596e:	4620      	mov	r0, r4
 8005970:	f000 f820 	bl	80059b4 <__sfp>
 8005974:	6060      	str	r0, [r4, #4]
 8005976:	4620      	mov	r0, r4
 8005978:	f000 f81c 	bl	80059b4 <__sfp>
 800597c:	60a0      	str	r0, [r4, #8]
 800597e:	4620      	mov	r0, r4
 8005980:	f000 f818 	bl	80059b4 <__sfp>
 8005984:	2200      	movs	r2, #0
 8005986:	60e0      	str	r0, [r4, #12]
 8005988:	2104      	movs	r1, #4
 800598a:	6860      	ldr	r0, [r4, #4]
 800598c:	f7ff ff82 	bl	8005894 <std>
 8005990:	68a0      	ldr	r0, [r4, #8]
 8005992:	2201      	movs	r2, #1
 8005994:	2109      	movs	r1, #9
 8005996:	f7ff ff7d 	bl	8005894 <std>
 800599a:	68e0      	ldr	r0, [r4, #12]
 800599c:	2202      	movs	r2, #2
 800599e:	2112      	movs	r1, #18
 80059a0:	f7ff ff78 	bl	8005894 <std>
 80059a4:	2301      	movs	r3, #1
 80059a6:	61a3      	str	r3, [r4, #24]
 80059a8:	e7d2      	b.n	8005950 <__sinit+0xc>
 80059aa:	bf00      	nop
 80059ac:	080065e0 	.word	0x080065e0
 80059b0:	080058dd 	.word	0x080058dd

080059b4 <__sfp>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	4607      	mov	r7, r0
 80059b8:	f7ff ffac 	bl	8005914 <__sfp_lock_acquire>
 80059bc:	4b1e      	ldr	r3, [pc, #120]	; (8005a38 <__sfp+0x84>)
 80059be:	681e      	ldr	r6, [r3, #0]
 80059c0:	69b3      	ldr	r3, [r6, #24]
 80059c2:	b913      	cbnz	r3, 80059ca <__sfp+0x16>
 80059c4:	4630      	mov	r0, r6
 80059c6:	f7ff ffbd 	bl	8005944 <__sinit>
 80059ca:	3648      	adds	r6, #72	; 0x48
 80059cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	d503      	bpl.n	80059dc <__sfp+0x28>
 80059d4:	6833      	ldr	r3, [r6, #0]
 80059d6:	b30b      	cbz	r3, 8005a1c <__sfp+0x68>
 80059d8:	6836      	ldr	r6, [r6, #0]
 80059da:	e7f7      	b.n	80059cc <__sfp+0x18>
 80059dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059e0:	b9d5      	cbnz	r5, 8005a18 <__sfp+0x64>
 80059e2:	4b16      	ldr	r3, [pc, #88]	; (8005a3c <__sfp+0x88>)
 80059e4:	60e3      	str	r3, [r4, #12]
 80059e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059ea:	6665      	str	r5, [r4, #100]	; 0x64
 80059ec:	f000 f859 	bl	8005aa2 <__retarget_lock_init_recursive>
 80059f0:	f7ff ff96 	bl	8005920 <__sfp_lock_release>
 80059f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059fc:	6025      	str	r5, [r4, #0]
 80059fe:	61a5      	str	r5, [r4, #24]
 8005a00:	2208      	movs	r2, #8
 8005a02:	4629      	mov	r1, r5
 8005a04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a08:	f7ff fc3e 	bl	8005288 <memset>
 8005a0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a14:	4620      	mov	r0, r4
 8005a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a18:	3468      	adds	r4, #104	; 0x68
 8005a1a:	e7d9      	b.n	80059d0 <__sfp+0x1c>
 8005a1c:	2104      	movs	r1, #4
 8005a1e:	4638      	mov	r0, r7
 8005a20:	f7ff ff62 	bl	80058e8 <__sfmoreglue>
 8005a24:	4604      	mov	r4, r0
 8005a26:	6030      	str	r0, [r6, #0]
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d1d5      	bne.n	80059d8 <__sfp+0x24>
 8005a2c:	f7ff ff78 	bl	8005920 <__sfp_lock_release>
 8005a30:	230c      	movs	r3, #12
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	e7ee      	b.n	8005a14 <__sfp+0x60>
 8005a36:	bf00      	nop
 8005a38:	080065e0 	.word	0x080065e0
 8005a3c:	ffff0001 	.word	0xffff0001

08005a40 <fiprintf>:
 8005a40:	b40e      	push	{r1, r2, r3}
 8005a42:	b503      	push	{r0, r1, lr}
 8005a44:	4601      	mov	r1, r0
 8005a46:	ab03      	add	r3, sp, #12
 8005a48:	4805      	ldr	r0, [pc, #20]	; (8005a60 <fiprintf+0x20>)
 8005a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a4e:	6800      	ldr	r0, [r0, #0]
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	f000 f9a1 	bl	8005d98 <_vfiprintf_r>
 8005a56:	b002      	add	sp, #8
 8005a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a5c:	b003      	add	sp, #12
 8005a5e:	4770      	bx	lr
 8005a60:	20000010 	.word	0x20000010

08005a64 <_fwalk_reent>:
 8005a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a68:	4606      	mov	r6, r0
 8005a6a:	4688      	mov	r8, r1
 8005a6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a70:	2700      	movs	r7, #0
 8005a72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a76:	f1b9 0901 	subs.w	r9, r9, #1
 8005a7a:	d505      	bpl.n	8005a88 <_fwalk_reent+0x24>
 8005a7c:	6824      	ldr	r4, [r4, #0]
 8005a7e:	2c00      	cmp	r4, #0
 8005a80:	d1f7      	bne.n	8005a72 <_fwalk_reent+0xe>
 8005a82:	4638      	mov	r0, r7
 8005a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a88:	89ab      	ldrh	r3, [r5, #12]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d907      	bls.n	8005a9e <_fwalk_reent+0x3a>
 8005a8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a92:	3301      	adds	r3, #1
 8005a94:	d003      	beq.n	8005a9e <_fwalk_reent+0x3a>
 8005a96:	4629      	mov	r1, r5
 8005a98:	4630      	mov	r0, r6
 8005a9a:	47c0      	blx	r8
 8005a9c:	4307      	orrs	r7, r0
 8005a9e:	3568      	adds	r5, #104	; 0x68
 8005aa0:	e7e9      	b.n	8005a76 <_fwalk_reent+0x12>

08005aa2 <__retarget_lock_init_recursive>:
 8005aa2:	4770      	bx	lr

08005aa4 <__retarget_lock_acquire_recursive>:
 8005aa4:	4770      	bx	lr

08005aa6 <__retarget_lock_release_recursive>:
 8005aa6:	4770      	bx	lr

08005aa8 <__swhatbuf_r>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	460e      	mov	r6, r1
 8005aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab0:	2900      	cmp	r1, #0
 8005ab2:	b096      	sub	sp, #88	; 0x58
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	461d      	mov	r5, r3
 8005ab8:	da08      	bge.n	8005acc <__swhatbuf_r+0x24>
 8005aba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	602a      	str	r2, [r5, #0]
 8005ac2:	061a      	lsls	r2, r3, #24
 8005ac4:	d410      	bmi.n	8005ae8 <__swhatbuf_r+0x40>
 8005ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aca:	e00e      	b.n	8005aea <__swhatbuf_r+0x42>
 8005acc:	466a      	mov	r2, sp
 8005ace:	f000 fca5 	bl	800641c <_fstat_r>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	dbf1      	blt.n	8005aba <__swhatbuf_r+0x12>
 8005ad6:	9a01      	ldr	r2, [sp, #4]
 8005ad8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005adc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ae0:	425a      	negs	r2, r3
 8005ae2:	415a      	adcs	r2, r3
 8005ae4:	602a      	str	r2, [r5, #0]
 8005ae6:	e7ee      	b.n	8005ac6 <__swhatbuf_r+0x1e>
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	2000      	movs	r0, #0
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	b016      	add	sp, #88	; 0x58
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005af4 <__smakebuf_r>:
 8005af4:	898b      	ldrh	r3, [r1, #12]
 8005af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005af8:	079d      	lsls	r5, r3, #30
 8005afa:	4606      	mov	r6, r0
 8005afc:	460c      	mov	r4, r1
 8005afe:	d507      	bpl.n	8005b10 <__smakebuf_r+0x1c>
 8005b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	6123      	str	r3, [r4, #16]
 8005b08:	2301      	movs	r3, #1
 8005b0a:	6163      	str	r3, [r4, #20]
 8005b0c:	b002      	add	sp, #8
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	ab01      	add	r3, sp, #4
 8005b12:	466a      	mov	r2, sp
 8005b14:	f7ff ffc8 	bl	8005aa8 <__swhatbuf_r>
 8005b18:	9900      	ldr	r1, [sp, #0]
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f000 f89d 	bl	8005c5c <_malloc_r>
 8005b22:	b948      	cbnz	r0, 8005b38 <__smakebuf_r+0x44>
 8005b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b28:	059a      	lsls	r2, r3, #22
 8005b2a:	d4ef      	bmi.n	8005b0c <__smakebuf_r+0x18>
 8005b2c:	f023 0303 	bic.w	r3, r3, #3
 8005b30:	f043 0302 	orr.w	r3, r3, #2
 8005b34:	81a3      	strh	r3, [r4, #12]
 8005b36:	e7e3      	b.n	8005b00 <__smakebuf_r+0xc>
 8005b38:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <__smakebuf_r+0x7c>)
 8005b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	6020      	str	r0, [r4, #0]
 8005b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b44:	81a3      	strh	r3, [r4, #12]
 8005b46:	9b00      	ldr	r3, [sp, #0]
 8005b48:	6163      	str	r3, [r4, #20]
 8005b4a:	9b01      	ldr	r3, [sp, #4]
 8005b4c:	6120      	str	r0, [r4, #16]
 8005b4e:	b15b      	cbz	r3, 8005b68 <__smakebuf_r+0x74>
 8005b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b54:	4630      	mov	r0, r6
 8005b56:	f000 fc73 	bl	8006440 <_isatty_r>
 8005b5a:	b128      	cbz	r0, 8005b68 <__smakebuf_r+0x74>
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	89a0      	ldrh	r0, [r4, #12]
 8005b6a:	4305      	orrs	r5, r0
 8005b6c:	81a5      	strh	r5, [r4, #12]
 8005b6e:	e7cd      	b.n	8005b0c <__smakebuf_r+0x18>
 8005b70:	080058dd 	.word	0x080058dd

08005b74 <malloc>:
 8005b74:	4b02      	ldr	r3, [pc, #8]	; (8005b80 <malloc+0xc>)
 8005b76:	4601      	mov	r1, r0
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	f000 b86f 	b.w	8005c5c <_malloc_r>
 8005b7e:	bf00      	nop
 8005b80:	20000010 	.word	0x20000010

08005b84 <_free_r>:
 8005b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b86:	2900      	cmp	r1, #0
 8005b88:	d044      	beq.n	8005c14 <_free_r+0x90>
 8005b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8e:	9001      	str	r0, [sp, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f1a1 0404 	sub.w	r4, r1, #4
 8005b96:	bfb8      	it	lt
 8005b98:	18e4      	addlt	r4, r4, r3
 8005b9a:	f000 fc73 	bl	8006484 <__malloc_lock>
 8005b9e:	4a1e      	ldr	r2, [pc, #120]	; (8005c18 <_free_r+0x94>)
 8005ba0:	9801      	ldr	r0, [sp, #4]
 8005ba2:	6813      	ldr	r3, [r2, #0]
 8005ba4:	b933      	cbnz	r3, 8005bb4 <_free_r+0x30>
 8005ba6:	6063      	str	r3, [r4, #4]
 8005ba8:	6014      	str	r4, [r2, #0]
 8005baa:	b003      	add	sp, #12
 8005bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bb0:	f000 bc6e 	b.w	8006490 <__malloc_unlock>
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	d908      	bls.n	8005bca <_free_r+0x46>
 8005bb8:	6825      	ldr	r5, [r4, #0]
 8005bba:	1961      	adds	r1, r4, r5
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	bf01      	itttt	eq
 8005bc0:	6819      	ldreq	r1, [r3, #0]
 8005bc2:	685b      	ldreq	r3, [r3, #4]
 8005bc4:	1949      	addeq	r1, r1, r5
 8005bc6:	6021      	streq	r1, [r4, #0]
 8005bc8:	e7ed      	b.n	8005ba6 <_free_r+0x22>
 8005bca:	461a      	mov	r2, r3
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	b10b      	cbz	r3, 8005bd4 <_free_r+0x50>
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	d9fa      	bls.n	8005bca <_free_r+0x46>
 8005bd4:	6811      	ldr	r1, [r2, #0]
 8005bd6:	1855      	adds	r5, r2, r1
 8005bd8:	42a5      	cmp	r5, r4
 8005bda:	d10b      	bne.n	8005bf4 <_free_r+0x70>
 8005bdc:	6824      	ldr	r4, [r4, #0]
 8005bde:	4421      	add	r1, r4
 8005be0:	1854      	adds	r4, r2, r1
 8005be2:	42a3      	cmp	r3, r4
 8005be4:	6011      	str	r1, [r2, #0]
 8005be6:	d1e0      	bne.n	8005baa <_free_r+0x26>
 8005be8:	681c      	ldr	r4, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	6053      	str	r3, [r2, #4]
 8005bee:	4421      	add	r1, r4
 8005bf0:	6011      	str	r1, [r2, #0]
 8005bf2:	e7da      	b.n	8005baa <_free_r+0x26>
 8005bf4:	d902      	bls.n	8005bfc <_free_r+0x78>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	6003      	str	r3, [r0, #0]
 8005bfa:	e7d6      	b.n	8005baa <_free_r+0x26>
 8005bfc:	6825      	ldr	r5, [r4, #0]
 8005bfe:	1961      	adds	r1, r4, r5
 8005c00:	428b      	cmp	r3, r1
 8005c02:	bf04      	itt	eq
 8005c04:	6819      	ldreq	r1, [r3, #0]
 8005c06:	685b      	ldreq	r3, [r3, #4]
 8005c08:	6063      	str	r3, [r4, #4]
 8005c0a:	bf04      	itt	eq
 8005c0c:	1949      	addeq	r1, r1, r5
 8005c0e:	6021      	streq	r1, [r4, #0]
 8005c10:	6054      	str	r4, [r2, #4]
 8005c12:	e7ca      	b.n	8005baa <_free_r+0x26>
 8005c14:	b003      	add	sp, #12
 8005c16:	bd30      	pop	{r4, r5, pc}
 8005c18:	200001d8 	.word	0x200001d8

08005c1c <sbrk_aligned>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4e0e      	ldr	r6, [pc, #56]	; (8005c58 <sbrk_aligned+0x3c>)
 8005c20:	460c      	mov	r4, r1
 8005c22:	6831      	ldr	r1, [r6, #0]
 8005c24:	4605      	mov	r5, r0
 8005c26:	b911      	cbnz	r1, 8005c2e <sbrk_aligned+0x12>
 8005c28:	f000 fb7a 	bl	8006320 <_sbrk_r>
 8005c2c:	6030      	str	r0, [r6, #0]
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4628      	mov	r0, r5
 8005c32:	f000 fb75 	bl	8006320 <_sbrk_r>
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	d00a      	beq.n	8005c50 <sbrk_aligned+0x34>
 8005c3a:	1cc4      	adds	r4, r0, #3
 8005c3c:	f024 0403 	bic.w	r4, r4, #3
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	d007      	beq.n	8005c54 <sbrk_aligned+0x38>
 8005c44:	1a21      	subs	r1, r4, r0
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 fb6a 	bl	8006320 <_sbrk_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d101      	bne.n	8005c54 <sbrk_aligned+0x38>
 8005c50:	f04f 34ff 	mov.w	r4, #4294967295
 8005c54:	4620      	mov	r0, r4
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
 8005c58:	200001dc 	.word	0x200001dc

08005c5c <_malloc_r>:
 8005c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c60:	1ccd      	adds	r5, r1, #3
 8005c62:	f025 0503 	bic.w	r5, r5, #3
 8005c66:	3508      	adds	r5, #8
 8005c68:	2d0c      	cmp	r5, #12
 8005c6a:	bf38      	it	cc
 8005c6c:	250c      	movcc	r5, #12
 8005c6e:	2d00      	cmp	r5, #0
 8005c70:	4607      	mov	r7, r0
 8005c72:	db01      	blt.n	8005c78 <_malloc_r+0x1c>
 8005c74:	42a9      	cmp	r1, r5
 8005c76:	d905      	bls.n	8005c84 <_malloc_r+0x28>
 8005c78:	230c      	movs	r3, #12
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	2600      	movs	r6, #0
 8005c7e:	4630      	mov	r0, r6
 8005c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c84:	4e2e      	ldr	r6, [pc, #184]	; (8005d40 <_malloc_r+0xe4>)
 8005c86:	f000 fbfd 	bl	8006484 <__malloc_lock>
 8005c8a:	6833      	ldr	r3, [r6, #0]
 8005c8c:	461c      	mov	r4, r3
 8005c8e:	bb34      	cbnz	r4, 8005cde <_malloc_r+0x82>
 8005c90:	4629      	mov	r1, r5
 8005c92:	4638      	mov	r0, r7
 8005c94:	f7ff ffc2 	bl	8005c1c <sbrk_aligned>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	d14d      	bne.n	8005d3a <_malloc_r+0xde>
 8005c9e:	6834      	ldr	r4, [r6, #0]
 8005ca0:	4626      	mov	r6, r4
 8005ca2:	2e00      	cmp	r6, #0
 8005ca4:	d140      	bne.n	8005d28 <_malloc_r+0xcc>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4638      	mov	r0, r7
 8005cac:	eb04 0803 	add.w	r8, r4, r3
 8005cb0:	f000 fb36 	bl	8006320 <_sbrk_r>
 8005cb4:	4580      	cmp	r8, r0
 8005cb6:	d13a      	bne.n	8005d2e <_malloc_r+0xd2>
 8005cb8:	6821      	ldr	r1, [r4, #0]
 8005cba:	3503      	adds	r5, #3
 8005cbc:	1a6d      	subs	r5, r5, r1
 8005cbe:	f025 0503 	bic.w	r5, r5, #3
 8005cc2:	3508      	adds	r5, #8
 8005cc4:	2d0c      	cmp	r5, #12
 8005cc6:	bf38      	it	cc
 8005cc8:	250c      	movcc	r5, #12
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7ff ffa5 	bl	8005c1c <sbrk_aligned>
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d02b      	beq.n	8005d2e <_malloc_r+0xd2>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	442b      	add	r3, r5
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	e00e      	b.n	8005cfc <_malloc_r+0xa0>
 8005cde:	6822      	ldr	r2, [r4, #0]
 8005ce0:	1b52      	subs	r2, r2, r5
 8005ce2:	d41e      	bmi.n	8005d22 <_malloc_r+0xc6>
 8005ce4:	2a0b      	cmp	r2, #11
 8005ce6:	d916      	bls.n	8005d16 <_malloc_r+0xba>
 8005ce8:	1961      	adds	r1, r4, r5
 8005cea:	42a3      	cmp	r3, r4
 8005cec:	6025      	str	r5, [r4, #0]
 8005cee:	bf18      	it	ne
 8005cf0:	6059      	strne	r1, [r3, #4]
 8005cf2:	6863      	ldr	r3, [r4, #4]
 8005cf4:	bf08      	it	eq
 8005cf6:	6031      	streq	r1, [r6, #0]
 8005cf8:	5162      	str	r2, [r4, r5]
 8005cfa:	604b      	str	r3, [r1, #4]
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	f104 060b 	add.w	r6, r4, #11
 8005d02:	f000 fbc5 	bl	8006490 <__malloc_unlock>
 8005d06:	f026 0607 	bic.w	r6, r6, #7
 8005d0a:	1d23      	adds	r3, r4, #4
 8005d0c:	1af2      	subs	r2, r6, r3
 8005d0e:	d0b6      	beq.n	8005c7e <_malloc_r+0x22>
 8005d10:	1b9b      	subs	r3, r3, r6
 8005d12:	50a3      	str	r3, [r4, r2]
 8005d14:	e7b3      	b.n	8005c7e <_malloc_r+0x22>
 8005d16:	6862      	ldr	r2, [r4, #4]
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	bf0c      	ite	eq
 8005d1c:	6032      	streq	r2, [r6, #0]
 8005d1e:	605a      	strne	r2, [r3, #4]
 8005d20:	e7ec      	b.n	8005cfc <_malloc_r+0xa0>
 8005d22:	4623      	mov	r3, r4
 8005d24:	6864      	ldr	r4, [r4, #4]
 8005d26:	e7b2      	b.n	8005c8e <_malloc_r+0x32>
 8005d28:	4634      	mov	r4, r6
 8005d2a:	6876      	ldr	r6, [r6, #4]
 8005d2c:	e7b9      	b.n	8005ca2 <_malloc_r+0x46>
 8005d2e:	230c      	movs	r3, #12
 8005d30:	603b      	str	r3, [r7, #0]
 8005d32:	4638      	mov	r0, r7
 8005d34:	f000 fbac 	bl	8006490 <__malloc_unlock>
 8005d38:	e7a1      	b.n	8005c7e <_malloc_r+0x22>
 8005d3a:	6025      	str	r5, [r4, #0]
 8005d3c:	e7de      	b.n	8005cfc <_malloc_r+0xa0>
 8005d3e:	bf00      	nop
 8005d40:	200001d8 	.word	0x200001d8

08005d44 <__sfputc_r>:
 8005d44:	6893      	ldr	r3, [r2, #8]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	b410      	push	{r4}
 8005d4c:	6093      	str	r3, [r2, #8]
 8005d4e:	da08      	bge.n	8005d62 <__sfputc_r+0x1e>
 8005d50:	6994      	ldr	r4, [r2, #24]
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	db01      	blt.n	8005d5a <__sfputc_r+0x16>
 8005d56:	290a      	cmp	r1, #10
 8005d58:	d103      	bne.n	8005d62 <__sfputc_r+0x1e>
 8005d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d5e:	f7ff bbf9 	b.w	8005554 <__swbuf_r>
 8005d62:	6813      	ldr	r3, [r2, #0]
 8005d64:	1c58      	adds	r0, r3, #1
 8005d66:	6010      	str	r0, [r2, #0]
 8005d68:	7019      	strb	r1, [r3, #0]
 8005d6a:	4608      	mov	r0, r1
 8005d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <__sfputs_r>:
 8005d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d74:	4606      	mov	r6, r0
 8005d76:	460f      	mov	r7, r1
 8005d78:	4614      	mov	r4, r2
 8005d7a:	18d5      	adds	r5, r2, r3
 8005d7c:	42ac      	cmp	r4, r5
 8005d7e:	d101      	bne.n	8005d84 <__sfputs_r+0x12>
 8005d80:	2000      	movs	r0, #0
 8005d82:	e007      	b.n	8005d94 <__sfputs_r+0x22>
 8005d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d88:	463a      	mov	r2, r7
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f7ff ffda 	bl	8005d44 <__sfputc_r>
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d1f3      	bne.n	8005d7c <__sfputs_r+0xa>
 8005d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d98 <_vfiprintf_r>:
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	460d      	mov	r5, r1
 8005d9e:	b09d      	sub	sp, #116	; 0x74
 8005da0:	4614      	mov	r4, r2
 8005da2:	4698      	mov	r8, r3
 8005da4:	4606      	mov	r6, r0
 8005da6:	b118      	cbz	r0, 8005db0 <_vfiprintf_r+0x18>
 8005da8:	6983      	ldr	r3, [r0, #24]
 8005daa:	b90b      	cbnz	r3, 8005db0 <_vfiprintf_r+0x18>
 8005dac:	f7ff fdca 	bl	8005944 <__sinit>
 8005db0:	4b89      	ldr	r3, [pc, #548]	; (8005fd8 <_vfiprintf_r+0x240>)
 8005db2:	429d      	cmp	r5, r3
 8005db4:	d11b      	bne.n	8005dee <_vfiprintf_r+0x56>
 8005db6:	6875      	ldr	r5, [r6, #4]
 8005db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dba:	07d9      	lsls	r1, r3, #31
 8005dbc:	d405      	bmi.n	8005dca <_vfiprintf_r+0x32>
 8005dbe:	89ab      	ldrh	r3, [r5, #12]
 8005dc0:	059a      	lsls	r2, r3, #22
 8005dc2:	d402      	bmi.n	8005dca <_vfiprintf_r+0x32>
 8005dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dc6:	f7ff fe6d 	bl	8005aa4 <__retarget_lock_acquire_recursive>
 8005dca:	89ab      	ldrh	r3, [r5, #12]
 8005dcc:	071b      	lsls	r3, r3, #28
 8005dce:	d501      	bpl.n	8005dd4 <_vfiprintf_r+0x3c>
 8005dd0:	692b      	ldr	r3, [r5, #16]
 8005dd2:	b9eb      	cbnz	r3, 8005e10 <_vfiprintf_r+0x78>
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f7ff fc0e 	bl	80055f8 <__swsetup_r>
 8005ddc:	b1c0      	cbz	r0, 8005e10 <_vfiprintf_r+0x78>
 8005dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005de0:	07dc      	lsls	r4, r3, #31
 8005de2:	d50e      	bpl.n	8005e02 <_vfiprintf_r+0x6a>
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	b01d      	add	sp, #116	; 0x74
 8005dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dee:	4b7b      	ldr	r3, [pc, #492]	; (8005fdc <_vfiprintf_r+0x244>)
 8005df0:	429d      	cmp	r5, r3
 8005df2:	d101      	bne.n	8005df8 <_vfiprintf_r+0x60>
 8005df4:	68b5      	ldr	r5, [r6, #8]
 8005df6:	e7df      	b.n	8005db8 <_vfiprintf_r+0x20>
 8005df8:	4b79      	ldr	r3, [pc, #484]	; (8005fe0 <_vfiprintf_r+0x248>)
 8005dfa:	429d      	cmp	r5, r3
 8005dfc:	bf08      	it	eq
 8005dfe:	68f5      	ldreq	r5, [r6, #12]
 8005e00:	e7da      	b.n	8005db8 <_vfiprintf_r+0x20>
 8005e02:	89ab      	ldrh	r3, [r5, #12]
 8005e04:	0598      	lsls	r0, r3, #22
 8005e06:	d4ed      	bmi.n	8005de4 <_vfiprintf_r+0x4c>
 8005e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e0a:	f7ff fe4c 	bl	8005aa6 <__retarget_lock_release_recursive>
 8005e0e:	e7e9      	b.n	8005de4 <_vfiprintf_r+0x4c>
 8005e10:	2300      	movs	r3, #0
 8005e12:	9309      	str	r3, [sp, #36]	; 0x24
 8005e14:	2320      	movs	r3, #32
 8005e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e1e:	2330      	movs	r3, #48	; 0x30
 8005e20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005fe4 <_vfiprintf_r+0x24c>
 8005e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e28:	f04f 0901 	mov.w	r9, #1
 8005e2c:	4623      	mov	r3, r4
 8005e2e:	469a      	mov	sl, r3
 8005e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e34:	b10a      	cbz	r2, 8005e3a <_vfiprintf_r+0xa2>
 8005e36:	2a25      	cmp	r2, #37	; 0x25
 8005e38:	d1f9      	bne.n	8005e2e <_vfiprintf_r+0x96>
 8005e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e3e:	d00b      	beq.n	8005e58 <_vfiprintf_r+0xc0>
 8005e40:	465b      	mov	r3, fp
 8005e42:	4622      	mov	r2, r4
 8005e44:	4629      	mov	r1, r5
 8005e46:	4630      	mov	r0, r6
 8005e48:	f7ff ff93 	bl	8005d72 <__sfputs_r>
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	f000 80aa 	beq.w	8005fa6 <_vfiprintf_r+0x20e>
 8005e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e54:	445a      	add	r2, fp
 8005e56:	9209      	str	r2, [sp, #36]	; 0x24
 8005e58:	f89a 3000 	ldrb.w	r3, [sl]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80a2 	beq.w	8005fa6 <_vfiprintf_r+0x20e>
 8005e62:	2300      	movs	r3, #0
 8005e64:	f04f 32ff 	mov.w	r2, #4294967295
 8005e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e6c:	f10a 0a01 	add.w	sl, sl, #1
 8005e70:	9304      	str	r3, [sp, #16]
 8005e72:	9307      	str	r3, [sp, #28]
 8005e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e78:	931a      	str	r3, [sp, #104]	; 0x68
 8005e7a:	4654      	mov	r4, sl
 8005e7c:	2205      	movs	r2, #5
 8005e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e82:	4858      	ldr	r0, [pc, #352]	; (8005fe4 <_vfiprintf_r+0x24c>)
 8005e84:	f7fa f9b4 	bl	80001f0 <memchr>
 8005e88:	9a04      	ldr	r2, [sp, #16]
 8005e8a:	b9d8      	cbnz	r0, 8005ec4 <_vfiprintf_r+0x12c>
 8005e8c:	06d1      	lsls	r1, r2, #27
 8005e8e:	bf44      	itt	mi
 8005e90:	2320      	movmi	r3, #32
 8005e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e96:	0713      	lsls	r3, r2, #28
 8005e98:	bf44      	itt	mi
 8005e9a:	232b      	movmi	r3, #43	; 0x2b
 8005e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ea6:	d015      	beq.n	8005ed4 <_vfiprintf_r+0x13c>
 8005ea8:	9a07      	ldr	r2, [sp, #28]
 8005eaa:	4654      	mov	r4, sl
 8005eac:	2000      	movs	r0, #0
 8005eae:	f04f 0c0a 	mov.w	ip, #10
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eb8:	3b30      	subs	r3, #48	; 0x30
 8005eba:	2b09      	cmp	r3, #9
 8005ebc:	d94e      	bls.n	8005f5c <_vfiprintf_r+0x1c4>
 8005ebe:	b1b0      	cbz	r0, 8005eee <_vfiprintf_r+0x156>
 8005ec0:	9207      	str	r2, [sp, #28]
 8005ec2:	e014      	b.n	8005eee <_vfiprintf_r+0x156>
 8005ec4:	eba0 0308 	sub.w	r3, r0, r8
 8005ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	9304      	str	r3, [sp, #16]
 8005ed0:	46a2      	mov	sl, r4
 8005ed2:	e7d2      	b.n	8005e7a <_vfiprintf_r+0xe2>
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	1d19      	adds	r1, r3, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	9103      	str	r1, [sp, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bfbb      	ittet	lt
 8005ee0:	425b      	neglt	r3, r3
 8005ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ee6:	9307      	strge	r3, [sp, #28]
 8005ee8:	9307      	strlt	r3, [sp, #28]
 8005eea:	bfb8      	it	lt
 8005eec:	9204      	strlt	r2, [sp, #16]
 8005eee:	7823      	ldrb	r3, [r4, #0]
 8005ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ef2:	d10c      	bne.n	8005f0e <_vfiprintf_r+0x176>
 8005ef4:	7863      	ldrb	r3, [r4, #1]
 8005ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ef8:	d135      	bne.n	8005f66 <_vfiprintf_r+0x1ce>
 8005efa:	9b03      	ldr	r3, [sp, #12]
 8005efc:	1d1a      	adds	r2, r3, #4
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	9203      	str	r2, [sp, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bfb8      	it	lt
 8005f06:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f0a:	3402      	adds	r4, #2
 8005f0c:	9305      	str	r3, [sp, #20]
 8005f0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ff4 <_vfiprintf_r+0x25c>
 8005f12:	7821      	ldrb	r1, [r4, #0]
 8005f14:	2203      	movs	r2, #3
 8005f16:	4650      	mov	r0, sl
 8005f18:	f7fa f96a 	bl	80001f0 <memchr>
 8005f1c:	b140      	cbz	r0, 8005f30 <_vfiprintf_r+0x198>
 8005f1e:	2340      	movs	r3, #64	; 0x40
 8005f20:	eba0 000a 	sub.w	r0, r0, sl
 8005f24:	fa03 f000 	lsl.w	r0, r3, r0
 8005f28:	9b04      	ldr	r3, [sp, #16]
 8005f2a:	4303      	orrs	r3, r0
 8005f2c:	3401      	adds	r4, #1
 8005f2e:	9304      	str	r3, [sp, #16]
 8005f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f34:	482c      	ldr	r0, [pc, #176]	; (8005fe8 <_vfiprintf_r+0x250>)
 8005f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f3a:	2206      	movs	r2, #6
 8005f3c:	f7fa f958 	bl	80001f0 <memchr>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d03f      	beq.n	8005fc4 <_vfiprintf_r+0x22c>
 8005f44:	4b29      	ldr	r3, [pc, #164]	; (8005fec <_vfiprintf_r+0x254>)
 8005f46:	bb1b      	cbnz	r3, 8005f90 <_vfiprintf_r+0x1f8>
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	3307      	adds	r3, #7
 8005f4c:	f023 0307 	bic.w	r3, r3, #7
 8005f50:	3308      	adds	r3, #8
 8005f52:	9303      	str	r3, [sp, #12]
 8005f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f56:	443b      	add	r3, r7
 8005f58:	9309      	str	r3, [sp, #36]	; 0x24
 8005f5a:	e767      	b.n	8005e2c <_vfiprintf_r+0x94>
 8005f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f60:	460c      	mov	r4, r1
 8005f62:	2001      	movs	r0, #1
 8005f64:	e7a5      	b.n	8005eb2 <_vfiprintf_r+0x11a>
 8005f66:	2300      	movs	r3, #0
 8005f68:	3401      	adds	r4, #1
 8005f6a:	9305      	str	r3, [sp, #20]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	f04f 0c0a 	mov.w	ip, #10
 8005f72:	4620      	mov	r0, r4
 8005f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f78:	3a30      	subs	r2, #48	; 0x30
 8005f7a:	2a09      	cmp	r2, #9
 8005f7c:	d903      	bls.n	8005f86 <_vfiprintf_r+0x1ee>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0c5      	beq.n	8005f0e <_vfiprintf_r+0x176>
 8005f82:	9105      	str	r1, [sp, #20]
 8005f84:	e7c3      	b.n	8005f0e <_vfiprintf_r+0x176>
 8005f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e7f0      	b.n	8005f72 <_vfiprintf_r+0x1da>
 8005f90:	ab03      	add	r3, sp, #12
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	462a      	mov	r2, r5
 8005f96:	4b16      	ldr	r3, [pc, #88]	; (8005ff0 <_vfiprintf_r+0x258>)
 8005f98:	a904      	add	r1, sp, #16
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f3af 8000 	nop.w
 8005fa0:	4607      	mov	r7, r0
 8005fa2:	1c78      	adds	r0, r7, #1
 8005fa4:	d1d6      	bne.n	8005f54 <_vfiprintf_r+0x1bc>
 8005fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fa8:	07d9      	lsls	r1, r3, #31
 8005faa:	d405      	bmi.n	8005fb8 <_vfiprintf_r+0x220>
 8005fac:	89ab      	ldrh	r3, [r5, #12]
 8005fae:	059a      	lsls	r2, r3, #22
 8005fb0:	d402      	bmi.n	8005fb8 <_vfiprintf_r+0x220>
 8005fb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fb4:	f7ff fd77 	bl	8005aa6 <__retarget_lock_release_recursive>
 8005fb8:	89ab      	ldrh	r3, [r5, #12]
 8005fba:	065b      	lsls	r3, r3, #25
 8005fbc:	f53f af12 	bmi.w	8005de4 <_vfiprintf_r+0x4c>
 8005fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fc2:	e711      	b.n	8005de8 <_vfiprintf_r+0x50>
 8005fc4:	ab03      	add	r3, sp, #12
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	462a      	mov	r2, r5
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <_vfiprintf_r+0x258>)
 8005fcc:	a904      	add	r1, sp, #16
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f000 f880 	bl	80060d4 <_printf_i>
 8005fd4:	e7e4      	b.n	8005fa0 <_vfiprintf_r+0x208>
 8005fd6:	bf00      	nop
 8005fd8:	080067b8 	.word	0x080067b8
 8005fdc:	080067d8 	.word	0x080067d8
 8005fe0:	08006798 	.word	0x08006798
 8005fe4:	080067f8 	.word	0x080067f8
 8005fe8:	08006802 	.word	0x08006802
 8005fec:	00000000 	.word	0x00000000
 8005ff0:	08005d73 	.word	0x08005d73
 8005ff4:	080067fe 	.word	0x080067fe

08005ff8 <_printf_common>:
 8005ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	4616      	mov	r6, r2
 8005ffe:	4699      	mov	r9, r3
 8006000:	688a      	ldr	r2, [r1, #8]
 8006002:	690b      	ldr	r3, [r1, #16]
 8006004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006008:	4293      	cmp	r3, r2
 800600a:	bfb8      	it	lt
 800600c:	4613      	movlt	r3, r2
 800600e:	6033      	str	r3, [r6, #0]
 8006010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006014:	4607      	mov	r7, r0
 8006016:	460c      	mov	r4, r1
 8006018:	b10a      	cbz	r2, 800601e <_printf_common+0x26>
 800601a:	3301      	adds	r3, #1
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	0699      	lsls	r1, r3, #26
 8006022:	bf42      	ittt	mi
 8006024:	6833      	ldrmi	r3, [r6, #0]
 8006026:	3302      	addmi	r3, #2
 8006028:	6033      	strmi	r3, [r6, #0]
 800602a:	6825      	ldr	r5, [r4, #0]
 800602c:	f015 0506 	ands.w	r5, r5, #6
 8006030:	d106      	bne.n	8006040 <_printf_common+0x48>
 8006032:	f104 0a19 	add.w	sl, r4, #25
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	6832      	ldr	r2, [r6, #0]
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	42ab      	cmp	r3, r5
 800603e:	dc26      	bgt.n	800608e <_printf_common+0x96>
 8006040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006044:	1e13      	subs	r3, r2, #0
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	bf18      	it	ne
 800604a:	2301      	movne	r3, #1
 800604c:	0692      	lsls	r2, r2, #26
 800604e:	d42b      	bmi.n	80060a8 <_printf_common+0xb0>
 8006050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006054:	4649      	mov	r1, r9
 8006056:	4638      	mov	r0, r7
 8006058:	47c0      	blx	r8
 800605a:	3001      	adds	r0, #1
 800605c:	d01e      	beq.n	800609c <_printf_common+0xa4>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	68e5      	ldr	r5, [r4, #12]
 8006062:	6832      	ldr	r2, [r6, #0]
 8006064:	f003 0306 	and.w	r3, r3, #6
 8006068:	2b04      	cmp	r3, #4
 800606a:	bf08      	it	eq
 800606c:	1aad      	subeq	r5, r5, r2
 800606e:	68a3      	ldr	r3, [r4, #8]
 8006070:	6922      	ldr	r2, [r4, #16]
 8006072:	bf0c      	ite	eq
 8006074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006078:	2500      	movne	r5, #0
 800607a:	4293      	cmp	r3, r2
 800607c:	bfc4      	itt	gt
 800607e:	1a9b      	subgt	r3, r3, r2
 8006080:	18ed      	addgt	r5, r5, r3
 8006082:	2600      	movs	r6, #0
 8006084:	341a      	adds	r4, #26
 8006086:	42b5      	cmp	r5, r6
 8006088:	d11a      	bne.n	80060c0 <_printf_common+0xc8>
 800608a:	2000      	movs	r0, #0
 800608c:	e008      	b.n	80060a0 <_printf_common+0xa8>
 800608e:	2301      	movs	r3, #1
 8006090:	4652      	mov	r2, sl
 8006092:	4649      	mov	r1, r9
 8006094:	4638      	mov	r0, r7
 8006096:	47c0      	blx	r8
 8006098:	3001      	adds	r0, #1
 800609a:	d103      	bne.n	80060a4 <_printf_common+0xac>
 800609c:	f04f 30ff 	mov.w	r0, #4294967295
 80060a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a4:	3501      	adds	r5, #1
 80060a6:	e7c6      	b.n	8006036 <_printf_common+0x3e>
 80060a8:	18e1      	adds	r1, r4, r3
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	2030      	movs	r0, #48	; 0x30
 80060ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060b2:	4422      	add	r2, r4
 80060b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060bc:	3302      	adds	r3, #2
 80060be:	e7c7      	b.n	8006050 <_printf_common+0x58>
 80060c0:	2301      	movs	r3, #1
 80060c2:	4622      	mov	r2, r4
 80060c4:	4649      	mov	r1, r9
 80060c6:	4638      	mov	r0, r7
 80060c8:	47c0      	blx	r8
 80060ca:	3001      	adds	r0, #1
 80060cc:	d0e6      	beq.n	800609c <_printf_common+0xa4>
 80060ce:	3601      	adds	r6, #1
 80060d0:	e7d9      	b.n	8006086 <_printf_common+0x8e>
	...

080060d4 <_printf_i>:
 80060d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060d8:	7e0f      	ldrb	r7, [r1, #24]
 80060da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060dc:	2f78      	cmp	r7, #120	; 0x78
 80060de:	4691      	mov	r9, r2
 80060e0:	4680      	mov	r8, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	469a      	mov	sl, r3
 80060e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060ea:	d807      	bhi.n	80060fc <_printf_i+0x28>
 80060ec:	2f62      	cmp	r7, #98	; 0x62
 80060ee:	d80a      	bhi.n	8006106 <_printf_i+0x32>
 80060f0:	2f00      	cmp	r7, #0
 80060f2:	f000 80d8 	beq.w	80062a6 <_printf_i+0x1d2>
 80060f6:	2f58      	cmp	r7, #88	; 0x58
 80060f8:	f000 80a3 	beq.w	8006242 <_printf_i+0x16e>
 80060fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006104:	e03a      	b.n	800617c <_printf_i+0xa8>
 8006106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800610a:	2b15      	cmp	r3, #21
 800610c:	d8f6      	bhi.n	80060fc <_printf_i+0x28>
 800610e:	a101      	add	r1, pc, #4	; (adr r1, 8006114 <_printf_i+0x40>)
 8006110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006114:	0800616d 	.word	0x0800616d
 8006118:	08006181 	.word	0x08006181
 800611c:	080060fd 	.word	0x080060fd
 8006120:	080060fd 	.word	0x080060fd
 8006124:	080060fd 	.word	0x080060fd
 8006128:	080060fd 	.word	0x080060fd
 800612c:	08006181 	.word	0x08006181
 8006130:	080060fd 	.word	0x080060fd
 8006134:	080060fd 	.word	0x080060fd
 8006138:	080060fd 	.word	0x080060fd
 800613c:	080060fd 	.word	0x080060fd
 8006140:	0800628d 	.word	0x0800628d
 8006144:	080061b1 	.word	0x080061b1
 8006148:	0800626f 	.word	0x0800626f
 800614c:	080060fd 	.word	0x080060fd
 8006150:	080060fd 	.word	0x080060fd
 8006154:	080062af 	.word	0x080062af
 8006158:	080060fd 	.word	0x080060fd
 800615c:	080061b1 	.word	0x080061b1
 8006160:	080060fd 	.word	0x080060fd
 8006164:	080060fd 	.word	0x080060fd
 8006168:	08006277 	.word	0x08006277
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	1d1a      	adds	r2, r3, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	602a      	str	r2, [r5, #0]
 8006174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800617c:	2301      	movs	r3, #1
 800617e:	e0a3      	b.n	80062c8 <_printf_i+0x1f4>
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	6829      	ldr	r1, [r5, #0]
 8006184:	0606      	lsls	r6, r0, #24
 8006186:	f101 0304 	add.w	r3, r1, #4
 800618a:	d50a      	bpl.n	80061a2 <_printf_i+0xce>
 800618c:	680e      	ldr	r6, [r1, #0]
 800618e:	602b      	str	r3, [r5, #0]
 8006190:	2e00      	cmp	r6, #0
 8006192:	da03      	bge.n	800619c <_printf_i+0xc8>
 8006194:	232d      	movs	r3, #45	; 0x2d
 8006196:	4276      	negs	r6, r6
 8006198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800619c:	485e      	ldr	r0, [pc, #376]	; (8006318 <_printf_i+0x244>)
 800619e:	230a      	movs	r3, #10
 80061a0:	e019      	b.n	80061d6 <_printf_i+0x102>
 80061a2:	680e      	ldr	r6, [r1, #0]
 80061a4:	602b      	str	r3, [r5, #0]
 80061a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061aa:	bf18      	it	ne
 80061ac:	b236      	sxthne	r6, r6
 80061ae:	e7ef      	b.n	8006190 <_printf_i+0xbc>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	6820      	ldr	r0, [r4, #0]
 80061b4:	1d19      	adds	r1, r3, #4
 80061b6:	6029      	str	r1, [r5, #0]
 80061b8:	0601      	lsls	r1, r0, #24
 80061ba:	d501      	bpl.n	80061c0 <_printf_i+0xec>
 80061bc:	681e      	ldr	r6, [r3, #0]
 80061be:	e002      	b.n	80061c6 <_printf_i+0xf2>
 80061c0:	0646      	lsls	r6, r0, #25
 80061c2:	d5fb      	bpl.n	80061bc <_printf_i+0xe8>
 80061c4:	881e      	ldrh	r6, [r3, #0]
 80061c6:	4854      	ldr	r0, [pc, #336]	; (8006318 <_printf_i+0x244>)
 80061c8:	2f6f      	cmp	r7, #111	; 0x6f
 80061ca:	bf0c      	ite	eq
 80061cc:	2308      	moveq	r3, #8
 80061ce:	230a      	movne	r3, #10
 80061d0:	2100      	movs	r1, #0
 80061d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061d6:	6865      	ldr	r5, [r4, #4]
 80061d8:	60a5      	str	r5, [r4, #8]
 80061da:	2d00      	cmp	r5, #0
 80061dc:	bfa2      	ittt	ge
 80061de:	6821      	ldrge	r1, [r4, #0]
 80061e0:	f021 0104 	bicge.w	r1, r1, #4
 80061e4:	6021      	strge	r1, [r4, #0]
 80061e6:	b90e      	cbnz	r6, 80061ec <_printf_i+0x118>
 80061e8:	2d00      	cmp	r5, #0
 80061ea:	d04d      	beq.n	8006288 <_printf_i+0x1b4>
 80061ec:	4615      	mov	r5, r2
 80061ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80061f2:	fb03 6711 	mls	r7, r3, r1, r6
 80061f6:	5dc7      	ldrb	r7, [r0, r7]
 80061f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061fc:	4637      	mov	r7, r6
 80061fe:	42bb      	cmp	r3, r7
 8006200:	460e      	mov	r6, r1
 8006202:	d9f4      	bls.n	80061ee <_printf_i+0x11a>
 8006204:	2b08      	cmp	r3, #8
 8006206:	d10b      	bne.n	8006220 <_printf_i+0x14c>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	07de      	lsls	r6, r3, #31
 800620c:	d508      	bpl.n	8006220 <_printf_i+0x14c>
 800620e:	6923      	ldr	r3, [r4, #16]
 8006210:	6861      	ldr	r1, [r4, #4]
 8006212:	4299      	cmp	r1, r3
 8006214:	bfde      	ittt	le
 8006216:	2330      	movle	r3, #48	; 0x30
 8006218:	f805 3c01 	strble.w	r3, [r5, #-1]
 800621c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006220:	1b52      	subs	r2, r2, r5
 8006222:	6122      	str	r2, [r4, #16]
 8006224:	f8cd a000 	str.w	sl, [sp]
 8006228:	464b      	mov	r3, r9
 800622a:	aa03      	add	r2, sp, #12
 800622c:	4621      	mov	r1, r4
 800622e:	4640      	mov	r0, r8
 8006230:	f7ff fee2 	bl	8005ff8 <_printf_common>
 8006234:	3001      	adds	r0, #1
 8006236:	d14c      	bne.n	80062d2 <_printf_i+0x1fe>
 8006238:	f04f 30ff 	mov.w	r0, #4294967295
 800623c:	b004      	add	sp, #16
 800623e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006242:	4835      	ldr	r0, [pc, #212]	; (8006318 <_printf_i+0x244>)
 8006244:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006248:	6829      	ldr	r1, [r5, #0]
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006250:	6029      	str	r1, [r5, #0]
 8006252:	061d      	lsls	r5, r3, #24
 8006254:	d514      	bpl.n	8006280 <_printf_i+0x1ac>
 8006256:	07df      	lsls	r7, r3, #31
 8006258:	bf44      	itt	mi
 800625a:	f043 0320 	orrmi.w	r3, r3, #32
 800625e:	6023      	strmi	r3, [r4, #0]
 8006260:	b91e      	cbnz	r6, 800626a <_printf_i+0x196>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	f023 0320 	bic.w	r3, r3, #32
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	2310      	movs	r3, #16
 800626c:	e7b0      	b.n	80061d0 <_printf_i+0xfc>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	f043 0320 	orr.w	r3, r3, #32
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	2378      	movs	r3, #120	; 0x78
 8006278:	4828      	ldr	r0, [pc, #160]	; (800631c <_printf_i+0x248>)
 800627a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800627e:	e7e3      	b.n	8006248 <_printf_i+0x174>
 8006280:	0659      	lsls	r1, r3, #25
 8006282:	bf48      	it	mi
 8006284:	b2b6      	uxthmi	r6, r6
 8006286:	e7e6      	b.n	8006256 <_printf_i+0x182>
 8006288:	4615      	mov	r5, r2
 800628a:	e7bb      	b.n	8006204 <_printf_i+0x130>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	6826      	ldr	r6, [r4, #0]
 8006290:	6961      	ldr	r1, [r4, #20]
 8006292:	1d18      	adds	r0, r3, #4
 8006294:	6028      	str	r0, [r5, #0]
 8006296:	0635      	lsls	r5, r6, #24
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	d501      	bpl.n	80062a0 <_printf_i+0x1cc>
 800629c:	6019      	str	r1, [r3, #0]
 800629e:	e002      	b.n	80062a6 <_printf_i+0x1d2>
 80062a0:	0670      	lsls	r0, r6, #25
 80062a2:	d5fb      	bpl.n	800629c <_printf_i+0x1c8>
 80062a4:	8019      	strh	r1, [r3, #0]
 80062a6:	2300      	movs	r3, #0
 80062a8:	6123      	str	r3, [r4, #16]
 80062aa:	4615      	mov	r5, r2
 80062ac:	e7ba      	b.n	8006224 <_printf_i+0x150>
 80062ae:	682b      	ldr	r3, [r5, #0]
 80062b0:	1d1a      	adds	r2, r3, #4
 80062b2:	602a      	str	r2, [r5, #0]
 80062b4:	681d      	ldr	r5, [r3, #0]
 80062b6:	6862      	ldr	r2, [r4, #4]
 80062b8:	2100      	movs	r1, #0
 80062ba:	4628      	mov	r0, r5
 80062bc:	f7f9 ff98 	bl	80001f0 <memchr>
 80062c0:	b108      	cbz	r0, 80062c6 <_printf_i+0x1f2>
 80062c2:	1b40      	subs	r0, r0, r5
 80062c4:	6060      	str	r0, [r4, #4]
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	6123      	str	r3, [r4, #16]
 80062ca:	2300      	movs	r3, #0
 80062cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d0:	e7a8      	b.n	8006224 <_printf_i+0x150>
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	462a      	mov	r2, r5
 80062d6:	4649      	mov	r1, r9
 80062d8:	4640      	mov	r0, r8
 80062da:	47d0      	blx	sl
 80062dc:	3001      	adds	r0, #1
 80062de:	d0ab      	beq.n	8006238 <_printf_i+0x164>
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	079b      	lsls	r3, r3, #30
 80062e4:	d413      	bmi.n	800630e <_printf_i+0x23a>
 80062e6:	68e0      	ldr	r0, [r4, #12]
 80062e8:	9b03      	ldr	r3, [sp, #12]
 80062ea:	4298      	cmp	r0, r3
 80062ec:	bfb8      	it	lt
 80062ee:	4618      	movlt	r0, r3
 80062f0:	e7a4      	b.n	800623c <_printf_i+0x168>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4632      	mov	r2, r6
 80062f6:	4649      	mov	r1, r9
 80062f8:	4640      	mov	r0, r8
 80062fa:	47d0      	blx	sl
 80062fc:	3001      	adds	r0, #1
 80062fe:	d09b      	beq.n	8006238 <_printf_i+0x164>
 8006300:	3501      	adds	r5, #1
 8006302:	68e3      	ldr	r3, [r4, #12]
 8006304:	9903      	ldr	r1, [sp, #12]
 8006306:	1a5b      	subs	r3, r3, r1
 8006308:	42ab      	cmp	r3, r5
 800630a:	dcf2      	bgt.n	80062f2 <_printf_i+0x21e>
 800630c:	e7eb      	b.n	80062e6 <_printf_i+0x212>
 800630e:	2500      	movs	r5, #0
 8006310:	f104 0619 	add.w	r6, r4, #25
 8006314:	e7f5      	b.n	8006302 <_printf_i+0x22e>
 8006316:	bf00      	nop
 8006318:	08006809 	.word	0x08006809
 800631c:	0800681a 	.word	0x0800681a

08006320 <_sbrk_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4d06      	ldr	r5, [pc, #24]	; (800633c <_sbrk_r+0x1c>)
 8006324:	2300      	movs	r3, #0
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	602b      	str	r3, [r5, #0]
 800632c:	f7fa fcfa 	bl	8000d24 <_sbrk>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_sbrk_r+0x1a>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_sbrk_r+0x1a>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	200001e0 	.word	0x200001e0

08006340 <__sread>:
 8006340:	b510      	push	{r4, lr}
 8006342:	460c      	mov	r4, r1
 8006344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006348:	f000 f8a8 	bl	800649c <_read_r>
 800634c:	2800      	cmp	r0, #0
 800634e:	bfab      	itete	ge
 8006350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006352:	89a3      	ldrhlt	r3, [r4, #12]
 8006354:	181b      	addge	r3, r3, r0
 8006356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800635a:	bfac      	ite	ge
 800635c:	6563      	strge	r3, [r4, #84]	; 0x54
 800635e:	81a3      	strhlt	r3, [r4, #12]
 8006360:	bd10      	pop	{r4, pc}

08006362 <__swrite>:
 8006362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006366:	461f      	mov	r7, r3
 8006368:	898b      	ldrh	r3, [r1, #12]
 800636a:	05db      	lsls	r3, r3, #23
 800636c:	4605      	mov	r5, r0
 800636e:	460c      	mov	r4, r1
 8006370:	4616      	mov	r6, r2
 8006372:	d505      	bpl.n	8006380 <__swrite+0x1e>
 8006374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006378:	2302      	movs	r3, #2
 800637a:	2200      	movs	r2, #0
 800637c:	f000 f870 	bl	8006460 <_lseek_r>
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800638a:	81a3      	strh	r3, [r4, #12]
 800638c:	4632      	mov	r2, r6
 800638e:	463b      	mov	r3, r7
 8006390:	4628      	mov	r0, r5
 8006392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006396:	f000 b817 	b.w	80063c8 <_write_r>

0800639a <__sseek>:
 800639a:	b510      	push	{r4, lr}
 800639c:	460c      	mov	r4, r1
 800639e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a2:	f000 f85d 	bl	8006460 <_lseek_r>
 80063a6:	1c43      	adds	r3, r0, #1
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	bf15      	itete	ne
 80063ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80063ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063b6:	81a3      	strheq	r3, [r4, #12]
 80063b8:	bf18      	it	ne
 80063ba:	81a3      	strhne	r3, [r4, #12]
 80063bc:	bd10      	pop	{r4, pc}

080063be <__sclose>:
 80063be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c2:	f000 b81b 	b.w	80063fc <_close_r>
	...

080063c8 <_write_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4d07      	ldr	r5, [pc, #28]	; (80063e8 <_write_r+0x20>)
 80063cc:	4604      	mov	r4, r0
 80063ce:	4608      	mov	r0, r1
 80063d0:	4611      	mov	r1, r2
 80063d2:	2200      	movs	r2, #0
 80063d4:	602a      	str	r2, [r5, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f7fa fc53 	bl	8000c82 <_write>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d102      	bne.n	80063e6 <_write_r+0x1e>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	b103      	cbz	r3, 80063e6 <_write_r+0x1e>
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	200001e0 	.word	0x200001e0

080063ec <abort>:
 80063ec:	b508      	push	{r3, lr}
 80063ee:	2006      	movs	r0, #6
 80063f0:	f000 f88e 	bl	8006510 <raise>
 80063f4:	2001      	movs	r0, #1
 80063f6:	f7fa fc1d 	bl	8000c34 <_exit>
	...

080063fc <_close_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d06      	ldr	r5, [pc, #24]	; (8006418 <_close_r+0x1c>)
 8006400:	2300      	movs	r3, #0
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f7fa fc57 	bl	8000cba <_close>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_close_r+0x1a>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_close_r+0x1a>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	200001e0 	.word	0x200001e0

0800641c <_fstat_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4d07      	ldr	r5, [pc, #28]	; (800643c <_fstat_r+0x20>)
 8006420:	2300      	movs	r3, #0
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
 8006426:	4611      	mov	r1, r2
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	f7fa fc52 	bl	8000cd2 <_fstat>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d102      	bne.n	8006438 <_fstat_r+0x1c>
 8006432:	682b      	ldr	r3, [r5, #0]
 8006434:	b103      	cbz	r3, 8006438 <_fstat_r+0x1c>
 8006436:	6023      	str	r3, [r4, #0]
 8006438:	bd38      	pop	{r3, r4, r5, pc}
 800643a:	bf00      	nop
 800643c:	200001e0 	.word	0x200001e0

08006440 <_isatty_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d06      	ldr	r5, [pc, #24]	; (800645c <_isatty_r+0x1c>)
 8006444:	2300      	movs	r3, #0
 8006446:	4604      	mov	r4, r0
 8006448:	4608      	mov	r0, r1
 800644a:	602b      	str	r3, [r5, #0]
 800644c:	f7fa fc51 	bl	8000cf2 <_isatty>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_isatty_r+0x1a>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	b103      	cbz	r3, 800645a <_isatty_r+0x1a>
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	200001e0 	.word	0x200001e0

08006460 <_lseek_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d07      	ldr	r5, [pc, #28]	; (8006480 <_lseek_r+0x20>)
 8006464:	4604      	mov	r4, r0
 8006466:	4608      	mov	r0, r1
 8006468:	4611      	mov	r1, r2
 800646a:	2200      	movs	r2, #0
 800646c:	602a      	str	r2, [r5, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	f7fa fc4a 	bl	8000d08 <_lseek>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_lseek_r+0x1e>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_lseek_r+0x1e>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	200001e0 	.word	0x200001e0

08006484 <__malloc_lock>:
 8006484:	4801      	ldr	r0, [pc, #4]	; (800648c <__malloc_lock+0x8>)
 8006486:	f7ff bb0d 	b.w	8005aa4 <__retarget_lock_acquire_recursive>
 800648a:	bf00      	nop
 800648c:	200001d4 	.word	0x200001d4

08006490 <__malloc_unlock>:
 8006490:	4801      	ldr	r0, [pc, #4]	; (8006498 <__malloc_unlock+0x8>)
 8006492:	f7ff bb08 	b.w	8005aa6 <__retarget_lock_release_recursive>
 8006496:	bf00      	nop
 8006498:	200001d4 	.word	0x200001d4

0800649c <_read_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d07      	ldr	r5, [pc, #28]	; (80064bc <_read_r+0x20>)
 80064a0:	4604      	mov	r4, r0
 80064a2:	4608      	mov	r0, r1
 80064a4:	4611      	mov	r1, r2
 80064a6:	2200      	movs	r2, #0
 80064a8:	602a      	str	r2, [r5, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f7fa fbcc 	bl	8000c48 <_read>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_read_r+0x1e>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_read_r+0x1e>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	200001e0 	.word	0x200001e0

080064c0 <_raise_r>:
 80064c0:	291f      	cmp	r1, #31
 80064c2:	b538      	push	{r3, r4, r5, lr}
 80064c4:	4604      	mov	r4, r0
 80064c6:	460d      	mov	r5, r1
 80064c8:	d904      	bls.n	80064d4 <_raise_r+0x14>
 80064ca:	2316      	movs	r3, #22
 80064cc:	6003      	str	r3, [r0, #0]
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064d6:	b112      	cbz	r2, 80064de <_raise_r+0x1e>
 80064d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064dc:	b94b      	cbnz	r3, 80064f2 <_raise_r+0x32>
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 f830 	bl	8006544 <_getpid_r>
 80064e4:	462a      	mov	r2, r5
 80064e6:	4601      	mov	r1, r0
 80064e8:	4620      	mov	r0, r4
 80064ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064ee:	f000 b817 	b.w	8006520 <_kill_r>
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d00a      	beq.n	800650c <_raise_r+0x4c>
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	d103      	bne.n	8006502 <_raise_r+0x42>
 80064fa:	2316      	movs	r3, #22
 80064fc:	6003      	str	r3, [r0, #0]
 80064fe:	2001      	movs	r0, #1
 8006500:	e7e7      	b.n	80064d2 <_raise_r+0x12>
 8006502:	2400      	movs	r4, #0
 8006504:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006508:	4628      	mov	r0, r5
 800650a:	4798      	blx	r3
 800650c:	2000      	movs	r0, #0
 800650e:	e7e0      	b.n	80064d2 <_raise_r+0x12>

08006510 <raise>:
 8006510:	4b02      	ldr	r3, [pc, #8]	; (800651c <raise+0xc>)
 8006512:	4601      	mov	r1, r0
 8006514:	6818      	ldr	r0, [r3, #0]
 8006516:	f7ff bfd3 	b.w	80064c0 <_raise_r>
 800651a:	bf00      	nop
 800651c:	20000010 	.word	0x20000010

08006520 <_kill_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4d07      	ldr	r5, [pc, #28]	; (8006540 <_kill_r+0x20>)
 8006524:	2300      	movs	r3, #0
 8006526:	4604      	mov	r4, r0
 8006528:	4608      	mov	r0, r1
 800652a:	4611      	mov	r1, r2
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	f7fa fb71 	bl	8000c14 <_kill>
 8006532:	1c43      	adds	r3, r0, #1
 8006534:	d102      	bne.n	800653c <_kill_r+0x1c>
 8006536:	682b      	ldr	r3, [r5, #0]
 8006538:	b103      	cbz	r3, 800653c <_kill_r+0x1c>
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	bd38      	pop	{r3, r4, r5, pc}
 800653e:	bf00      	nop
 8006540:	200001e0 	.word	0x200001e0

08006544 <_getpid_r>:
 8006544:	f7fa bb5e 	b.w	8000c04 <_getpid>

08006548 <_init>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	bf00      	nop
 800654c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654e:	bc08      	pop	{r3}
 8006550:	469e      	mov	lr, r3
 8006552:	4770      	bx	lr

08006554 <_fini>:
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006556:	bf00      	nop
 8006558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655a:	bc08      	pop	{r3}
 800655c:	469e      	mov	lr, r3
 800655e:	4770      	bx	lr
